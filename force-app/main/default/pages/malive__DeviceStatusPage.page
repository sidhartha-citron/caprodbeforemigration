<apex:page sidebar="false" title="CalAmp Device Checker" controller="malive.MALiveRemoteFunctions">
    <script src="{!URLFOR($Resource.MALive,'/js/jquery-3.1.1.min.js')}"></script>
    
    <script src="{!URLFOR($Resource.MALive,'/js/async.min.js')}"></script>
    
    <apex:slds />
    
    <style>
        * { box-sizing: border-box; }
        .slds-scope {
            padding: 0;
        }
        #map {
            position: absolute;
            top: 0;
            right: 0;
            height: 400px;
            width: calc(100% - 215px);
        }
        .top-content {
            clear: both;
            display: table;
            width: 100%;
        }
        .top-left-content {
            top: 0;
            left: 0;
            height: 400px;
            width: 215px;
            padding: 10px;
            border-right: 1px solid #d8dde6;
        }
        
        
        .device-textarea {
            width: 100%;
            min-height: 165px;
            max-height: 165px;
            margin-bottom: 10px;
        }
        
        #tabs {
            position: absolute;
            width: 100%;
            height: calc(100% - 400px);
            top: 400px;
            background-color: #fff;
            -webkit-transition: .15s;
            -moz-transition: .15s;
            -ms-transition: .15s;
            -o-transition: .15s;
            transition: .15s;
        }
        
        #tabs.in {
            top: 0;
            height: calc(100%);
        }
        
        .tab-block {
            display: none;
            padding: 10px;
            overflow: auto;
            position: absolute;
            height: calc(100% - 41px);
            width: 100%;
        }
        .tab-block.active {
            display: block;
        }
        .slds-tabs--scoped__item {
            margin-left: 0;
        }
        .slds-button {
            font-weight: normal;
        }
        .slds-scope .slds-button--neutral.ul-btn, .slds-scope .slds-button--destructive.ul-btn {
            position: absolute;
            right: 4px;
            top: 4px;
            display: none;
        }
        .slds-scope .slds-button--neutral.ul-btn.in, .slds-scope .slds-button--destructive.ul-btn.in {
            display: inherit;
        }
    </style>
    
    

    <div class="slds-scope" id="sldsScopeContainer">
    
        <div class="top-content">
            <div class="top-left-content">
                <div class="slds-form-element">
                    <label class="slds-form-element__label">ESNs</label>
                    <div class="slds-form-element__control">
                        <div class="slds-select_container">
                            <select class="slds-select" id="vendorselect">
                                <option selected="selected" value="CalAmp">CalAmp</option>
                                <option value="JohnDeere">John Deere</option>
                                <option value="orbcomm">Orbcomm</option>
                                <option value="teletrac">Teletrac</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="slds-form-element">
                    <label class="slds-form-element__label">one per row, or separated by comma</label>
                    <div class="slds-form-element__control">
                        <textarea name="devicesTextBox" class="slds-textarea device-textarea" id="devicesTextBox"></textarea>
                    </div>
                </div>
                <label class="slds-form-element__label">Time for good devices in minutes:</label>
                <div class="slds-form-element">
                    <div class="slds-form-element__control">
                        <input type="text" class="slds-input" id="timebox" value="60" style="margin-bottom: 10px;"/>
                    </div>
                </div>
                <button type="button" class="slds-button slds-button--success" onclick="retrieveDevices(document.getElementById('devicesTextBox').value,document.getElementById('vendorselect').value)">Submit Devices</button>
            </div>
            <div id="map"></div>
        </div>
        
        
        <div class="slds-tabs--scoped" id="tabs">
            
            <ul class="slds-tabs--scoped__nav" role="tablist" style="position: relative;">
                <li class="slds-tabs--scoped__item slds-active" title="Item One" role="presentation"><a class="slds-tabs--scoped__link" href="javascript:void(0);" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-scoped-1" id="tab-scoped-1__item">Devices</a></li>
                <li class="slds-tabs--scoped__item" title="Item Two" role="presentation"><a class="slds-tabs--scoped__link" href="javascript:void(0);" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-2" id="tab-scoped-2__item">History</a></li>
                <button class="slds-button slds-button--neutral ul-btn in" id="expand">Expand</button>
                <button class="slds-button slds-button--destructive ul-btn" id="collapse">Collapse</button>
            </ul>
            
            <div class="tab-block active">
                <button type="button" id='toggleButton' class="slds-button slds-button--neutral" style="margin-bottom: 10px;">Hide/Show Good Devices</button>
                <div class="device-list">
                    <table class="table slds-table slds-table--bordered slds-table--cell-buffer" id="table" cellpadding="5">
                        <thead>
                            <tr class="slds-text-title--caps">
                                <th>ESN</th>
                                <th id="lastAvlCommunication">
                                    <div class="slds-truncate">Last AVL Communication</div>
                                </th>
                                <th>
                                    <div class="slds-truncate">Last Event Type</div>
                                </th>
                                <th>
                                    <div class="slds-truncate">Last Known Position</div>
                                </th>
                                <th>
                                    <div class="slds-truncate">Insert Delay (in mins)</div>
                                </th>
                            </tr>
                        </thead>
                        <tbody class="devices-tbody"></tbody>
                    </table>
                </div>
            </div>
                
            <div class="tab-block">
                <div class="device-history">
                    <label class="slds-form-element__label" style="margin-bottom: 10px;">History (Select an ESN from the Device tab to see)</label>
                    <table class="table slds-table slds-table--bordered slds-table--cell-buffer" id="historyTable" cellpadding="5">
                        <thead>
                            <tr class="slds-text-title--caps">
                                <th>ESN</th>
                                <th id="lastAvlCommunication">
                                    <div class="slds-truncate">Last AVL Communication</div>
                                </th>
                                <th>
                                    <div class="slds-truncate">Last Event Type</div>
                                </th>
                                <th>
                                    <div class="slds-truncate">Last Known Position</div>
                                </th>
                                <th>
                                    <div class="slds-truncate">Insert Delay (in mins)</div>
                                </th>
                            </tr>
                      </thead>
                      <tbody class="historyTbody"></tbody>
                    </table>
                </div>
            </div>
        </div>
        
    </div>
    
    
        <script>
        
            function isLightningExperienceOrSalesforce1() 
            {
               return((typeof sforce != 'undefined') && sforce && (!!sforce.one));
            }
            
            if( isLightningExperienceOrSalesforce1() ) 
            {
                //console.log('Do something for Lightning Experience');
            } else {
               //console.log('Use classic Visualforce');
               document.getElementById('sldsScopeContainer').style.minHeight = "750px";
            }
        
            document.getElementById('expand').onclick = function () {
                document.getElementById('tabs').classList.toggle('in');
                document.getElementById('collapse').classList.toggle('in');
                this.classList.toggle('in');
            }
            
            document.getElementById('collapse').onclick = function () {
                document.getElementById('tabs').classList.toggle('in');
                document.getElementById('expand').classList.toggle('in');
                this.classList.toggle('in');
            }
        
            // tab script begin
            
            var tabLink = document.getElementsByClassName('slds-tabs--scoped__item');
            var tabBlock = document.getElementsByClassName('tab-block');
            
            function setTabs() {
                var i;
            
                for (i = 0; i < tabLink.length; i++) {
                    tabLink[i].setAttribute("onclick", "openTab(" + i + ");");
                    tabLink[i].setAttribute("id", "tabLink_" + i);
                }
            
                for (i = 0; i < tabBlock.length; i++) {
                    tabBlock[i].setAttribute("id", i)
                }
            };
            
            window.onload = setTabs();
            
            function openTab(tab) 
            {
                for (i = 0; i < tabBlock.length; i++) {
                    tabBlock[i].classList.remove('active');
                }
            
                for (i = 0; i < tabBlock.length; i++) {
                    tabLink[i].classList.remove('slds-active');
                }
            
                document.getElementById("tabLink_" + tab).classList.add('slds-active');
            
                document.getElementById(tab).classList.add('active');
            }
                
            
            // tab script end
            
            $(function(){
                
                
            }); //end $(function(){
            
        </script>
   
    
    <script>
        var totalNumOfDevice = 0;
        var totalNumOfErrors = 0;
        var markers = [];
        var devicesFromBox;
        var map;
        

        //dom function
        $(function(){

            

            // an error occurred, display the error message ...
            $("#toggleButton").click(function(){
                $(".good").closest("tr").toggle();
            });

        });
        
        function error(err)
        {
            alert('An Error occurred: ' + err.statusText);
        };

        // upon recieving a response for the devices request, render the devices ...
        function renderDevices(response) 
        {
            //console.log(response);
            
            var devices = response.positions;
            //$message.text(devices.length + ' Devices');
            
            var goodTime = parseInt($("#timebox").val());
            
            //console.log(goodTime);
            
            

            totalNumOfDevice = devices.length;

            for (var i = devices.length - 1; i >= 0; i--) 
            {

                device = devices[i];
                
                //console.log(device);
                
                if(device.success)
                {
                    var element = '<tr>';
                    var timeDelay = (device.timeInserted - device.timestamp)/1000/60;
                    var timeSinceLastALV = (Math.abs(device.timeInserted - (new Date()).getTime() )/1000/60).toFixed(2);
                    
                    element += '<td><a href="#" onclick="handleESNClick(this)">' + (device.deviceId || '') + '</a></td>';
                    //element += '<td>' + (new Date(device.timestamp).toLocaleDateString() || '')  + '</td>';
                    //element += '<td>' + (new Date(device.timestamp).toUTCString() || '') + ' - ' + (new Date(device.timestamp).toLocaleString() || '') + ' (' + timeSinceLastALV +' minutes)' + '</td>';
                    
                    if (timeSinceLastALV > goodTime)
                    {
                        element += '<td class="bad"><span style="color: red">' + (new Date(device.timestamp).toLocaleString() || '') + ' (' + timeSinceLastALV +' minutes)' + '</span></td>';
                    }
                    else
                    {
                        element += '<td class="good">' + (new Date(device.timestamp).toLocaleString() || '') + ' (' + timeSinceLastALV +' minutes)' + '</td>';
                    }
                    
                    
                    
                    element += '<td>' + (device.eventType || '') + '</td>';
                    element += '<td>' + '( ' + ((device.position.lat +','+device.position.lng + ')  ' + device.position.address.city + ', ' + device.position.address.state) || '')  + '</td>';
                    element += '<td>' + Math.round(timeDelay * 100)/100 + ' minutes' + '</td>';
                    
                    /*
                    if (timeDelay > goodTime)
                    {
                        dif = '<span style="color: red">' + Math.round(timeDelay * 100)/100 + ' minutes' + '</span>';
                        element += '<td class="bad">' + (dif  || '') + '</td>';

                    }
                    else
                    {
                        dif = '<span style="color: green;">' + Math.round(timeDelay * 100)/100 + ' minutes' + '</span>';
                        element += '<td class="good">' + (dif  || '') + '</td>';
                    }
                    */
                    
                    placeMarker(device.position.lat,device.position.lng,device.deviceId);

                    $('.devices-tbody').append(element);
                }
                else
                {
                    var element = '<tr>';

                    element += '<td>' + (device.deviceId || '') + '</td>';
                    element += '<td class="good">' + '</td>';
                    element += '<td>' + device.message + '</td>';
                    element += '<td>' + '</td>';
                    element += '<td>' + '</td>';

                    $('.devices-tbody').append(element);
                }
            }
            $('.device-list').show();
        };
        
        //get the history of the device
        function handleESNClick(element) {
            
            //console.log('asdf');
            
            $("#historyTable .historyTbody tr").remove(); 
            let deviceID = element.innerHTML;
            var vendor = document.getElementById('vendorselect').value;
            
            var d = new Date();
            
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.MALiveRemoteFunctions.GetLiveDeviceHistory}',
                '1',
                deviceID,
                d.getTime() - 6000000,
                d.getTime(),
                function(result, event){
                    renderHistory(result);
                }
                
            );
            
            
            
            
            /*
            var request = $.get("https://live.mapanythingapis.com/lastposition/v3?deviceid=" + deviceID + "&vendor=" + vendor, function () {
            })
            .done(function(data) {
                console.log("history: ", data);
                renderHistory(data);
            })
            .fail(function(err) {
                error(err);
            })
            */
        };
        
        function renderHistory(response) {
            var devices = response.positions;
            //$message.text(devices.length + ' Devices');

            totalNumOfDevice = devices.length;

            for (var i=0; i < devices.length; i++) 
            {

                device = devices[i];
                if(device.message !== 'No Position Found')
                {
                    var element = '<tr>';
                    var timeDelay = (device.timeInserted - device.timestamp)/1000/60;
                    
                    element += '<td><a href="#" onclick="handleESNClick(this)">' + (device.deviceId || '') + '</a></td>';
                    element += '<td>' + (new Date(device.timestamp).toUTCString() || '')  + '</td>';
                    element += '<td>' + (device.eventType || '') + '</td>';
                    element += '<td>' + '( ' + ((device.position.lat +','+device.position.lng + ')  ' + device.position.address.city + ', ' + device.position.address.state) || '')  + '</td>';
                    
                    if (timeDelay > 0.5)
                    {
                        dif = '<span style="color: red;">' + Math.round(timeDelay * 100)/100 + ' minutes' + '</span>';
                    }
                    else
                    {
                        dif = '<span style="color: green;">' + Math.round(timeDelay * 100)/100 + ' minutes' + '</span>';
                    }

                    element += '<td>' + (dif  || '') + '</td>';

                    $('.historyTbody').append(element);
                }
            }
            $('.device-history').show();
            openTab(1);
        };

        //initalize the map in the cetner of the US
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 39.3002, lng: -97.822},
                zoom: 5
            });
        }

        // retrieve devices for the authenticated user's default account ...
        function retrieveDevices(deviceIds,vendor) 
        {
            clearMarkers();
            $('.devices-tbody').html('');
            
            $('.devices-tbody').html('<div class="slds-spinner_container"><div role="status" class="slds-spinner slds-spinner--medium"><span class="slds-assistive-text">Loading</span><div class="slds-spinner__dot-a"></div><div class="slds-spinner__dot-b"></div></div></div>');
            
            
            //if there are line breaks make it comma separated.
            var str = deviceIds.replace(/(?:\r\n|\r|\n)/g, ',');
            devicesFromBox = str.trim();
            var stringArray = devicesFromBox.split(',');
            //console.log(devicesFromBox);
            //$(".table tbody tr").empty(); 

            var DeviceIds = [];
            
            for (var i =0; i < stringArray.length; i++)
            {
                DeviceIds.push(vendor + '-' + stringArray[i].trim());
            }
            
            
            //general js example
            var batchableData = []; //new array to return
            var tempArray = []; //temp arrays to fill with blockSize
            var blockSize = 20; //size of arrays
                                 
            for(var c = 0; c < DeviceIds.length; c++){
                tempArray.push(DeviceIds[c]);
                         
                if(tempArray.length == blockSize){
                    batchableData.push( {
                    DeviceIds: tempArray
                });
                    tempArray = [];
                }
            }
                         
            //Add any ids from the last loop that may not have hit ID_CHUNK_SIZE array size
            if(tempArray.length > 0){
                batchableData.push( {
                    DeviceIds: tempArray
                });
            }
            
            
            
            var q = async.queue(function (queueOptions, callback) {
                /*************************************************************
                * note: queueOptions is equal to our batchOptions set below
                * See: 'fill out async queue with data' comment below (for loop to fill que)
                * currently the queue is empty so nothing would happen just yet, we just need to define it
                ***************************************************************/
                //once our queue is filled, make a database call or do something with our batch
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.MALiveRemoteFunctions.GetDevicesCurrentLocation}',
                    '1',
                    queueOptions.DeviceIds,
                    function(result, event){
                        renderDevices(result);
                        callback({success:true});
                    }
                    
                );
                
                
                
            }, 5);
            
            q.concurrency = 5; //how many we send at one time to fill queue
            
            q.push(batchableData,function(res){
                //define an optional callback here if needed
                //for example, we are canceling the requests if something goes wrong
                if(!res.success) {
                    //cancel all batches
                    q.tasks = [];
         
                    //notify the user something went wrong!
                }
                else {
                    //perhaps update the user on how many batches are done...
                    //console.log('batch completed');
         
                }
            });
            
            //console.log(q);
                
            
            /*
            for(var i = 0, len = batchableData.length; i < len; i++) {
                var batch = batchableData[i];
             
                //create some options to send to the queue, this could also just be our batch array
                var batchOptions = {
                    DeviceIds: batch
                }
             
                //start filling up the queue
                q.push(batchOptions,function(res){
                    //define an optional callback here if needed
                    //for example, we are canceling the requests if something goes wrong
                    if(!res.success) {
                        //cancel all batches
                        q.tasks = [];
             
                        //notify the user something went wrong!
                    }
                    else {
                        //perhaps update the user on how many batches are done...
                        console.log('batch completed');
             
                    }
                });
             
            }
            */
            
            q.drain = function() {
                //hide a loading screen, show a message etc...
                //console.log('We have finished our batching process!');
                $('.slds-spinner_container').remove();
            };
            
     
        };
        
        function handleGetDevicesCurrentLocationResult(result, event) {
            //console.log(result);
        }


        //place google maps marker
        function placeMarker(latitude,longitude,deviceid)
        {
            var position = {lat: latitude, lng: longitude};

            var infowindow = new google.maps.InfoWindow({
                content: 'ESN:  ' + deviceid
            });
            var marker = new google.maps.Marker({
                position: position, 
                map: map
            });

            marker.addListener('click', function() {
                infowindow.open(map, marker);
            });

            markers.push(marker);
        }
        
        function clearMarkers() {
            setMapOnAll(null);
            markers = [];
        }

        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }
        
        
    </script>
    
    <script src="https://maps.googleapis.com/maps/api/js?callback=initMap&key=AIzaSyDJxozOHJ1uC7cOHhQBvxOId-01NW80kLs"></script>
    
</apex:page>