<apex:page sidebar="false" title="MapAnything Live Summaries" controller="malive.MapAnythingLiveSettings" extensions="malive.MALiveRemoteFunctions" docType="html-5.0">

    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MapAnythingLiveSummary,'styles/css/ma-page-summaries-dashboard.css')}" /><!--css specific to this page-->
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.MapAnythingLiveSummary,'styles/css/ma-page-daily-summaries.css')}" />

    <apex:composition template="malive__MALivePageTemplate">
        <apex:define name="title">
            MapAnything Live Configuration
        </apex:define>

        <apex:define name="subtitle">
           Daily Summaries
        </apex:define>

        <apex:define name="body">
            <c:SpinnerFacet />
            <div class="ma-body-content content-wrapper slds-p-horizontal_large is-active" id="summaries-div">
                <div class="slds-grid slds-p-top_large slds-p-bottom_small slds-p-horizontal_small">

                    <div class="slds-col slds-grid">
                        <button class="slds-button slds-button_neutral" onclick="SummaryModal.open();">
                            <span class="slds-button__icon slds-button__icon_left ma-icon ma-icon-add"></span>
                                Add New
                        </button>
                    </div>

                </div>

                <div id="card-section"></div>

            </div>

            <div class="ma-body-content content-wrapper slds-p-horizontal_large" id="summaryschedule-div">
                <apex:form id="theForm">
                    <apex:sectionHeader title="Scheduling" />
                    <apex:pageMessages />

                    <apex:pageBlock title="{!IF(AND(NOT(DailySummBatchScheduled), LastPositionBatchScheduled),'Summary Schedule',IF(AND(DailySummBatchScheduled, NOT(LastPositionBatchScheduled)),'Position Schedule','Summary and Position Schedule'))}" id="SummAndPosBatchSched" mode="edit" rendered="{!OR(!DailySummBatchScheduled, !LastPositionBatchScheduled)}">
                        <apex:pageBlockButtons location="bottom">
                            <apex:commandButton value="Submit" action="{!ScheduleBatches}" rerender="theForm" />
                        </apex:pageBlockButtons>
                        <apex:pageBlockSection columns="1">
                            <apex:pageBlockSectionItem >
                                Frequency
                                <apex:selectList size="1" value="{!DailySummBatchFrequency}">
                                    <apex:selectOption itemValue="5mins" itemLabel="Every 5 mins" />
                                    <apex:selectOption itemValue="10mins" itemLabel="Every 10 mins" />
                                    <apex:selectOption itemValue="15mins" itemLabel="Every 15 mins" />
                                    <apex:selectOption itemValue="30mins" itemLabel="Every 30 mins" />
                                    <apex:selectOption itemValue="Hourly" itemLabel="Hourly" />
                                    <apex:selectOption itemValue="Daily" itemLabel="Daily" />
                                    <apex:actionSupport event="onchange" rerender="SummAndPosBatchSched" />
                                </apex:selectList>
                            </apex:pageBlockSectionItem>
                            <apex:pageBlockSectionItem rendered="{!DailySummBatchFrequency == 'Daily'}">
                                Preferred Time
                                <apex:selectList size="1" value="{!DailySummBatchPreferredTime}">
                                    <apex:selectOption itemValue="0" itemLabel="12:00 AM" />
                                    <apex:selectOption itemValue="1" itemLabel="1:00 AM" />
                                    <apex:selectOption itemValue="2" itemLabel="2:00 AM" />
                                    <apex:selectOption itemValue="3" itemLabel="3:00 AM" />
                                    <apex:selectOption itemValue="4" itemLabel="4:00 AM" />
                                    <apex:selectOption itemValue="5" itemLabel="5:00 AM" />
                                    <apex:selectOption itemValue="6" itemLabel="6:00 AM" />
                                    <apex:selectOption itemValue="7" itemLabel="7:00 AM" />
                                    <apex:selectOption itemValue="8" itemLabel="8:00 AM" />
                                    <apex:selectOption itemValue="9" itemLabel="9:00 AM" />
                                    <apex:selectOption itemValue="10" itemLabel="10:00 AM" />
                                    <apex:selectOption itemValue="11" itemLabel="11:00 AM" />
                                    <apex:selectOption itemValue="12" itemLabel="12:00 PM" />
                                    <apex:selectOption itemValue="13" itemLabel="1:00 PM" />
                                    <apex:selectOption itemValue="14" itemLabel="2:00 PM" />
                                    <apex:selectOption itemValue="15" itemLabel="3:00 PM" />
                                    <apex:selectOption itemValue="16" itemLabel="4:00 PM" />
                                    <apex:selectOption itemValue="17" itemLabel="5:00 PM" />
                                    <apex:selectOption itemValue="18" itemLabel="6:00 PM" />
                                    <apex:selectOption itemValue="19" itemLabel="7:00 PM" />
                                    <apex:selectOption itemValue="20" itemLabel="8:00 PM" />
                                    <apex:selectOption itemValue="21" itemLabel="9:00 PM" />
                                    <apex:selectOption itemValue="22" itemLabel="10:00 PM" />
                                    <apex:selectOption itemValue="23" itemLabel="11:00 PM" />
                                </apex:selectList>
                            </apex:pageBlockSectionItem>
                        </apex:pageBlockSection>
                    </apex:pageBlock>

                </apex:form>
            </div>

            <div class="ma-body-content content-wrapper slds-p-around_medium" id="telematicsalerts-div">
                <div class="slds-card slds-m-bottom_medium">
                    <div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">
                        <div class="slds-grid slds-grid_vertical-align-center">
                            <div class="slds-media__figure slds-align_absolute-center slds-m-right_x-small">
                                <span class="slds-icon ma-icon ma-icon-live-speeding"></span>
                            </div>
                            <div>
                                <h2 class="slds-text-heading_small">Telematics Distro Email Alerts</h2>
                            </div>
                        </div>
                    </div>
                    <div class="slds-container_small">
                        <div class="slds-p-around_medium">
                            <div id="Settings" class="ma-tab-content">
                                <h3 class="slds-text-heading_small">Email Address Registration</h3>
                                <div class="slds-text-color_weak slds-p-vertical_x-small"><abbr class="slds-required">*</abbr>Enter an email address to receive an email when events are captured.</div>
                                <div class="slds-form-element" style="max-width: 375px;">
                                    <div class="flex-row">
                                        <div class="slds-form-element__control flex-grow-1">
                                            <input class="slds-input" placeholder="enter email address" id="email-input" type="text" title="Email" onkeypress="return noenter(event);"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="live-summary-event_body slds-p-left_large slds-p-top_large">
                        <div class="slds-grid slds-grid_vertical-align-center">
                            <div class="slds-form-element slds-m-bottom_small">
                                <div class="slds-form-element__control">
                                    <span class="slds-checkbox">
                                        <input checked="checked" id="stopalertcheckbox" name="options" type="checkbox"/>
                                        <label class="slds-checkbox__label" for="stopalertcheckbox" style="display: flex;">
                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                <div>Receive All Stop Alerts</div>
                                            </span>
                                            <span class="slds-checkbox_faux"></span>
                                            <div class="has-tooltip slds-m-left_small">
                                                <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                    <div class="slds-popover__body">Select this box to receive an email alerts each time a Stop event is captured.</div>
                                                </div>
                                            </div>
                                        </label>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="live-summary-event_body slds-p-left_large">
                        <div class="slds-grid slds-grid_vertical-align-center">
                            <div class="slds-form-element slds-m-bottom_small">
                                <div class="slds-form-element__control">
                                    <span class="slds-checkbox">
                                        <input checked="checked" id="speedalertcheckbox" name="options" type="checkbox"/>
                                        <label class="slds-checkbox__label" for="speedalertcheckbox" style="display: flex;">
                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                <div>Receive All Speeding Alerts</div>
                                            </span>
                                            <span class="slds-checkbox_faux"></span>
                                            <div class="has-tooltip slds-m-left_small">
                                                <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                    <div class="slds-popover__body">Select this box to receive an email alerts each time a Speeding event is captured.</div>
                                                </div>
                                            </div>
                                        </label>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="live-summary-event_body slds-p-left_large">
                        <div class="slds-grid slds-grid_vertical-align-center">
                            <div class="slds-form-element slds-m-bottom_small">
                                <div class="slds-form-element__control">
                                    <span class="slds-checkbox">
                                        <input checked="checked" id="brakealertcheckbox" name="options" type="checkbox"/>
                                        <label class="slds-checkbox__label" for="brakealertcheckbox" style="display: flex;">
                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                <div>Receive All Hard Braking Alerts</div>
                                            </span>
                                            <span class="slds-checkbox_faux"></span>
                                            <div class="has-tooltip slds-m-left_small">
                                                <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                    <div class="slds-popover__body">Select this box to receive an email alerts each time a Hard Braking event is captured.</div>
                                                </div>
                                            </div>
                                        </label>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="live-summary-event_body slds-p-left_large">
                        <div class="slds-grid slds-grid_vertical-align-center">
                            <div class="slds-form-element slds-m-bottom_small">
                                <div class="slds-form-element__control">
                                    <span class="slds-checkbox">
                                        <input checked="checked" id="accelalertcheckbox" name="options" type="checkbox"/>
                                        <label class="slds-checkbox__label" for="accelalertcheckbox" style="display: flex;">
                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                <div>Receive All Hard Accel Alerts</div>
                                            </span>
                                            <span class="slds-checkbox_faux"></span>
                                            <div class="has-tooltip slds-m-left_small">
                                                <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                    <div class="slds-popover__body">Select this box to receive an email alerts each time a Hard Acceleration event is captured.</div>
                                                </div>
                                            </div>
                                        </label>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="live-summary-event_body slds-p-left_large">
                        <div class="slds-grid slds-grid_vertical-align-center">
                            <div class="slds-form-element slds-m-bottom_small">
                                <div class="slds-form-element__control">
                                    <span class="slds-checkbox">
                                        <input checked="checked" id="battalertcheckbox" name="options" type="checkbox"/>
                                        <label class="slds-checkbox__label" for="battalertcheckbox" style="display: flex;">
                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                <div>Receive All Battery Alerts</div>
                                            </span>
                                            <span class="slds-checkbox_faux"></span>
                                            <div class="has-tooltip slds-m-left_small">
                                                <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                    <div class="slds-popover__body">Select this box to receive an email alerts each time a Device Battery event is captured.</div>
                                                </div>
                                            </div>
                                        </label>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="live-summary-event_body slds-p-left_large">
                        <div class="slds-grid slds-grid_vertical-align-center">
                            <div class="slds-form-element slds-m-bottom_small">
                                <div class="slds-form-element__control">
                                    <span class="slds-checkbox">
                                        <input checked="checked" id="threshalertcheckbox" name="options" type="checkbox"/>
                                        <label class="slds-checkbox__label" for="threshalertcheckbox" style="display: flex;">
                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                <div>Receive All Speed Threshold Alerts</div>
                                            </span>
                                            <span class="slds-checkbox_faux"></span>
                                            <div class="has-tooltip slds-m-left_small">
                                                <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                    <div class="slds-popover__body">Select this box to receive an email alerts each time a Speed Threshold event is captured.</div>
                                                </div>
                                            </div>
                                        </label>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="slds-p-left_x-small slds-p-top_x-small">
                    <input type="button" value="Save" id="alertsavebtn" class="slds-button slds-button--success slds-button--brand" onclick="AlertSettings.saveAlertSettings();"/>
                </div>
            </div>

            <div class="ma-body-content content-wrapper slds-p-horizontal_large" id="ingestion-creds-div">
                Loading...
            </div>

            <div class="ma-body-content content-wrapper slds-p-around_medium" id="rules-mgmt-div">
                <div class="slds-card slds-m-bottom_medium">

                    <div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">
                        <div class="slds-grid slds-grid_vertical-align-center">
                            <div class="slds-media__figure slds-align_absolute-center slds-m-right_x-small">
                                <span class="slds-icon ma-icon ma-icon-live-speeding"></span>
                            </div>
                            <div>
                                <h2 class="slds-text-heading_small">Live Rules Management</h2>
                            </div>
                        </div>
                    </div>
                    <div class="slds-container_small">
                        <div class="slds-p-around_medium">
                            <div id="rulesauth" class="ma-tab-content">
                                <h3 class="slds-text-heading_small">Authorization User Registration</h3>
                                <div class="slds-text-color_weak slds-p-vertical_x-small" id="authinfo"></div>
                                <div class="slds-form-element" style="max-width: 375px;">
                                    <div class="slds-col slds-grid">
                                        <div class="slds-col slds-align-middle" id="authmessage"></div>
                                    </div>
                                    <div class="slds-col slds-grid">
                                        <button class="slds-button slds-button_neutral" id="activateAuth">
                                                Authorize
                                        </button>
                                        <button class="slds-button slds-button_neutral" id="deActivateAuth">
                                                De-authorize
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

           <!-- Begin GM Vehicles Management Card -->
           <div class="ma-body-content content-wrapper slds-p-around_medium" id="gm-vehicles-mgmt-div" style="height: 100%;">
                <div class="slds-card slds-m-bottom_medium" style="height: 100%; overflow: hidden;">
                    <div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">
                        <div class="slds-grid slds-grid_vertical-align-center" style="flex-grow: 1;">
                            <div class="slds-col">
                                <h2 class="slds-text-heading_small">GM Vehicles Management</h2>
                            </div>
                            <div class="slds-col_bump-left">
                                <button class="slds-button slds-button_neutral" id="gm-register-vehicles">
                                    <span class="slds-button__icon slds-button__icon_left ma-icon ma-icon-add"></span>
                                    Register Vehicles
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="ma-tab-content" style="height: 100%;">
                        <div class="slds-card slds-m-bottom_medium" style="height: 100%;">
                        <!--  toolbar section -->
                            <div class="slds-grid slds-p-vertical--small">
                                <div class="slds-col slds-grid">


                                 <!-- refresh table -->
                                    <div class="slds-form-element slds-p-horizontal_medium">
                                        <label class="slds-form-element__label slds-grid">
                                            <div>&nbsp;</div>
                                        </label>
                                        <div class="slds-form-element__control">
                                            <button class="slds-button slds-button_neutral" id="gm-refresh-table">
                                                <span class="slds-button__icon slds-button__icon_left ma-icon ma-icon-redo"></span>
                                                Refresh Table
                                            </button>
                                        </div>
                                    </div>
                                <!-- End refresh table -->

                                <!-- Bulk Actions  -->
                                    <div class="slds-grid slds-p-horizontal_medium">
                                        <div class="slds-form-element">
                                            <label class="slds-form-element__label slds-grid">
                                                <div>Bulk Vehicle Actions</div>
                                            </label>
                                            <div class="slds-form-element__control">
                                                <div class="slds-select_container">
                                                    <select class="slds-select" id="gm-action-select">
                                                        <option value="" selected="true">-- Select Action --</option>
                                                        <option value="register">Register</option>
                                                        <option value="deregister">Deregister</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <label class="slds-form-element__label slds-grid">
                                                <div>With (<span id="gm-checked-values-count">0</span>) Selected</div>
                                            </label>
                                        </div>

                                        <div class="slds-form-element slds-p-left--small">
                                            <label class="slds-form-element__label slds-grid">
                                                <div>&nbsp;</div>
                                            </label>
                                            <button class="slds-button slds-button_brand" id="gm-action-apply" disabled="true">
                                                Apply
                                            </button>
                                        </div>
                                    </div>
                                <!-- end Bulk Actions -->

                                <!-- table search & filter -->
                                <div class="slds-form-element">
                                        <label class="slds-form-element__label" for="filterVehicleOptionsInput">Filter Vehicles By Status:</label>
                                        <div class="slds-form-element__control">
                                            <div class="slds-combobox_container">
                                                <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" aria-expanded="true" aria-haspopup="listbox" role="combobox">
                                                    <div class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none">
                                                        <input type="text" class="slds-input slds-combobox__input slds-combobox__input-value" id="filterVehicleOptionsInput" aria-controls="filterVehicleOptions" autoComplete="off" role="textbox" placeholder="Select an Option" readonly="true" value=""
                                                        />
                                                        <span class="slds-icon_container slds-icon-utility-down slds-input__icon slds-input__icon_right actionDropDown" title="Filter Vehicles" style="pointer-events: auto; cursor: pointer;">
                                                            <svg class="slds-icon slds-icon slds-icon_x-small slds-icon-text-default" aria-hidden="true">
                                                                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.MALive,"/assets/icons/utility-sprite/svg/symbols.svg#down")}" />
                                                            </svg>
                                                            <span class="slds-assistive-text">Filter Vehicles"</span>
                                                        </span>
                                                    </div>
                                                    <div id="filterVehicleOptions" role="listbox" class="slds-dropdown slds-dropdown_fluid">
                                                        <ul class="slds-listbox slds-listbox_vertical" role="presentation">

                                                            <li role="presentation" class="slds-listbox__item">
                                                                <div id="success" class="slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-media_center slds-is-selected" role="option">
                                                                    <span class="slds-media__figure">
                                                                        <svg class="slds-icon slds-icon_x-small slds-listbox__icon-selected" aria-hidden="true">
                                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.MALive,"/assets/icons/utility-sprite/svg/symbols.svg#check")}" />
                                                                        </svg>
                                                                    </span>
                                                                    <span class="slds-media__body">
                                                                    <span class="slds-truncate" title="Success">
                                                                        <span class="slds-assistive-text">Current Selection:</span> Registered</span>
                                                                    </span>
                                                                    <span id="gm-success-total" class="slds-float--right">(0)</span>
                                                                </div>
                                                            </li>

                                                            <li role="presentation" class="slds-listbox__item">
                                                                <div id="failure" class="slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-media_center slds-is-selected" role="option">
                                                                    <span class="slds-media__figure">
                                                                    <svg class="slds-icon slds-icon_x-small slds-listbox__icon-selected" aria-hidden="true">
                                                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.MALive,"/assets/icons/utility-sprite/svg/symbols.svg#check")}" />
                                                                    </svg>
                                                                    </span>
                                                                    <span class="slds-media__body">
                                                                    <span class="slds-truncate" title="Failure">
                                                                        <span class="slds-assistive-text">Current Selection:</span> Failure</span>
                                                                    </span>
                                                                    <span id="gm-failure-total" class="slds-float--right">(0)</span>
                                                                </div>
                                                            </li>

                                                            <li role="presentation" class="slds-listbox__item">
                                                                <div id="inProgress" class="slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-media_center slds-is-selected" role="option">
                                                                    <span class="slds-media__figure">
                                                                    <svg class="slds-icon slds-icon_x-small slds-listbox__icon-selected" aria-hidden="true">
                                                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.MALive,"/assets/icons/utility-sprite/svg/symbols.svg#check")}" />
                                                                    </svg>
                                                                    </span>
                                                                    <span class="slds-media__body">
                                                                    <span class="slds-truncate" title="In Progress">
                                                                        <span class="slds-assistive-text">Current Selection:</span> In Progress</span>
                                                                    </span>
                                                                    <span id="gm-inprogress-total" class="slds-float--right">(0)</span>
                                                                </div>
                                                            </li>

                                                            <li role="presentation" class="slds-listbox__item">
                                                                <div id="unsubscribed" class="slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-media_center slds-is-selected" role="option">
                                                                    <span class="slds-media__figure">
                                                                    <svg class="slds-icon slds-icon_x-small slds-listbox__icon-selected" aria-hidden="true">
                                                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.MALive,"/assets/icons/utility-sprite/svg/symbols.svg#check")}" />
                                                                    </svg>
                                                                    </span>
                                                                    <span class="slds-media__body">
                                                                    <span class="slds-truncate" title="Unsubscribed">
                                                                        <span class="slds-assistive-text">Current Selection:</span> Deregistered</span>
                                                                    </span>
                                                                    <span id="gm-unsubscribed-total" class="slds-float--right">(0)</span>
                                                                </div>
                                                            </li>

                                                            <li role="presentation" class="slds-listbox__item">
                                                                <div id="canceled" class="slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-media_center slds-is-selected" role="option">
                                                                    <span class="slds-media__figure">
                                                                    <svg class="slds-icon slds-icon_x-small slds-listbox__icon-selected" aria-hidden="true">
                                                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.MALive,"/assets/icons/utility-sprite/svg/symbols.svg#check")}" />
                                                                    </svg>
                                                                    </span>
                                                                    <span class="slds-media__body">
                                                                    <span class="slds-truncate" title="Canceled">
                                                                        <span class="slds-assistive-text">Current Selection:</span> Canceled</span>
                                                                    </span>
                                                                    <span id="gm-canceled-total" class="slds-float--right">(0)</span>
                                                                </div>
                                                            </li>

                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                <!-- end table search & filter -->

                                </div>
                            </div>


                            <!--  end toolbar section -->
                            <div id="gm-vehicles-table" class="slds-table--header-fixed_container" style="height: 100%;">
                                <div class="slds-scrollable_y" style="height: 100%;">
                                    <table class="slds-table slds-table_resizable-cols slds-table_fixed-layout slds-table_bordered ma-data-table slds-table--header-fixed" role="grid" id="gm-vehicles-state"></table>
                                </div>
                            </div>

                            <!--  start empty-state for table section -->
                            <div id="gm-vehicles-table-empty-state" class="no-vehicles slds-grid slds-p-around--medium">
                                <article class="slds-col slds-align-middle">
                                    <div class="slds-illustration slds-illustration_small">
                                        <svg class="slds-illustration__svg" viewBox="0 0 454 272" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                            <g fill="none" fill-rule="evenodd" transform="translate(-65 -74)">
                                            <g transform="translate(77 180)">
                                                <polyline vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" points="21 74 111.5 0 177.5 54"></polyline>
                                                <polyline vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" points="160 37 181.5 19 249 74"></polyline>
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" d="M5.83623454,54.8238008 C6.47896445,52.7119739 7.52041887,52.7099477 8.16376546,54.8238008 L14,74 L0,74 L5.83623454,54.8238008 Z"></path>
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" d="M14.9699006 61.8628727C15.5388088 59.729467 16.4627585 59.7353443 17.0300994 61.8628727L20 73 12 73 14.9699006 61.8628727zM239.734375 56.5589921C240.43336 54.4620359 241.506942 54.4857215 242.128332 56.5984458L246 69.7621171 237 64.7621171 239.734375 56.5589921z"></path>
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" d="M247.921591,53.8514618 C248.51718,51.7243582 249.484912,51.7318303 250.077772,53.8491859 L254.357732,69.1347569 L242,75 L247.921591,53.8514618 Z" transform="matrix(-1 0 0 1 496.358 0)"></path>
                                            </g>
                                            <g transform="matrix(-1 0 0 1 496 216)">
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" d="M5.9215907,18.8514618 C6.51717971,16.7243582 7.48113835,16.7183512 8.0784093,18.8514618 L14,40 L0,40 L5.9215907,18.8514618 Z" transform="matrix(-1 0 0 1 14 0)"></path>
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" d="M123.136984,25.2363093 C123.613615,23.448945 124.38595,23.4473111 124.863437,25.237887 L126.693756,32.1015868 L120,37 L123.136984,25.2363093 Z" transform="matrix(-1 0 0 1 246.694 0)"></path>
                                                <polyline vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" points="13 37 59.5 0 92.5 27"></polyline>
                                                <polyline vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" points="83 17 92.5 9 127 38"></polyline>
                                            </g>
                                            <g class="slds-illustration__stroke-primary" stroke-linecap="round" stroke-width="3" transform="translate(67 253)">
                                                <path vector-effect="non-scaling-stroke" d="M0 1.5L450 1.5M284 2L419 61M282 2L65 91M443 1.5L449 1.5"></path>
                                            </g>
                                            <g transform="translate(73 163)">
                                                <polygon vector-effect="non-scaling-stroke" fill="#FFF" points="20.906 .73 24.63 2.34 27.093 9.155 11.046 19.877 .131 19.877" transform="translate(80 22)"></polygon>
                                                <g class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3">
                                                <path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path>
                                                <path vector-effect="non-scaling-stroke" d="M83 20.5C84.0558268 16.8461914 86.2227376 14.4572754 89.5007324 13.333252 94.4177246 11.6472168 99.0800781 13.8925781 100.942383 16.1518555 102.804687 18.4111328 103.39502 20.2260742 103.746582 22.1201172 103.980957 23.3828125 104.06543 24.8427734 104 26.5 108.141764 26.3313802 110.918945 27.1647135 112.331543 29 114.040039 31.1936035 114.215332 33.817627 113.593018 35.75 112.970703 37.682373 110.894531 40.5 107 40.5L28 40.5M18 27.5L83.0004985 27.5M0 27.5L8 27.5"></path>
                                                </g>
                                            </g>
                                            <g class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3" transform="translate(292 139)">
                                                <path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path>
                                                <path vector-effect="non-scaling-stroke" d="M83 20.5C84.0558268 16.8461914 86.2227376 14.4572754 89.5007324 13.333252 94.4177246 11.6472168 99.0800781 13.8925781 100.942383 16.1518555 102.804687 18.4111328 103.39502 20.2260742 103.746582 22.1201172 103.980957 23.3828125 104.06543 24.8427734 104 26.5 108.141764 26.3313802 110.918945 27.1647135 112.331543 29 114.040039 31.1936035 114.215332 33.817627 113.593018 35.75 112.970703 37.682373 110.894531 40.5 107 40.5L28 40.5M18 27.5L83.0004985 27.5M0 27.5L8 27.5"></path>
                                            </g>
                                            <g transform="translate(204.5 228.5)">
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" d="M18.9209988,1.95433401 L33.259296,51.443436 C33.5666778,52.5043744 32.9557995,53.613617 31.8948612,53.9209988 C31.7139843,53.9734036 31.5266126,54 31.3382972,54 L2.6617028,54 C1.5571333,54 0.661702805,53.1045695 0.661702805,52 C0.661702805,51.8116846 0.688299176,51.6243129 0.74070397,51.443436 L15.0790012,1.95433401 C15.386383,0.893395645 16.4956256,0.282517358 17.556564,0.589899164 C18.2152102,0.780726338 18.7301717,1.29568777 18.9209988,1.95433401 Z"></path>
                                                <g class="slds-illustration__stroke-primary" stroke-linecap="round" stroke-linejoin="round" stroke-width="3">
                                                <polygon points="17 .324 34 54 0 54"></polygon>
                                                <path vector-effect="non-scaling-stroke" d="M17,6.32394366 C17,42.1378022 17,60.4711356 17,61.3239437 C17,60.4711356 17,42.1378022 17,6.32394366 Z"></path>
                                                <path vector-effect="non-scaling-stroke" d="M17,29.3239437 C22.3333333,35.7851611 25,39.1184944 25,39.3239437 C25,39.1184944 22.3333333,35.7851611 17,29.3239437 Z" transform="matrix(-1 0 0 1 42 0)"></path>
                                                </g>
                                            </g>
                                            <g transform="translate(439.5 227.5)">
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" d="M18.9209988,1.95433401 L33.259296,51.443436 C33.5666778,52.5043744 32.9557995,53.613617 31.8948612,53.9209988 C31.7139843,53.9734036 31.5266126,54 31.3382972,54 L2.6617028,54 C1.5571333,54 0.661702805,53.1045695 0.661702805,52 C0.661702805,51.8116846 0.688299176,51.6243129 0.74070397,51.443436 L15.0790012,1.95433401 C15.386383,0.893395645 16.4956256,0.282517358 17.556564,0.589899164 C18.2152102,0.780726338 18.7301717,1.29568777 18.9209988,1.95433401 Z"></path>
                                                <g class="slds-illustration__stroke-primary" stroke-linecap="round" stroke-linejoin="round" stroke-width="3">
                                                <polygon vector-effect="non-scaling-stroke" points="17 -4.676 34 54 0 54"></polygon>
                                                <path vector-effect="non-scaling-stroke" d="M17,1.32394366 C17,40.3936076 17,60.3936076 17,61.3239437 C17,60.3936076 17,40.3936076 17,1.32394366 Z"></path>
                                                <path vector-effect="non-scaling-stroke" d="M17,29.3239437 C22.3333333,35.7851611 25,39.1184944 25,39.3239437 C25,39.1184944 22.3333333,35.7851611 17,29.3239437 Z" transform="matrix(-1 0 0 1 42 0)"></path>
                                                </g>
                                            </g>
                                            <g transform="translate(141.852 213.5)">
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" d="M25.6478873,0 L50.8997802,86.4391718 C51.2095171,87.4994249 50.6011034,88.6100213 49.5408502,88.9197582 C49.3586621,88.9729817 49.1698252,89 48.980022,89 L2.31575269,89 C1.21118319,89 0.315752686,88.1045695 0.315752686,87 C0.315752686,86.8101968 0.342770948,86.6213599 0.395994453,86.4391718 L25.6478873,0 Z"
                                                transform="translate(1)"></path>
                                                <g class="slds-illustration__stroke-primary" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" transform="translate(0 2)">
                                                <polygon vector-effect="non-scaling-stroke" points="26.648 0 52.648 87 .648 87"></polygon>
                                                <path vector-effect="non-scaling-stroke" d="M26.6478873 6C26.6478873 64.4972948 26.6478873 94.4972948 26.6478873 96 26.6478873 94.4972948 26.6478873 64.4972948 26.6478873 6zM15.6478873 42C22.9812207 49.078692 26.6478873 52.7453587 26.6478873 53 26.6478873 52.7453587 22.9812207 49.078692 15.6478873 42zM27.6478873 68C36.9812207 57.078692 41.6478873 51.7453587 41.6478873 52 41.6478873 51.7453587 36.9812207 57.078692 27.6478873 68z"></path>
                                                </g>
                                            </g>
                                            <g transform="translate(168 57)">
                                                <circle vector-effect="non-scaling-stroke" cx="64" cy="64" r="23" class="slds-illustration__fill-secondary"></circle>
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-dasharray="135 1 1 18" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M64,109 C88.8528137,109 109,88.8528137 109,64 C109,39.1471863 88.8528137,19 64,19 C39.1471863,19 19,39.1471863 19,64 C19,88.8528137 39.1471863,109 64,109 Z"
                                                transform="rotate(-130 64 64)"></path>
                                                <path vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-dasharray="107 10" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M64,97 C82.2253967,97 97,82.2253967 97,64 C97,45.7746033 82.2253967,31 64,31 C45.7746033,31 31,45.7746033 31,64 C31,82.2253967 45.7746033,97 64,97 Z"
                                                transform="rotate(150 64 64)"></path>
                                                <g class="slds-illustration__stroke-primary" stroke-width="3" transform="translate(41 41)">
                                                <circle vector-effect="non-scaling-stroke" cx="23" cy="23" r="23"></circle>
                                                </g>
                                            </g>
                                            </g>
                                        </svg>
                                        <div class="slds-text-longform">
                                            <h3 class="slds-text-heading_large">No Vehicles Registered Yet</h3>
                                            <p class="slds-text-body_regular">Registered Vehicles will appear here.</p>
                                        </div>
                                    </div>
                                </article>
                            </div>
                            <!--  end empty-state for table section -->

                        </div>
                    </div>
                </div>
            </div>
            <!-- End GM Vehicles Management Card -->

            <apex:outputPanel layout="none" rendered="{!pendoEnabled}">
                <script>
                    (function(apiKey){
                        (function(p,e,n,d,o){var v,w,x,y,z;o=p[d]=p[d]||{};o._q=[];
                        v=['initialize','identify','updateOptions','pageLoad'];for(w=0,x=v.length;w<x;++w)(function(m){
                        o[m]=o[m]||function(){o._q[m===v[0]?'unshift':'push']([m].concat([].slice.call(arguments,0)));};})(v[w]);
                        y=e.createElement(n);y.async=!0;y.src='https://cdn.pendo.io/agent/static/'+apiKey+'/pendo.js';
                        z=e.getElementsByTagName(n)[0];z.parentNode.insertBefore(y,z);})(window,document,'script','pendo');

                        // Call this whenever information about your visitors becomes available
                        // Please use Strings, Numbers, or Bools for value types.
                        pendo.initialize({
                            visitor: {
                                id: '{!JSENCODE($User.Id)}',
                                email: '{!JSENCODE($User.Email)}',
                                firstName: '{!JSENCODE($User.FirstName)}',
                                lastName: '{!JSENCODE($User.LastName)}'
                            },
                            account: {
                                id: '{!JSENCODE($Organization.Id)}',
                                name: '{!JSENCODE($Organization.Name)}'
                            }
                        });
                    })('3678d139-e89d-4a02-78a2-9822552912f0');
                </script>
            </apex:outputPanel>

            <script>
                var summaryConfigs = [], summaryFieldData = {}, dataTable = null, hasMessages = false, messageText = "", alertType = "", validationMess = "",
                rulesAuthParams = '{!rulesAuthParams}',
                rulesAuthURL = '{!rulesAuthURL}',
                rulesAuthData = JSON.parse('{!JSENCODE(rulesAuthData)}'); // jsencode was added when maio returned an apostrophe in the message

                    // console.log('rulesAuthURL', rulesAuthURL);
                    // console.log('rulesAuthParams', rulesAuthParams);
                    // console.log('rulesAuthData', rulesAuthData);
                    // console.log('rulesAuthData.auth_exists', rulesAuthData.auth_exists);
                    // console.log('rulesAuthData.display_name', rulesAuthData.display_name);
                    // console.log('rulesAuthData.message', rulesAuthData.message);

                //set up sidebar nav
                var PageTemplateSettings = {
                    sectionRef: 'content-wrapper',
                    menuItems:[
                        {label: 'Daily Summaries', isActive: true, div: 'summaries-div'},
                        {label: 'Summary & Position Schedule', isActive: false, div: 'summaryschedule-div'},
                        {label: 'Telematics Alerts', isActive: false, div: 'telematicsalerts-div'},
                    {label: 'Ingestion Credentials', isActive: false, div: 'ingestion-creds-div'},
                    {label: 'Rules Management', isActive: false, div: 'rules-mgmt-div'},
                    {label: 'GM Vehicles', isActive: false, div: 'gm-vehicles-mgmt-div'}
                    ],
                    onComplete: function() {
                        $( "a[div-ref = 'gm-vehicles-mgmt-div']" ).on( 'click', function( event ) {
                            GMVehiclesMgmt.getAccountVehiclesStatus();
                            GMVehiclesMgmt.setCheckboxColumnWidth();
                        });
                    }
                };

                // historical summary date modal
                var DateModal = {
                    summaryId : "",
                    open : function(summaryId) {
                         if (summaryId) {
                            DateModal.summaryId = summaryId;
                            $(".slds-backdrop").addClass("slds-backdrop_open");
                            $("#datemodal").addClass("slds-fade-in-open");
                            $("#summarymodal").removeClass("slds-fade-in-open");
                        }
                        else {
                            messageText = "No Summary was found to run historical summaries against";
                            alertType = 'error';
                            checkForMessages();
                        }
                    },
                    close : function() {
                        DateModal.summaryId = "";
                        $(".slds-backdrop").removeClass("slds-backdrop_open");
                        $("#datemodal").removeClass("slds-fade-in-open");
                        $("#start-date").datepicker("setSelectedFullDate");
                        $("#start-date").datepicker("setSelectedEndDate");
                    },
                    generate : function() {
                        showSpinner();
                        var startDt = $('#start-date').datepicker('getDate');
                        var endDt = $('#start-date').datepicker('getEndDate');

                        if(typeof startDt.valueOf() === 'object') {
                            DateModal.message("Start date has not been selected.", 'error');
                        }
                        else if(typeof endDt.valueOf() === 'object') {
                            DateModal.message("End date has not been selected.", 'error');
                        }
                        else {
                            var res = confirm('Are you sure you want to re-run historical summaries? Re-running the summaries will delete these days existing summaries and associated records. Recalculation could cause triggers, process builders or flows to re-run at this time.');

                            if (!res) {
                                $("#start-date").datepicker("setSelectedFullDate");
                                $("#start-date").datepicker("setSelectedEndDate");
                                hideSpinner();
                                return;
                            }

                            var stStr = (moment(startDt).year() + "," + (moment(startDt).month() + 1) + "," + moment(startDt).date());
                            var endStr = (moment(endDt).year() + "," + (moment(endDt).month() + 1) + "," + moment(endDt).date());

                            Utility.invokeRemoting({
                                path : '{!$RemoteAction.MALiveRemoteFunctions.genHistoricalSummary}',
                                params : [DateModal.summaryId, stStr, endStr],
                                callback : function(result, event) {
                                    Utility.handleCallback(result, event, null, null,
                                        function(success, result, event) {
                                            if (success) {
                                                DateModal.close();
                                                checkForMessages();
                                            }
                                            else {
                                                DateModal.message(messageText, alertType);
                                            }
                                        }
                                    );
                                }
                            });

                        /* Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.MALiveRemoteFunctions.genHistoricalSummary}',
                                DateModal.summaryId, stStr, endStr, function(result, event) {
                                    hasMessages = true;
                                    if (event.status) {
                                        messageText = result.message;
                                        alertType = result.success ? 'success' : 'error';
                                    }
                                    else if (event.type === 'exception') {
                                        messageText = event.message;
                                        alertType = 'error';
                                    }
                                    else {
                                        messageText = event.message;
                                        alertType = 'error';
                                    }

                                    if (result.success) {
                                        DateModal.close();
                                    checkForMessages();
                                    }
                                    else {
                                        DateModal.message(messageText, alertType);
                                    }
                                }
                        ); */
                            $("#start-date").datepicker("setSelectedFullDate");
                            $("#start-date").datepicker("setSelectedEndDate");
                        }
                        hideSpinner();
                    },
                    message : function(msg, type) {
                        $("#datepicker-group").notify(msg, {arrowShow: false, className : type, position : 'bottom center'});
                    }
                }

                var IngestionModal = {
                    vendorResults: null,
                    get: function() {
                        Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.MALiveRemoteFunctions.getIngestionCredentials}',
                            function(result, event) {
                                // console.log(result);
                                // console.log(event);

                                hasMessages = true;
                                if (event.status) {
                                    IngestionModal.vendorResults = result;

                                    renderedHTML = '';

                                    if (result != null && result.vendors) {

                                        for (var i=0; i < result.vendors.length; i++) {
                                            renderedHTML += '<br /><br />';
                                            renderedHTML += '<div class="slds-card slds-m-bottom_medium">';
                                            renderedHTML += '<div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">';
                                                renderedHTML += '<div class="slds-grid slds-grid_vertical-align-center">';
                                                    renderedHTML += '<div class="slds-media__figure slds-align_absolute-center slds-m-right_x-small">';
                                                        renderedHTML += '<span class="slds-icon ma-icon ma-icon-live-speeding"></span>';
                                                    renderedHTML += '</div>';
                                                    renderedHTML += '<div>';
                                                        renderedHTML += '<h2 class="slds-text-heading_small">' + result.vendors[i].label + '</h2>';
                                                    renderedHTML += '</div>';
                                                renderedHTML += '</div>';
                                            renderedHTML += '</div>';

                                            for (var fieldIndex=0; fieldIndex < result.vendors[i].fields.length; fieldIndex++) {
                                                renderedHTML += '<div class="slds-container_small">';
                                                    renderedHTML += '<div class="slds-p-around_medium">';
                                                        renderedHTML += '<div id="Settings" class="ma-tab-content">';
                                                            renderedHTML += '<h3 class="slds-text-heading_small">' + result.vendors[i].fields[fieldIndex].label + '</h3>';
                                                            renderedHTML += '<div class="slds-text-color_weak slds-p-vertical_x-small">' + result.vendors[i].fields[fieldIndex].helpText +'</div>';
                                                            renderedHTML += '<div class="slds-form-element" style="max-width: 375px;">';
                                                                renderedHTML += '<div class="flex-row">';
                                                                    renderedHTML += '<div class="slds-form-element__control flex-grow-1">';

                                                                            if (result.vendors[i].fields[fieldIndex].type =='clear') {
                                                                            renderedHTML += '<input class="slds-input" value="' + result.vendors[i].fields[fieldIndex].value + '" id="ingestion-'+result.vendors[i].id+'-'+ result.vendors[i].fields[fieldIndex].id+'" type="text" onkeypress="toggleHasError(this.id, false);"/>';
                                                                        }
                                                                            else {
                                                                            renderedHTML += '<input class="slds-input" id="ingestion-'+result.vendors[i].id+'-'+ result.vendors[i].fields[fieldIndex].id+'" type="password" onkeypress="toggleHasError(this.id, false);"/>';
                                                                        }

                                                                    renderedHTML += '</div>';
                                                                renderedHTML += '</div>';
                                                            renderedHTML += '</div>';
                                                        renderedHTML += '</div>';
                                                    renderedHTML += '</div>';
                                                renderedHTML += '</div>';

                                            }
                                                renderedHTML += '<div class="slds-p-around_medium"><strong>Please Note: </strong>Make sure the credentials in this section are correct.<br>If the credentials submitted in this section are not correct, you';
                                                renderedHTML += '<br>will not get data within MapAnything Live.</div>';
                                            renderedHTML += '</div>';

                                        }

                                        renderedHTML += '<div class="slds-p-left_x-small slds-p-top_x-small">';
                                            renderedHTML += '<input class="slds-button slds-button--success slds-button--brand" id="alertsavebtn" onclick="IngestionModal.save();" type="button" value="Save">';
                                        renderedHTML += '</div>';

                                        $('#ingestion-creds-div').html(renderedHTML);
                                        hasMessages = false;
                                    }
                                    else {
                                        messageText = event.message;
                                        alertType = 'error';
                                        $('#ingestion-creds-div').html('Error, please see console');
                                    }
                                }
                                else if (event.type === 'exception') {
                                    messageText = 'An error occurred attempting to retrieve the Ingestion Credentials.';
                                    alertType = 'error';
                                    $('#ingestion-creds-div').html('An error occurred attempting to retrieve the Ingestion Credentials.');
                                }
                                else {
                                    messageText = 'An error occurred attempting to retrieve the Ingestion Credentials.';
                                    alertType = 'error';
                                    $('#ingestion-creds-div').html('An error occurred attempting to retrieve the Ingestion Credentials.');
                                }
                                checkForMessages();
                            }
                        );
                    },
                    save: function() {
                        //loop through and get all values
                        var postPayload = {vendors:[]};
                        var result = IngestionModal.vendorResults;
                        hasMessages = true;

                        if (result != null && result.vendors) {
                            var hasErrors = false;
                            for (var i=0; i < result.vendors.length; i++) {
                                var vendorId = result.vendors[i].id;
                                var changedFields = [];

                                for (var fieldIndex=0; fieldIndex < result.vendors[i].fields.length; fieldIndex++) {
                                    var fieldId = result.vendors[i].fields[fieldIndex].id;

                                    // var OrgValue = $('#ingestion-' + vendorId + '-' + fieldId).attr('orgvalue'); // we no longer care about changed values. we pass all values as long as not empty
                                    var CurrentValue = $('#ingestion-' + vendorId + '-' + fieldId).val().toString().trim();
                                    var inputType = $('#ingestion-' + vendorId + '-' + fieldId).attr('type');

                                    if (CurrentValue.length > 0) {
                                        changedFields.push({id: fieldId, value: CurrentValue});
                                    }
                                    else {
                                        toggleHasError('ingestion-' + vendorId + '-' + fieldId, true);
                                        var message = "The " + result.vendors[i].fields[fieldIndex].label + " field is empty and must be filled in";
                                        addMessage('#ingestion-' + vendorId + '-' + fieldId, message, 'error');
                                        hasErrors = true;
                                    }
                                }
                                
                                if(hasErrors) {
                                    changedFields = [];
                                }
                                else if (changedFields.length > 0) {
                                    postPayload.vendors.push({
                                        id: vendorId,
                                        fields: changedFields
                                    })
                                }
                            }

                            //see if there are any changes to send
                            if (postPayload.vendors.length > 0) {
                                Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.MALiveRemoteFunctions.saveIngestionCredentials}',
                                    JSON.stringify(postPayload), function(result, event) {
                                    // console.log(result);
                                    // console.log(event);
                                        if (event.status) {
                                            messageText = result.message;
                                            alertType = result.success ? 'success' : 'error';
                                            // Get latest stored values again.
                                            IngestionModal.get()
                                        }
                                        else if (event.type === 'exception') {
                                            messageText = event.message;
                                            alertType = 'error';
                                        }
                                        else {
                                            messageText = event.message;
                                            alertType = 'error';
                                        }
                                        checkForMessages();
                                    }
                                );
                            }
                            else {
                                messageText = 'No changes to save!';
                                alertType = 'warning';
                                checkForMessages();
                            }
                            // console.log(postPayload);
                        }
                    }
                }

                // summary edit modal
                var SummaryModal = {
                    summaryId : "",
                    inputFields : ['summary_id','summary_name','summary_description','distance_field','duration_field','spthreshduration_field','speedover_field','speedlimittime_field','speedthresh_field'],
                    ckboxFields : ['stopToggle','stoprecordcheckbox','speedingToggle','speedingrecordcheckbox','speedThreshToggle','speedthresrecordcheckbox','devicebatterycheckbox','hardbrakingcheckbox','hardaccelcheckbox','mileagerecordcheckbox'],
                    open : function(summaryId, action) {
                        $(".slds-backdrop").addClass("slds-backdrop_open");
                        $("#summarymodal").addClass("slds-fade-in-open");
                        $("#datemodal").removeClass("slds-fade-in-open");
                        triggerNav("details-div");
                        if (summaryId) {
                            var clone = false;
                            SummaryModal.summaryId = summaryId;
                            switch (typeof action) {
                                case 'boolean':
                                    clone = action;
                                    break;
                                case 'string':
                                    triggerNav(action + "-div");
                                    break;
                            }
                            populateValues(getSummary(summaryId), clone);
                            if (!clone) {
                                if (action == 'errors') {showSpinner();}
                                createErrorTable(summaryId);
                            }
                        }
                        else {
                            $("#ErrorsSection").toggle(false);
                            $("#no-err-text").toggle(true);
                        }
                        return this;
                    },
                    close : function() {
                        $(".slds-backdrop").removeClass("slds-backdrop_open");
                        $("#summarymodal").removeClass("slds-fade-in-open");
                        SummaryModal.summaryId = "";
                        SummaryModal.clearAllFields().removeHasError(['summary_name','distance_field','measureofdistance_field','duration_field','spthreshduration_field','speedover_field','speedlimittime_field','devicelayer_field']);
                        $("#error-table").html('');
                        $(".associatedMaxDistance").removeClass('slds-has-error');
                        hideSpinner();
                        return this;
                    },
                    save : function() {
                        showSpinner();
                        hasMessages = true;
                        if(fieldsValidated()) {
                            if (summaryFieldData) {
                                var success = false;
                                var summaryDataToSave = JSON.stringify(summaryFieldData);

                                Utility.invokeRemoting({
                                    path : '{!$RemoteAction.MALiveRemoteFunctions.saveSummary}',
                                    params : summaryDataToSave,
                                    callback : function(result, event) {
                                        Utility.handleCallback(result, event, fetchSummaries, null,
                                            function(success, result, event) {
                                                if (success) {
                                                    SummaryModal.close();
                                                    checkForMessages();
                                                }
                                                else {
                                                    SummaryModal.message(messageText, alertType);
                                                }
                                            }
                                        );
                                    }
                                });

                            /* Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.MALiveRemoteFunctions.saveSummary}',
                                    summaryDataToSave, function(result, event) {
                                        if (event.status) {
                                            messageText = result.message;
                                            alertType = result.success ? 'success' : 'error';
                                            success = true;
                                            fetchSummaries();
                                        }
                                        else if (event.type === 'exception') {
                                            messageText = event.message;
                                            alertType = 'error';
                                        }
                                        else {
                                            messageText = event.message;
                                            alertType = 'error';
                                        }
                                        if (success) {
                                            SummaryModal.close();
                                            checkForMessages();
                                        }
                                        else {
                                            SummaryModal.message(messageText, alertType);
                                        }
                                    }
                            ); */
                            }
                            else {
                                messageText = 'an error has occurred during save. no data was found to save.';
                                alertType = 'error';
                                SummaryModal.message(messageText, alertType);
                            }
                        }
                        else {
                            messageText = validationMess;
                            alertType = 'error';
                            SummaryModal.message(messageText, alertType);
                        }
                        hideSpinner();
                        return this;
                    },
                    markAsComplete : function() {
                        var checkedErrors = findCheckedErrors();
                        if (checkedErrors.length > 0) {
                            showSpinner();
                            Utility.invokeRemoting({
                                path : '{!$RemoteAction.MALiveRemoteFunctions.complete}',
                                params : checkedErrors,
                                callback : function(result, event) {
                                    Utility.handleCallback(result, event,
                                        function(success, result, event) {
                                            dataTable.RefreshData();
                                            fetchSummaries();
                                        }, null,
                                        function(success, result, event) {
                                            hideSpinner();
                                            SummaryModal.message(messageText, alertType);
                                        }
                                    );
                                }
                            });

                        /* Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.MALiveRemoteFunctions.complete}',
                                checkedErrors, function(result, event) {
                                    hasMessages = true;
                                    if (event.status) {
                                        messageText = result.message;
                                        alertType = 'success';
                                        dataTable.RefreshData();
                                        fetchSummaries();
                                    }
                                    else if (event.type === 'exception') {
                                        messageText = event.message;
                                        alertType = 'error';
                                    }
                                    else {
                                        messageText = event.message + ' ' + result.message;
                                        alertType = 'error';
                                    }
                                    hideSpinner();
                                    SummaryModal.message(messageText, alertType);
                                }
                        ); */
                        }
                        else {
                            hasMessages = true;
                            messageText = "No errors have been marked for completion. Please check at least one and try again.";
                            alertType = 'error';
                            SummaryModal.message(messageText, alertType);
                        }
                    },
                    rerunSummaries : function() {
                        var checkedErrors = findCheckedErrors();
                        if (checkedErrors.length > 0 && checkedErrors.length <= 10)
                        {
                            showSpinner();

                            var errorMessages = [];

                            for (var checkedErrorsIndex = 0; checkedErrorsIndex < checkedErrors.length; checkedErrorsIndex++) {
                                Utility.invokeRemoting({
                                    path : '{!$RemoteAction.MALiveRemoteFunctions.ReRunSummaryBasedOnMALiveAsyncErrorId}',
                                    params : checkedErrors[checkedErrorsIndex],
                                    callback : function(result, event) {
                                        Utility.handleCallback(result, event,
                                            null,
                                            function(success, result, event) {
                                            errorMessages.push(event.message + ' ' + result.message)
                                            },
                                            null
                                        );
                                        }
                                });
                            }

                            if (errorMessages.length > 0)
                            {
                                SummaryModal.message(errorMessages[0], 'error');
                            }
                            else
                            {
                                SummaryModal.message('Summary re-run in progress', 'success');
                            }

                            dataTable.RefreshData();
                            fetchSummaries();

                            hideSpinner();

                        }
                        else if(checkedErrors.length > 10 || checkedErrors.length == 0) {
                            hasMessages = true;
                            messageText = checkedErrors.length == 0 ? "Please select an error to create a summary for." : "A maximum of 10 errors can be re-run at one time. Please select 50 or less and try again.";
                            alertType = 'error';
                            SummaryModal.message(messageText, alertType);
                        }
                    },
                    removeHasError : function(arrayToSet) {
                        $.each( arrayToSet, function( index, value ) {
                            $("#" + value).closest('div').removeClass('slds-has-error');
                        });
                        return this;
                    },
                    clearAllFields : function() {
                        var markerArray = [];
                        $.each( this.inputFields, function( index, value ) {
                            $( "#" + value ).val( "" );
                        });
                        $.each( this.ckboxFields, function( index, value ) {
                            $( "#" + value ).prop( "checked", true );
                        });
                        $("select.summary-select").val(["feet","miles","mph",false]);
                        $( "#anyduration" ).val( "false" );
                        $( "#anyduration" ).trigger( "change" );
                        // $( "#stopToggle" ).prop( "checked", true );

                        $( '.stopAssociationDiv' ).each(function(index, el) {
                            // clear distance and units for each assoc config
                            $(el).find( '.associatedMaxDistance input' ).val( "" );
                            $(el).find( '.associatedMaxDistanceType select' ).val( "miles" );
                            // find the marker layer search box
                            var markerLayerDiv = $( el ).find( '.slds-form-element__control:first' );
                            var btn = $(markerLayerDiv).find('Button');
                            // clear all assoc search boxes
                            if (btn.length > 0) {
                                btn.trigger('click');
                            }
                            // clear any value typed into the search box
                            $( markerLayerDiv ).find("input:first").val("");
                            $( markerLayerDiv ).removeData();
                        });
                        // clear devicelayer search box
                        markerArray.push( {fieldid: 'devicelayer', layertype: 'live', rectype: ''} );
                        clearLayers( markerArray );
                        return this;

                    },
                    message : function( msg, type ) {
                        $( "#sum-modal-heading-01" ).notify( msg, {arrowShow: false, className : type, position : 'bottom center'} );
                        return this;
                    }
                }

                var AlertSettings = {
                    fetch : function() {
                        Utility.invokeRemoting({
                            path : '{!$RemoteAction.MALiveRemoteFunctions.RetrieveAlertSettings}',
                            callback : function(result, event) {
                                Utility.handleCallback(result, event, AlertSettings.populateAlertSettings, null,
                                    function(success, result, event) {
                                        hideSpinner();
                                        // checkForMessages();
                                    }
                                );
                            }
                        });
                    },
                    saveAlertSettings : function() {
                        var address = document.getElementById("email-input").value;
                        var mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,15})+$/;
                        // var mailformat = /^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/;
                        if(isValueEmptyProto(address) || address.match(mailformat)) {
                            showSpinner();
                            Utility.invokeRemoting({
                                path : '{!$RemoteAction.MALiveRemoteFunctions.saveAlertSettings}',
                                params : [address, getAlertValues()],
                                callback : function(result, event) {
                                    Utility.handleCallback(result, event, null, null,
                                        function(success, result, event) {
                                            hideSpinner();
                                            toggleHasError('email-input', false);
                                            checkForMessages();
                                        }
                                    );
                                }
                            });
                        }
                        else {
                            hasMessages = true;
                            messageText = "You have entered an invalid email address!";
                            alertType = 'error';
                            toggleHasError('email-input', true);
                            checkForMessages();
                        }
                    },
                    populateAlertSettings : function(success, result, event) {
                        if (success) {
                            var alertVals = result.alertvals;
                            // console.log('alertVals', alertVals);
                            $("#email-input").val(alertVals.email);
                            $("#stopalertcheckbox").prop("checked", alertVals['Stop']);
                            $("#speedalertcheckbox").prop("checked", alertVals['Speeding']);
                            $("#brakealertcheckbox").prop("checked", alertVals['HardBraking']);
                            $("#accelalertcheckbox").prop("checked", alertVals['HardAcceleration']);
                            $("#battalertcheckbox").prop("checked", alertVals['DeviceBatteryOn']);
                            $("#threshalertcheckbox").prop("checked", alertVals['SpeedThreshold']);
                        }
                    }
                }

                // GM Vehicles Management
                var GMVehiclesMgmt = {
                    getAccountVehiclesStatus: function() {
                        // First clear out HTML for table if it exists.
                        document.getElementById('gm-vehicles-state').innerHTML = null;

                        // Hide table and empty-state div until table is attempted to be created.
                        $('#gm-vehicles-table').hide();
                        $('#gm-vehicles-table-empty-state').hide();

                        // Construct table with new data.
                        var vehiclesTable = new MADataTable({
                            tableSelector :'#gm-vehicles-state',
                            allowResizing: true,
                            remoteFunction: {
                                path: '{!$RemoteAction.MALiveRemoteFunctions.GetGmVehiclesAccountStatus}',
                                arrayProperty: ['data.success', 'data.failure', 'data.inProgress', 'data.unsubscribed', 'data.canceled']
                            },
                            columns: [
                                {
                                    label: function(obj) {
                                        return '<input type="checkbox" id="gm-check-all" onclick="checkAll(this)"/>';
                                    },
                                    sortable: false,
                                    formatAs: function(obj) {
                                        return '<input type="checkbox" class="tableCheckbox" value="'+ obj.vin +'"/>';
                                    }
                                },
                                {
                                    label: 'VIN',
                                    sortable: true,
                                    property: 'vin'
                                },
                                {
                                    label: 'Status',
                                    sortable: true,
                                    property: 'status',
                                    formatAs: function(obj) {
                                        if (obj.status === 'failure') {
                                            return '<span style="color: red">Failure</span>';
                                        } else if (obj.status === 'success') {
                                            return 'Registered'                                            
                                        } else if (obj.status === 'unsubscribed') {
                                            return 'Deregistered'
                                        } else if (obj.status === 'inProgress') {
                                            return 'In Progress'
                                        } else {
                                            return obj.status.charAt(0).toUpperCase() + obj.status.slice(1);
                                        }
                                    }
                                },
                                {
                                    label: 'Message',
                                    sortable: true,
                                    property: 'message'
                                }
                            ],
                            defaultSortIndex: 1,
                            selectedSortIndex: null,
                            selectedSortOrder: null,
                            events: {
                                loading: function() {
                                    showSpinner();
                                },
                                loadingComplete: function(result) {
                                    // Force width of checkboxes
                                    GMVehiclesMgmt.setCheckboxColumnWidth();

                                    // Rename any 'error' properties to 'message'
                                    var resultKeys = Object.keys(result.data);

                                    for (var i = 0; i < resultKeys.length ; i++) {
                                        if (Array.isArray(result.data[resultKeys[i]])) {
                                            for (var j = 0; j < result.data[resultKeys[i]].length ; j++) {
                                                if(result.data[resultKeys[i]][j].error) result.data[resultKeys[i]][j].message = result.data[resultKeys[i]][j].error;
                                            }
                                        }
                                    }

                                    if (typeof result.data === 'object' && (result.data.success || result.data.failure || result.data.inProgress || result.data.unsubscribed || result.data.canceled)) {
                                        // Set count of status values for filter picker.
                                        $('#gm-success-total').text('(' + result.data.success.length + ')');
                                        $('#gm-failure-total').text('(' + result.data.failure.length + ')');
                                        $('#gm-inprogress-total').text('(' + result.data.inProgress.length + ')');
                                        $('#gm-unsubscribed-total').text('(' + result.data.unsubscribed.length + ')');
                                        $('#gm-canceled-total').text('(' + result.data.canceled.length + ')');

                                        // Show table
                                        $('#gm-vehicles-table-empty-state').hide();
                                        $('#gm-vehicles-table').show();
                                    } else {
                                        // Case for empty-state
                                        $('#gm-vehicles-table-empty-state').show();
                                        $('#gm-vehicles-table').hide();
                                    }
                                },
                                loadingError: function(result, event) {
                                    GMVehiclesMgmt.showGrowlNotification('error', 'Server Error', event.message || 'Contact Support.');
                                    hideSpinner();
                                },
                                tableCreated: function() {
                                    hideSpinner();

                                    // Used to keep track of how many vehicles are checked.
                                    $('.tableCheckbox').on('change', function() {
                                        var selectedVehiclesCount = Number($('#gm-checked-values-count').text());

                                        if ($(this).prop('checked')) {
                                            selectedVehiclesCount++;
                                        } else {
                                            selectedVehiclesCount--;
                                        }

                                        $('#gm-checked-values-count').text(selectedVehiclesCount);
                                    });

                                    // Used to updated the count of checked vehicles if check all is selected
                                    $('#gm-check-all').on('change', function() {
                                        var selectedVehiclesCount = Number($('#gm-checked-values-count').text());

                                        if ($(this).prop('checked')) {
                                            selectedVehiclesCount = GMVehiclesMgmt.getSelectedVehicles().length;
                                        } else {
                                            selectedVehiclesCount = 0;
                                        }

                                        $('#gm-checked-values-count').text(selectedVehiclesCount);
                                    });
                                }
                            }
                        });
                    },
                    startJob: function(jobType) {
                        var vins = document.getElementById('gm-vins').value;
                        var email = document.getElementById('gm-email').value;
                        var fanId = Number(document.getElementById('gm-fan_id').value);

                        // Check VINs
                        if (!vins) {
                            GMVehiclesMgmt.showGrowlNotification('error', 'Validation Issue', 'You must enter at least one VIN to start a ' + jobType + ' job.');
                            return;
                        } else {
                            //Prepare VINs array;
                            vins = vins.split('\n').map(function(item) {
                                return item.trim();
                            });
                            // Check for VIN validity, etc.
                            for (var i = 0; i < vins.length; i++) {
                                if (!GMVehiclesMgmt.checkVinValidity(vins[i])) {
                                    GMVehiclesMgmt.showGrowlNotification('error', 'Invalid VIN Detected', 'VIN ' + vins[i] + ' is not valid.');
                                    return;
                                }
                            }
                        }
                        // Check FAN ID
                        if (!fanId) {
                            GMVehiclesMgmt.showGrowlNotification('error', 'Validation Issue', 'FAN ID is required to start a ' + jobType + ' job.');
                            return;
                        } else {
                            if (fanId.toString().length !== 6) {
                                GMVehiclesMgmt.showGrowlNotification('error', 'Validation Issue', 'FAN ID should be exactly 6 digits.');
                                return;
                            }
                        }

                        // Check Email
                        if (jobType === 'register') {
                            if (!email) {
                                GMVehiclesMgmt.showGrowlNotification('error', 'Validation Issue', 'A recipient email is required to start a ' + jobType + ' job.');
                                return;
                            } else {
                                if (!(/\S+@\S+\.\S+/.test(email))) {
                                    GMVehiclesMgmt.showGrowlNotification('error', 'Validation Issue', 'Enter a valid email address.');
                                    return;
                                }
                            }
                        }

                        showSpinner();
                        Utility.invokeRemoting({
                            path: '{!$RemoteAction.MALiveRemoteFunctions.InitGmVehiclesJob}',
                            params: JSON.stringify({
                                job_type: jobType,
                                email_recipient: email,
                                vins: vins,
                                fan_id: fanId
                            }),
                            callback : function(result, event) {
                                Utility.handleCallback(result, event, null, null,
                                    function(success, result, event) {
                                        if (event.statusCode === 200) {
                                            // Set count of checked vehicles back to 0.
                                            $('#gm-checked-values-count').text(0);

                                            // Close modal
                                            GMVehiclesMgmt.closeModal();

                                            // Notify user of success. Message depends on jobType.
                                            var successMessage;

                                            if (jobType === 'register') {
                                                successMessage = 'You will receive an email when the job has completed.';
                                            } else if (jobType === 'deregister') {
                                                successMessage = 'The vehicles submitted have been deregistered.';
                                            }

                                            GMVehiclesMgmt.showGrowlNotification('notice', 'Job Started', successMessage);

                                            // Get latest account status.
                                            setTimeout(GMVehiclesMgmt.getAccountVehiclesStatus, 3500);
                                        } else {
                                            // Notify user of error.
                                            GMVehiclesMgmt.showGrowlNotification('error', 'Validation Issue', 'There was an issue starting this ' + jobType + ' job.');
                                        }
                                        hideSpinner();
                                        return;
                                    }
                                );
                            }
                        });
                    },
                    filterTable: function(selectedFilters) {
                        $( '#gm-vehicles-state > tbody > tr').attr('hidden', false);
                        $( '#gm-vehicles-state > tbody > tr').filter(function (index) {
                            var $row = $(this);
                            var vehicleStatus = $row.find('td:nth-child(3)').attr('sortable-value');

                            // Only display rows if the status matches the options in the selectedFilters array.
                            if (selectedFilters.indexOf(vehicleStatus) !== -1) {
                                return false;
                            } else {
                                return true;
                            }
                        }).attr('hidden', true);

                        // Update the count of vehicles selected when filter is applied.
                        var selectedVehiclesCount = Number($('#gm-checked-values-count').text());

                        if ($('#gm-check-all').prop('checked')) {
                            selectedVehiclesCount = GMVehiclesMgmt.getSelectedVehicles().length;;
                            $('#gm-checked-values-count').text(selectedVehiclesCount);
                        }
                    },
                    openModal: function(jobType, selectedVehicles) {
                        // add show modal classes
                        $('.slds-backdrop').addClass('slds-backdrop_open');
                        $('#gmmodal').addClass('slds-fade-in-open');

                        // Show button related to job jobType only
                        if (jobType === 'register') {
                            $('#gm-register-job').show();
                            $('#gm-deregister-job').hide();
                            $('#gm-title-register').show();
                            $('#gm-title-deregister').hide();
                            $('#gm-email-div').show();
                        }

                        if (jobType === 'deregister') {
                            $('#gm-register-job').hide();
                            $('#gm-deregister-job').show();
                            $('#gm-title-register').hide();
                            $('#gm-title-deregister').show();
                            $('#gm-email-div').hide();
                        }

                        if (selectedVehicles) {
                            $('#gm-vins').val(GMVehiclesMgmt.getSelectedVehicles().join('\n'));
                        }
                    },
                    closeModal: function() {
                        // Remove show modal classes
                        $(".slds-backdrop").removeClass("slds-backdrop_open");
                        $("#gmmodal").removeClass("slds-fade-in-open");
                    },
                    setCheckboxColumnWidth: function() {
                        $("#gm-vehicles-state > thead > tr > th:nth-child(1)").width(45);
                        $("#gm-vehicles-state th").css({'position': 'static'});
                        $("#gm-vehicles-state th a").addClass('slds-cell-fixed');
                    },
                    getSelectedVehicles: function() {
                        var selectedRows = $('input:checkbox[class="tableCheckbox"]:not(:hidden)');
                        var selectedVehicles = [];

                        for (var i=0; i < selectedRows.length; i++) {
                            if ($(selectedRows[i]).prop('checked')) {
                                selectedVehicles.push(selectedRows[i].value);
                            }
                        }

                        return selectedVehicles;
                    },
                    showGrowlNotification: function(type, title, message) {
                        $.growl[type || 'default']({
                            title: title,
                            message: message,
                            duration: 4000,
                            delayOnHover: true,
                        });
                    },
                    checkVinValidity: function(vin) {
                        vin = vin.toLowerCase();

                        if (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/.test(vin)) {
                            return false;
                        }

                        var transliterationTable = {
                            '0': 0, '1': 1, '2': 2, '3': 3, '4': 4,
                            '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,
                            'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5,
                            'f': 6, 'g': 7, 'h': 8, 'j': 1, 'k': 2,
                            'l': 3, 'm': 4, 'n': 5, 'p': 7, 'r': 9,
                            's': 2, 't': 3, 'u': 4, 'v': 5, 'w': 6,
                            'x': 7, 'y': 8, 'z': 9
                        };

                        var weightsTable = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];

                        var sum = 0;

                        for (var i = 0; i < vin.length; ++i) {
                            sum += transliterationTable[vin.charAt(i)] * weightsTable[i];
                        }

                        var mod = sum % 11;

                        return mod === 10 ? vin.charAt(8) === 'x' : vin.charAt(8) == mod;
                    }
                };


                function getSummary(summaryId) {
                    var summary;
                    $.each( summaryConfigs, function( index, val ) {
                        if ( val.id == summaryId ) {
                            summary = val;
                        }
                    });
                    return summary;
                }

                function populateValues(summarydata, clone) {
                    var name = "";
                    if (clone) {
                        name += "Copy of ";
                    }
                    else if (!isValueEmptyProto(summarydata.id)) {
                        $("#summary_id").val(summarydata.id);
                        $("#measureofdistance_field").val( (summarydata.distmeas).toLowerCase() );
                        $("#speedlimitunits_field").val( (summarydata.speedlimitunits).toLowerCase() );
                        $("#speedthreshunits_field").val( (summarydata.speedthreshunits).toLowerCase() );
                    }
                    name += summarydata.summaryname;
                    $("#summary_name").val(name);
                    $("#summary_description").val(isValueEmptyProto(summarydata.summarydesc) ? "" : summarydata.summarydesc);
                    $("#stopToggle").prop("checked", summarydata.stoptoggle);
                    $("#distance_field").val(summarydata.distval);
                    $("#duration_field").val(summarydata.disttime);
                    $("#stoprecordcheckbox").prop("checked", summarydata.createstoprec);
                    $("#speedingToggle").prop("checked", summarydata.speedingtoggle);
                    $("#speedover_field").val(summarydata.speedlimitover);
                    $("#anyduration").val(summarydata.anyduration ? "true" : "false");
                    $("#anyduration").trigger("change");
                    $("#speedlimittime_field").val(summarydata.speedlimittime);
                    $("#speedingrecordcheckbox").prop("checked", summarydata.createspeedrec);
                    $("#speedThreshToggle").prop("checked", summarydata.speedthreshtoggle);
                    $("#speedthresh_field").val(summarydata.speedthreshval);
                    $("#spthreshduration_field").val(summarydata.threshtime);
                    $("#speedthresrecordcheckbox").prop("checked", summarydata.createspeedthreshrec);
                    $("#devicebatterycheckbox").prop("checked", summarydata.createbattrec);
                    $("#hardbrakingcheckbox").prop("checked", summarydata.createbrakingrec);
                    $("#hardaccelcheckbox").prop("checked", summarydata.createaccelrec);
                    $("#mileagerecordcheckbox").prop("checked", summarydata.createmilerec);

                    $("a[div-ref='errors-div']").closest('li.slds-nav-vertical__item').toggle(true);
                    SetLayer('devicelayer', {'name': summarydata.livelayername, 'id': summarydata.livelayerid, 'type': 'live'});

                    $('.stopAssociationDiv').each(function(index, el) {
                        var markerLayerDivId = $(el).find('.slds-form-element__control:first').prop('id');

                        $.each( Object.keys(summarydata.associations), function( index, value ) {
                            if (value == markerLayerDivId) {
                                var configdata = summarydata.associations[value];
                                if (configdata.hasOwnProperty("markerLayerName")) {
                                    SetLayer(value, {'name': configdata.markerLayerName, 'id': configdata.markerLayerid, 'type': 'marker'});
                                    $("#" + value).data( { configid: configdata.configid, fieldid: value, layertype: 'marker', rectype: configdata.objType } );
                                    $(el).find('.associatedMaxDistance input').val(configdata.maxdistance);
                                    $(el).find('.associatedMaxDistanceType select').val(configdata.maxdistunits);
                                }
                            }
                        });

                    });

                }

                function SetLayer(sectionId, layerData) {
                    // console.log('SetLayer function: ', layerData)
                    if (layerData) {
                        itemSelected(sectionId, layerData.id, layerData);
                    }
                }

                function clearLayers(layerDataArray) {
                    $.each(layerDataArray, function(index, val) {
                        if (val.hasOwnProperty("fieldid")) {
                            clearSelected( val.fieldid, val.layertype, 'null', val.rectype );
                        }
                    });
                }

                function toggleHasError(fieldName, add) {
                    $('#' + fieldName).parent("div").toggleClass('slds-has-error', add);
                }

                function fieldsValidated() {
                    validationMess = "";
                    var valid = true;
                    var summaryId = $("#summary_id").val();
                    if (summaryId) {
                        summaryFieldData = getSummary(summaryId);
                    }
                    else {
                        summaryFieldData = {};
                    }
                    summaryFieldData.summaryname = $("#summary_name").val(),
                    summaryFieldData.summarydesc = $("#summary_description").val(),
                    summaryFieldData.distval = $("#distance_field").val(),
                    summaryFieldData.distmeas = ($("#measureofdistance_field").val()).toLowerCase(),
                    summaryFieldData.disttime = $("#duration_field").val(),
                    summaryFieldData.speedlimitover = $("#speedover_field").val(),
                    summaryFieldData.speedlimitunits = ($("#speedlimitunits_field").val()).toLowerCase(),
                    summaryFieldData.speedlimittime = $("#speedlimittime_field").val(),
                    summaryFieldData.speedingtoggle = $("#speedingToggle").prop("checked"),
                    summaryFieldData.speedthreshunits = ($("#speedthreshunits_field").val()).toLowerCase(),
                    summaryFieldData.speedthreshtoggle = $("#speedThreshToggle").prop("checked"),
                    summaryFieldData.speedthreshval = $("#speedthresh_field").val(),
                    summaryFieldData.threshtime = $("#spthreshduration_field").val(),
                    summaryFieldData.stoptoggle = $("#stopToggle").prop("checked"),
                    summaryFieldData.createstoprec = $("#stoprecordcheckbox").prop("checked"),
                    summaryFieldData.createspeedrec = $("#speedingrecordcheckbox").prop("checked"),
                    summaryFieldData.createspeedthreshrec = $("#speedthresrecordcheckbox").prop("checked"),
                    summaryFieldData.createmilerec = $("#mileagerecordcheckbox").prop("checked"),
                    summaryFieldData.createbattrec = $("#devicebatterycheckbox").prop("checked"),
                    summaryFieldData.createbrakingrec = $("#hardbrakingcheckbox").prop("checked"),
                    summaryFieldData.createaccelrec = $("#hardaccelcheckbox").prop("checked"),
                    summaryFieldData.livelayerid = $('#devicelayer_field').attr('aria-activedescendant'),
                    summaryFieldData.anyduration = $("#anyduration").val() === "true" ? true : false;

                    if(isValueEmptyProto(summaryFieldData.summaryname)) {
                        toggleHasError('summary_name', true);
                        validationMess = "You have not created a name for this Summary. Please add a name in the Details pane.";
                        return false;
                    }

                    // devicelayer = $('#devicelayer_field').attr('aria-activedescendant');
                    if(isValueEmptyProto(summaryFieldData.livelayerid)) {
                        $('#devicelayer_field').parent("div").addClass('slds-has-error');
                        validationMess = "You must choose a Live Layer";
                        return false;
                    }

                    if (summaryFieldData.speedingtoggle) {
                        if (isValueEmptyProto(summaryFieldData.speedlimitover)) {
                            toggleHasError('speedover_field', true);
                            validationMess += "The \'Amount Over Speed Limit\' field for \'Speeding\' definition is empty and must be filled in\n";
                            valid = false;
                        }
                        if (summaryFieldData.anyduration === false && isValueEmptyProto(summaryFieldData.speedlimittime)) {
                            toggleHasError('speedlimittime_field', true);
                            validationMess += "The \'Amount Of Time\' field for \'Speeding\' definition is empty and must be filled in\n";
                            valid = false;
                        }
                    }

                    if (summaryFieldData.speedthreshtoggle) {
                        if (isValueEmptyProto(summaryFieldData.speedthreshval)) {
                            toggleHasError('speedthresh_field', true);
                            validationMess += "The \'Speed Meets or Exceeds\' amount field for \'Speed Threshold\' definition is empty and must be filled in\n";
                            valid = false;
                        }
                        if (isValueEmptyProto(summaryFieldData.threshtime)) {
                            toggleHasError('spthreshduration_field', true);
                            validationMess += "The \'Duration\' field for \'Speed Threshold\' definition is empty and must be filled in\n";
                            valid = false;
                        }
                    }

                    if (summaryFieldData.stoptoggle) {
                        if (isValueEmptyProto(summaryFieldData.distval)) {
                            toggleHasError('distance_field', true);
                            validationMess += "The \'Distance\' field for \'Stop\' definition is empty and must be filled in\n";
                            valid = false;
                        }
                        if (isValueEmptyProto(summaryFieldData.disttime)) {
                            toggleHasError('duration_field', true);
                            validationMess += "The \'Duration\' field for \'Stop\' definition is empty and must be filled in\n";
                            valid = false;
                        }

                        var stopAssociations = $('.stopAssociationDiv');

                        // create empty object to store all assoc data
                        summaryFieldData.associations = {};

                        for (var x = 0, xLen = stopAssociations.length; x < xLen; x++) {

                            var stopAssocRow = stopAssociations[x];

                            var markerLayerDiv = $( stopAssocRow ).find( '.slds-form-element__control:first' );

                            var assocFieldName = $( markerLayerDiv ).prop( 'id' );

                            // create empty object to store each association
                            summaryFieldData.associations[assocFieldName] = {};
                            if ( $( markerLayerDiv ).data( 'configid' ) !== undefined ) {
                                summaryFieldData.associations[assocFieldName]['configid'] = $( markerLayerDiv ).data( 'configid' );
                            }

                            var markerLayerInput = $( markerLayerDiv ).find( 'input.slds-input.slds-combobox__input' );

                            // check for Marker layer value
                            if ( !isValueEmptyProto( $( markerLayerInput ).val() ) && !isValueEmptyProto( $( markerLayerInput ).attr( 'aria-activedescendant' ) ) ) {
                                var maxDistanceInput = $( stopAssocRow ).find( '.associatedMaxDistance input' )[0];
                                var maxDistanceTypeInput = $( stopAssocRow ).find( '.associatedMaxDistanceType select' )[0];

                                var maxDistUnitsVal = $( maxDistanceTypeInput ).val().toLowerCase();
                                var maxDistVal = $( maxDistanceInput ).val();

                                summaryFieldData.associations[assocFieldName]['markerlayerid'] = $( markerLayerInput ).attr( 'aria-activedescendant' );

                                // check distance units field value
                                if ( isValueEmptyProto( maxDistUnitsVal ) ) {
                                    toggleHasError( $( maxDistanceTypeInput ).prop('id' ), true )
                                    validationMess += "The \'Distance Type\' field for \'Stop Association\' definition is empty and must be filled in\n";
                                    valid = false;
                                }
                                else {
                                    summaryFieldData.associations[assocFieldName]['maxdistunits'] = maxDistUnitsVal;
                                }

                                // check max distance value
                                if ( isValueEmptyProto( maxDistVal ) ) {
                                    toggleHasError( $( maxDistanceInput ).prop( 'id' ), true );
                                    validationMess += "The \'Distance\' field for \'Stop Association\' definition is empty and must be filled in\n";
                                    valid = false;
                                }
                                else if (maxDistUnitsVal === 'feet' && maxDistVal < 100) {
                                    toggleHasError( $( maxDistanceInput ).prop( 'id' ), true );
                                    validationMess += "The \'Distance\' field is limited to a minimun of 100 feet\n";
                                    valid = false;

                                }
                                else if (maxDistUnitsVal === 'meters' && maxDistVal < 30) {
                                    toggleHasError( $( maxDistanceInput ).prop( 'id' ), true );
                                    validationMess += "The \'Distance\' field is limited to a minimun of 30 meters\n";
                                    valid = false;
                                }
                                else {
                                    summaryFieldData.associations[assocFieldName]['maxdistance'] = $( maxDistanceInput ).val();
                                }
                            }
                            // check for empty Marker layer but distance has a value
                            else if ( isValueEmptyProto( $( markerLayerInput ).val() ) && !isValueEmptyProto( $( $( stopAssocRow ).find( '.associatedMaxDistance input' )[0]).val() ) ) {
                                toggleHasError( $( markerLayerInput ).prop('id' ), true )
                                validationMess += "The \'Marker Layer\' lookup field for \'Stop Association\' definition is empty, but the \'Mileage\' field has a value\n";
                                valid = false;
                            }
                        }
                    }

                    return valid;
                }

                function filterData() {
                    var searchInput = $('#searchInput').val();
                    var activeStateFilter = $('#activeStateFilter').val();

                    $( '#data-table > tbody > tr').show();

                    $( '#data-table > tbody > tr').filter(function (index) {

                        var $row = $(this);

                        //get active row
                        var isActive = $row.find('td:nth-child(1)').attr('sortable-value');
                        var summaryName = $row.find('td:nth-child(2)').attr('sortable-value');
                        var openErrorCount = $row.find('td:nth-child(8)').attr('sortable-value');
                        var isActiveFilter = true;
                        var summaryNameFilter = true;
                        var openErrorCountFilter = true;

                        if (activeStateFilter == 'active' && isActive == 'false') { isActiveFilter = false; }
                        if (activeStateFilter == 'inactive' && isActive == 'true') { isActiveFilter = false; }
                        if (activeStateFilter == 'openerror' && openErrorCount == 0) { openErrorCountFilter = false; }

                        if (searchInput != '') {
                            if (summaryName.toLowerCase().indexOf(searchInput.toLowerCase()) == -1) {
                                summaryNameFilter = false;
                            }
                        }

                        if (isActiveFilter && summaryNameFilter && openErrorCountFilter) {
                            return false;
                        }
                        else {
                            return true;
                        }

                    }).hide();

                }

                function deleteSummary(sumId) {
                    var res = confirm('Are you sure you want to delete this Summary Configuration?');
                    if (res) {
                        showSpinner();
                        Utility.invokeRemoting({
                            path : '{!$RemoteAction.MALiveRemoteFunctions.DeleteSummary}',
                            params : sumId,
                            callback : function(result, event) {
                                Utility.handleCallback(result, event, fetchSummaries, null,
                                    function(success, result, event) {
                                        hideSpinner();
                                        checkForMessages();
                                    }
                                );
                            }
                        });

                    /* Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.MALiveRemoteFunctions.DeleteSummary}',
                            sumId, function(result, event) {
                                hasMessages = true;
                                if (event.status) {
                                    messageText = result.message;
                                    alertType = 'success';
                                    fetchSummaries();
                                }
                                else if (event.type === 'exception') {
                                    messageText = event.message;
                                    alertType = 'error';
                                }
                                else {
                                    messageText = event.message + ' ' + result.message;
                                    alertType = 'error';
                                }
                                hideSpinner();
                                checkForMessages();
                            }
                    ); */
                    }
                }

                function setActiveState(summId, ele) {
                    var checked = ele.checked;
                    var action = checked ? "activate" : "deactivate";
                    /*Utility.invokeRemoting({
                        path : '{!$RemoteAction.MALiveRemoteFunctions.SaveSummaryActiveState}',
                        params : summId, summId, checked,
                        callback : function(result, event) {
                            hasMessages = true;
                            if (event.status) {
                                messageText = 'Successfully ' + action + 'd summary.';
                                alertType = 'success';
                            }
                            else if (event.type === 'exception') {
                                messageText = 'Failed to ' + action + ' summary. - ' + event.message;
                                alertType = 'error';
                                if (checked) {
                                    ele.removeAttribute("checked");
                                    ele.checked = false;
                                }
                                else {
                                    ele.setAttribute("checked", "checked");
                                    ele.checked = true;
                                }
                            }
                            else {
                                messageText = event.message + ' ' + result.message;
                                alertType = 'error';
                                if (checked) {
                                    ele.removeAttribute("checked");
                                    ele.checked = false;
                                }
                                else {
                                    ele.setAttribute("checked", "checked");
                                    ele.checked = true;
                                }
                            }
                            checkForMessages();
                        }
                    });*/

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.MALiveRemoteFunctions.SaveSummaryActiveState}',
                        summId, summId, checked, function(result, event) {
                            hasMessages = true;
                            if (event.status) {
                                messageText = 'Successfully ' + action + 'd summary.';
                                alertType = 'success';
                            }
                            else if (event.type === 'exception') {
                                messageText = 'Failed to ' + action + ' summary. - ' + event.message;
                                alertType = 'error';
                                if (checked) {
                                    ele.removeAttribute("checked");
                                    ele.checked = false;
                                }
                                else {
                                    ele.setAttribute("checked", "checked");
                                    ele.checked = true;
                                }
                            }
                            else {
                                messageText = event.message + ' ' + result.message;
                                alertType = 'error';
                                if (checked) {
                                    ele.removeAttribute("checked");
                                    ele.checked = false;
                                }
                                else {
                                    ele.setAttribute("checked", "checked");
                                    ele.checked = true;
                                }
                            }
                            checkForMessages();
                        }
                    );
                }

                function triggerNav(refName) {
                    $("a[div-ref='" + refName + "']").trigger("click");
                }

                function GetObjProperty(obj, prop) {
                    prop = prop || '';
                    var arr = prop.split(".");
                    while(arr.length && (obj = obj[arr.shift()]));
                    return obj;
                }

                function noenter(ev, index)  {
                    if (window.event && window.event.keyCode == 13 || ev.which == 13) {
                        AlertSettings.saveAlertSettings();
                        return false;
                    }
                    else {
                        return true;
                    }
                }

               /* function populateAlertSettings(result) {
                    if (result.hasOwnProperty('success') && result.success) {
                        var alertVals = result.alertvals;
                        $("#email-input").val(alertVals.email);
                        $("#stopalertcheckbox").prop("checked", alertVals.Stop);
                        $("#speedalertcheckbox").prop("checked", alertVals.Speeding);
                        $("#brakealertcheckbox").prop("checked", alertVals.hardBrake);
                        $("#accelalertcheckbox").prop("checked", alertVals.fastAcceleration);
                        $("#battalertcheckbox").prop("checked", alertVals.DeviceBatteryOn);
                    }
                } */

                function getAlertValues() {
                    var alertVals = {};
                    alertVals['Stop'] = $("#stopalertcheckbox").prop("checked"),
                    alertVals['Speeding'] = $("#speedalertcheckbox").prop("checked"),
                    alertVals['HardBraking'] = $("#brakealertcheckbox").prop("checked"),
                    alertVals['HardAcceleration'] = $("#accelalertcheckbox").prop("checked"),
                    alertVals['DeviceBatteryOn'] = $("#battalertcheckbox").prop("checked");
                    alertVals['SpeedThreshold'] = $("#threshalertcheckbox").prop("checked");
                    return JSON.stringify(alertVals);
                }

                function authorizeUser(e) {
                    e.preventDefault();
                    showAuthorized();
                    $('#authmessage').empty().append('<div class="slds-p-around_medium">Please refresh the page to see the changes.</div>');
                    window.open(rulesAuthURL + rulesAuthParams);
                }

                function deauthorizeUser() {
                    Utility.invokeRemoting({
                        path : '{!$RemoteAction.MALiveRemoteFunctions.DeAuthorizeUserInMAIO}',
                        callback : function(result, event) {
                            Utility.handleCallback(result, event, null, null,
                                function(success, result, event) {
                                    hideSpinner();
                                    // checkForMessages();
                                }
                            );
                        }
                    });
                }

                function showAuthorized() {
                    $('#activateAuth').hide();
                    $("#deActivateAuth").show();
                    $('#authinfo').empty().append('<abbr class="slds-required">*</abbr>Click the \'De-authorize\' button to disable MapAnything Live Rules Management.<div><strong>Clicking this button will remove any access by MapAnything to create Rule Action records when a device or asset enters or exits a boundary.</strong></div>');
                }

                function showDeauthorized() {
                    $("#activateAuth").show();
                    $('#deActivateAuth').hide();
                    $('#authinfo').empty().append('<abbr class="slds-required">*</abbr>Click the \'Authorize\' button to enable MapAnything Live Rules Management. This allows MapAnything to create records when a rule has been triggered by a device or asset.');
                }

                function buildCards(result) {
                    $("#card-section").html('');
                    var SummaryCardsHTML = '';
                    if (result.hasOwnProperty('success') && result.success) {
                        summaryConfigs = result.summaries;
                        for (var index=0; index < summaryConfigs.length; index++) {

                            SummaryCardsHTML += '<div class="slds-card slds-container_medium slds-m-bottom_medium">'
                                + '<ul class="slds-accordion">'
                                    + '<li class="slds-accordion__list-item">'
                                        + '<section class="slds-accordion__section">'
                                            + '<div class="slds-accordion__summary">'
                                                + '<h3 class="slds-text-heading_small slds-accordion__summary-heading slds-grid slds-grid_vertical-align-center slds-p-around_x-small" style="background-color: whitesmoke;">'

                                                    + '<button aria-controls="accordion-details-02" aria-expanded="true" class="slds-button accordian-switch">'
                                                        + '<span class="slds-icon_container" title="show config details">'
                                                            + '<svg class="slds-accordion__summary-action-icon slds-button__icon_large slds-button__icon_left" aria-hidden="true" style="fill: darkgray">'
                                                                + '<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#switch"></use>'
                                                            + '</svg>'
                                                        + '</span>'
                                                    + '</button>'

                                                    + '<div class="slds-col slds-text-heading_small"><strong>' + GetObjProperty(summaryConfigs[index], 'summaryname') + '</strong></div>'

                                                    + '<div title="show errors" class="slds-p-bottom_x-small slds-p-right_medium' + (GetObjProperty(summaryConfigs[index], 'openErrorCount') == 0 ? ' slds-hide"' : '"') + '>'
                                                        + '<a href="javascript:void(0);" onclick="SummaryModal.open(\'' + GetObjProperty(summaryConfigs[index], 'id') + '\', \'errors\');">'
                                                            + '<span class="slds-badge slds-theme--error">' + GetObjProperty(summaryConfigs[index], 'openErrorCount') + ' ERRORS</span>'
                                                        + '</a>'
                                                    + '</div>'

                                                    + '<div class="slds-form-element slds-p-right_medium">'
                                                        + '<label class="slds-checkbox--toggle slds-grid enable-disable-toggle page-header-inline-checkbox-toggle">'
                                                           + '<input type="checkbox" name="checkbox" aria-describedby="toggle-desc" onchange="setActiveState(\'' + GetObjProperty(summaryConfigs[index], 'id') + '\', this)"' + ( GetObjProperty(summaryConfigs[index], 'isactive') ? 'checked="checked"' : '' )  + '">'
                                                                + '<span id="toggle-desc" class="slds-checkbox_faux_container" aria-live="assertive">'
                                                                    + '<span class="slds-checkbox_faux" title="activate/deactivate summary processing"></span>'
                                                                    + '<span class="slds-checkbox_on">Active</span>'
                                                                    + '<span class="slds-checkbox_off">Inactive</span>'
                                                                + '</span>'
                                                            + '</input>'
                                                        + '</label>'
                                                    + '</div>'

                                                    + '<div class="slds-dropdown-trigger slds-dropdown-trigger_click" title="summary actions">'
                                                        + '<button class="slds-button slds-button_icon slds-button_icon-border-filled actionDropDown">'
                                                            + '<span class="slds-button__icon ma-icon ma-icon-down"></span>'
                                                        + '</button>'
                                                        + '<div class="slds-dropdown slds-dropdown_left slds-dropdown_actions">'
                                                            + '<ul class="slds-dropdown__list">'
                                                                + '<li class="slds-dropdown__item">'
                                                                    + '<a href="javascript:void(0);" onclick="DateModal.open(\'' + GetObjProperty(summaryConfigs[index], 'id') + '\');">Generate Historical Summaries</a>'
                                                                + '</li>'
                                                                + '<li class="slds-dropdown__item">'
                                                                    + '<a href="javascript:void(0);" onclick="SummaryModal.open(\'' + GetObjProperty(summaryConfigs[index], 'id') + '\');">Edit</a>'
                                                                + '</li>'
                                                                + '<li class="slds-dropdown__item">'
                                                                    + '<a href="javascript:void(0);" onclick="SummaryModal.open(\'' + GetObjProperty(summaryConfigs[index], 'id') + '\', true);">Clone</a>'
                                                                + '</li>'
                                                                + '<li class="slds-has-divider_top-space" role="separator"></li>'
                                                                + '<li class="slds-dropdown__item">'
                                                                    + '<a href="javascript:void(0);" onclick="deleteSummary(\'' + GetObjProperty(summaryConfigs[index], 'id') + '\');" style="color: red;">Delete</a>'
                                                                + '</li>'
                                                            + '</ul>'
                                                        + '</div>'
                                                    + '</div>'

                                                + '</h3>'
                                            + '</div>'

                                            + '<div aria-hidden="false" class="slds-accordion__content" id="accordion-details-01">'
                                                + '<div class="slds-card__body slds-card__body_inner slds-m-around_xx-small">'
                                                    + '<div class="slds-grid slds-gutters">'
                                                        + '<div class="slds-col">'
                                                            + '<div class="slds-form-element slds-m-bottom_small">'
                                                                + '<label class="slds-form-element__label" for="select-01">Live Layer</label>'
                                                                + '<div class="slds-form-element__control">'
                                                                    + '<input type="text" readonly="" id="text-input-id-1" class="slds-input" value="' + (GetObjProperty(summaryConfigs[index], 'livelayername')) + '" />'
                                                                + '</div>'
                                                            + '</div>'
                                                            + '<div class="slds-form-element slds-m-bottom_small">'
                                                                + '<label class="slds-form-element__label" for="select-01">Device Count</label>'
                                                                + '<div class="slds-form-element__control">'
                                                                    + '<input type="text" readonly="" id="text-input-id-1" class="slds-input" value="' + (GetObjProperty(summaryConfigs[index], 'devicecount')) + '" />'
                                                                + '</div>'
                                                            + '</div>'
                                                            + '<div class="slds-form-element slds-m-bottom_small">'
                                                                + '<label class="slds-form-element__label" for="select-01">Description</label>'
                                                                + '<div class="slds-form-element__control">'
                                                                    + '<input type="text" readonly="" id="text-input-id-1" class="slds-input" value="' + (typeof GetObjProperty(summaryConfigs[index], 'summarydesc') === 'undefined' ? '' : GetObjProperty(summaryConfigs[index], 'summarydesc')) + '" />'
                                                                + '</div>'
                                                            + '</div>'
                                                        + '</div>'
                                                        + '<div class="slds-col">'
                                                            + '<div class="slds-form-element slds-m-bottom_small">'
                                                                + '<label class="slds-form-element__label" for="select-01">Created Date</label>'
                                                                + '<div class="slds-form-element__control">'
                                                                    + '<input type="text" readonly="" id="text-input-id-1" class="slds-input" value="' + (typeof GetObjProperty(summaryConfigs[index], 'createddate') === 'undefined' ? '' : moment(GetObjProperty(summaryConfigs[index], 'createddate')).format("MM/DD/YYYY")) + '" />'
                                                                + '</div>'
                                                            + '</div>'
                                                            + '<div class="slds-form-element slds-m-bottom_small">'
                                                                + '<label class="slds-form-element__label" for="select-01">Created By</label>'
                                                                + '<div class="slds-form-element__control">'
                                                                    + '<input type="text" readonly="" id="text-input-id-1" class="slds-input" value="' + (GetObjProperty(summaryConfigs[index], 'createdby')) + '" />'
                                                                + '</div>'
                                                            + '</div>'
                                                        + '</div>'
                                                    + '</div>'
                                                + '</div>'
                                            + '</div>'
                                        + '</section>'
                                    + '</li>'
                                + '</ul>'
                            + '</div>';
                        }
                    }

                    $( "#card-section" ).append( SummaryCardsHTML );
                    $( '.actionDropDown' ).on( 'click', function() {
                        var wasopen = $( this ).closest( '.slds-dropdown-trigger' ).hasClass( "slds-is-open" );
                        var dropdown = $( this ).closest( '.slds-dropdown-trigger' );
                        $( '.actionDropDown' ).closest( '.slds-dropdown-trigger' ).removeClass( "slds-is-open" );
                        if( !wasopen ) {
                            dropdown.addClass( "slds-is-open" );
                        }
                    });
                    $( ".accordian-switch" ).on( 'click', function( event ) {
                        $( this ).closest( '.slds-accordion__section' ).toggleClass( 'slds-is-open' );
                    });
                }

                function setupNumberValidationEvents(fields) {
                    $.each(fields, function(index, value) {
                        $("#" + value + "_field").on('keypress', function() {
                            SummaryModal.removeHasError([$(this).prop('id')]);
                            inputValidation(this, value, event);
                        });
                        $("#" + value + "_field").on('keyup', function() {
                            inputValidation(this, value, event);
                        });
                    });

                    var maxDistanceFields = $( '.associatedMaxDistance input' );

                    for (var i = 0, len = maxDistanceFields.length; i < len; i++) {
                        $(maxDistanceFields[i]).on('keypress', function() {
                            inputValidation(this, $(this).prop('id'), event);
                        });
                        $(maxDistanceFields[i]).on('keyup', function() {
                            inputValidation(this, $(this).prop('id'), event);
                        });
                    }
                }

                function inputValidation(el, value, event) {
                    var handled = false;
                    if (event.defaultPrevented) {
                        return;
                    }
                    if(event.type == 'keyup' && $(el).val().length == 1 && $(el).val() == 0) {
                        $(el).val(null);
                        addMessage(el, 'value cannot be zero', 'error');
                        handled = true;
                    }
                    else if(event.type != 'keyup') {
                    var max = 5;
                    // var code = (event.keyCode ? event.keyCode : event.which);
                    var code = event.key;
                    
                        // ignore Enter, Spacebar and Backspace keys
                        if (code == 'Enter' || code == ' ' || code == 'Backspace') {
                        handled = true;
                        event.preventDefault();
                        return;
                    }

                    if ($(el).closest('.associatedMaxDistance').length > 0) {
                        max = 4;
                    }
                    else {
                        if (value.indexOf('speed') > -1 || value.indexOf('thresh') > -1) {
                            max = 2;
                        }
                    }

                    // if ( !(code >= 48 && code <= 57) && !(code == 8) && !(code == 9) && !(code == 46) && !(code >= 37 && code <= 40) && !(code >= 96 && code <= 105)) {
                    if ( !(code >= 0 && code <= 9) || code == "" || code == " " || code == undefined) {
                        // $(el).val(oldValue);
                            // var currVal = $(el).val();
                            // $(el).val(Number(currVal.toString().slice(0, -1)));
                        addMessage(el, 'value must be a number', 'error');
                        handled = true;
                    }
                    else if( !validLength( $(el).val(), max ) ) {
                            // var currVal = $(el).val();
                            // $(el).val(Math.floor(currVal/10));
                        addMessage(el, 'value is restricted to ' + max + ' digits', 'error');
                        handled = true;
                    }
                    else if(isNeg( $(el).val() )) {
                        $(el).val(null);
                        addMessage(el, 'value must be a positive number', 'error');
                        handled = true;
                    }
                    else {
                        toggleHasError(value, false);
                        // oldValue = $(el).val();
                        }
                    }

                    if (handled) {
                        event.preventDefault();
                    }
                }

                function addMessage(el, msg, type) {
                    $(el).notify( msg, {arrowShow: false, className : type, position : 'bottom center'} );
                }

                function validLength(value, maxLength){
                   if((value.length + 1) > maxLength) return false;
                   return true;
                }

                function isNeg(value){
                    if(value != "" && value < 1) return true;
                   return false;
                }

                function toggleDefaults(ele) {
                    if(ele.checked) {
                        // sets default values for all of the select options
                        $(ele).closest(".slds-card").find('.live-summary-event_body').find("select.slds-select").val(["feet","mph","miles",false]);
                        $(ele).closest(".slds-card").find('.live-summary-event_body').find(".slds-checkbox").children("input").prop("checked", true); // checks create a record box
                        $( "#anyduration" ).trigger( "change" );
                    }
                }

                function checkAll(ckBox) {
                    $( "input:checkbox[class='tableCheckbox']:not(:hidden)" ).prop('checked', ckBox.checked);
                }

                function findCheckedErrors() {
                    var checkedErrors = [];
                    $( "input:checkbox[class='tableCheckbox']:checked" ).each( function() {
                        checkedErrors.push($(this).closest("td").next().children().children(".hiddendata").html());
                    });
                    return checkedErrors;
                }

                function createErrorTable(summaryId) {
                    dataTable = new MADataTable({
                        tableSelector :'#error-table',
                        allowResizing: true,
                        remoteFunction: {
                            path: '{!$RemoteAction.MALiveRemoteFunctions.GetSummaryErrors}',
                            arrayProperty: 'errors',
                            params: summaryId
                        },
                        columns: [
                            {label: function(obj) {
                                    return '<input type="checkbox" onclick="checkAll(this)"/>';
                                },
                                sortable: false,
                                formatAs: function(obj) {
                                    return '<input type="checkbox" class="tableCheckbox"/>';
                            }},
                            {label: function(obj) {
                                    return '<div class="hiddenheader"/>';
                                },
                                sortable: false, property: "Id",
                                formatAs: function(obj) {
                                    return '<div class="hiddendata">' + obj.Id + '</div>';
                            }},
                            {label: "Device Id", sortable: false, property: "ObjectId__c",
                                formatAs: function(obj) {
                                    if (obj.DeviceId__c == "undefined") {return 'No device or asset found'}
                                    return '<a href="/' + obj.ObjectId__c + '">' + obj.DeviceId__c + '</a>';
                            }},
                            {label: "Error Type", sortable: true, property: "ErrorType__c"},
                            {label: "Report Date", sortable: true, formatAs: "date", property: "ReportDate__c", sortAs: "number"},
                            {label: "TimeStamp", sortable: true, formatAs: "datetime", property: "CreatedDate", sortAs: "number"},
                            {label: "Details", sortable: false, property: "Message__c", addtlTdStyle: "slds-cell-wrap", trunc: false},
                            {label: "Additional Info", sortable: false, property: "StackTrace__c", addtlTdStyle: "slds-cell-wrap", trunc: false}
                        ],
                        defaultSortIndex: 1,
                        selectedSortIndex: null,
                        selectedSortOrder: null,
                        events: {
                            loading: function() {  logNotification('loading','loading','loading'); },
                            loadingComplete: function(result) {
                                logNotification('loadingComplete','loadingComplete','loadingComplete');
                            },
                            loadingError: function(result, event) { logNotification('loadingError','loadingError','loadingError'); },
                            tableCreated: function() {
                                logNotification('tableCreated','tableCreated','tableCreated');

                                $(".hiddendata").closest("td").hide();
                                $(".hiddenheader").closest("th").hide();

                                if($("#error-table").children("tbody").children().length === 0) {
                                    $("#ErrorsSection").toggle(false);
                                    $("#no-err-text").toggle(true);
                                }
                                else {
                                    $("#ErrorsSection").toggle(true);
                                    $("#no-err-text").toggle(false);
                                }
                                hideSpinner();

                            }
                        }
                    });
                }

                function initializePageEvents() {
                    var numberFields = ['speedover', 'speedlimittime', 'distance', 'duration', 'speedthresh', 'spthreshduration'];

                    $("#summary_name").on('keyup', function (event) {
                        SummaryModal.removeHasError([$(this).prop('id')]);
                    });

                    $("#anyduration").on('change', function(event) {
                        var anyamtoftime = $("#anyduration").val() === 'false';
                        $("#speedlimittime_block").toggle(anyamtoftime);
                    });

                    $( "#activateAuth" ).on( 'click', function(event) {
                        authorizeUser(event);
                    });

                    $( "#deActivateAuth" ).on( 'click', function(event) {
                        deauthorizeUser();
                    });

                    $(document).on('click', function(event) {
                        //if the target is in the filter dropdown, don't hide the dropdown
                        if($(event.target).closest('.slds-dropdown-trigger').length) {
                            return;
                        } else { //hide the dropdown
                            $('.actionDropDown').closest('.slds-dropdown-trigger').removeClass("slds-is-open");
                        }

                    });

                    setupNumberValidationEvents(numberFields);

                    // --- Start GM Vehicles Management tab initialization actions --- //

                    // Action Button on Register Vehicles modal.
                    $('#gm-start-job').on('click', function(event) {
                        GMVehiclesMgmt.startJob('register');
                    });

                    // Variable to hold which mass action to perform.
                    var massAction;

                    // Mass Action Dropdown Selection.
                    $('#gm-action-select').on('change', function () {
                        if (this.value === 'register' || this.value === 'deregister') {
                            $('#gm-action-apply').removeAttr('disabled');
                            massAction = this.value;
                        } else {
                            $('#gm-action-apply').attr('disabled', 'true');
                            massAction = undefined;
                        }
                    });

                    // Mass Action 'Apply' button.
                    $('#gm-action-apply').on('click', function(event) {
                        GMVehiclesMgmt.openModal(massAction, true);
                    });

                    // Store's state of selected statuses for GM Vehicles table filtering.
                    var selectedStatuses = [
                        'success',
                        'failure',
                        'inProgress',
                        'unsubscribed',
                        'cancel'
                    ];

                    // Handles GM Vehicles table filtering.
                    $('#filterVehicleOptions .slds-listbox__option').on('click', function(event) {
                        if($(this).hasClass('slds-is-selected')) {
                            // Remove Check from option.
                            $(this).removeClass('slds-is-selected');
                            // Set which status will be removed.
                            var statusToRemove = selectedStatuses.indexOf($(this)[0].id);
                            // Remove the status from selectedStatuses.
                            if (statusToRemove > -1) {
                                selectedStatuses.splice(statusToRemove, 1);
                            }
                            // Filter table.
                            GMVehiclesMgmt.filterTable(selectedStatuses);
                        } else {
                            // Add Check to option.
                            $(this).addClass('slds-is-selected');
                            // Push status back to selecteStatuses.
                            selectedStatuses.push($(this)[0].id);
                            // Filter table.
                            GMVehiclesMgmt.filterTable(selectedStatuses);
                        }
                    });

                    // Refreshes table contents.
                    $('#gm-refresh-table').on('click', function(event) {
                        GMVehiclesMgmt.getAccountVehiclesStatus();
                        // Add check back to all statuses
                        $('#filterVehicleOptions .slds-listbox__option').addClass('slds-is-selected');
                    });

                    // Opens modal for registering vehicles.
                    $('#gm-register-vehicles').on('click', function(event) {
                        GMVehiclesMgmt.openModal('register');
                    });

                    // --- End GM Vehicles Management tab initialization actions --- //
                }

                /*function fetchAlertSettings() {
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.MALiveRemoteFunctions.RetrieveAlertSettings}',
                            function(result, event) {
                                if (event.status) {
                                    hasMessages = false;
                                    // messageText = result.message;
                                    // alertType = result.success ? 'success' : 'error';
                                    populateAlertSettings(result);
                                }
                                else if (event.type === 'exception') {
                                    hasMessages = true;
                                    messageText = event.message;
                                    alertType = 'error';
                                }
                                else {
                                    hasMessages = true;
                                    messageText = event.message;
                                    alertType = 'error';
                                }
                                hideSpinner();
                                checkForMessages();
                            },
                            {escape: false}
                        );
                }*/

                function buildCards(success, result, event) {
                    summaryConfigs = new MACardBuilder({
                        cardsection :'#card-section',
                        arrayProperty: 'summaries'
                    }, result);
                }

                function fetchSummaries() {
                    Utility.invokeRemoting({
                        path : '{!$RemoteAction.MALiveRemoteFunctions.RetrieveAllSummaries}',
                        callback : function(result, event) {
                            Utility.handleCallback(result, event, buildCards, null,
                                function(success, result, event) {
                                    hideSpinner();
                                    // checkForMessages();
                                }
                            );
                        }
                    });

                /* Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.MALiveRemoteFunctions.RetrieveAllSummaries}',
                        function(result, event) {
                            if (event.status) {
                                hasMessages = false;
                                // messageText = result.message;
                                // alertType = result.success ? 'success' : 'error';
                            // buildCards(result);
                            summaryConfigs = new MACardBuilder({
                                cardsection :'#card-section',
                                arrayProperty: 'summaries'
                            }, result);
                            }
                            else if (event.type === 'exception') {
                                hasMessages = true;
                                messageText = event.message;
                                alertType = 'error';
                            }
                            else {
                                hasMessages = true;
                                messageText = event.message;
                                alertType = 'error';
                            }
                            hideSpinner();
                            checkForMessages();
                        },
                        {escape: false}
                ); */
                }

                $(function() {
                    showSpinner();

                    IngestionModal.get();

                    Utility.invokeRemoting({
                        path : '{!$RemoteAction.MALiveRemoteFunctions.checkScheduledBatches}',
                        callback : function(result, event) {
                            Utility.handleCallback(result, event, null, null, checkForMessages);
                        }
                    });

                    /* Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.MALiveRemoteFunctions.checkScheduledBatches}',
                            function(result, event) {
                                hasMessages = true;
                                if (event.status) {
                                    //messageText = result.message;
                                    //alertType = 'success';
                                }
                                else if (event.type === 'exception') {
                                    messageText = event.message;
                                    alertType = 'error';
                                }
                                else {
                                    messageText = event.message + ' ' + result.message;
                                    alertType = 'error';
                                }
                                checkForMessages();
                            }
                    ); */

                    fetchSummaries();

                    AlertSettings.fetch();

                    // setup date pickers for historical summaries
                    $.aljsInit({
                        assetsLocation: '/apexpages/slds/latest',
                        scoped: true,
                        scopingClass: 'slds-scope'
                    });
                    $('#start-date').datepicker({
                        numYearsBefore: 1,
                        numYearsAfter: 0,
                        endDateInputId: 'end-date',
                        onChange: function(datepicker) {

                        },
                        onSelect: function(datepicker, selectedDate) {
                            var startDt = $('#start-date').datepicker('getDate');
                            var endDt = $('#start-date').datepicker('getEndDate');

                            function setDatesToToday() {
                                $('#start-date').datepicker('setDate', moment().format('L'));
                                $('#start-date').datepicker('setEndDate', moment().format('L'));
                            }

                            $("#datepicker-group").parent().find('.notifyjs-hidable').trigger('notify-hide');

                            if((typeof startDt.valueOf() === 'number' && moment().diff(startDt, 'days') > 60) ||
                                    (typeof endDt.valueOf() === 'number' && moment().diff(endDt, 'days') > 60)) {

                                setDatesToToday()
                                DateModal.message("Date range is restricted to 60 days prior to today.", 'error');
                            }
                            else if(moment(startDt).isSameOrBefore(moment()) != true || moment(endDt).isSameOrBefore(moment()) != true) {
                                setDatesToToday()
                                DateModal.message("Both dates must be either today or earlier.", 'error');
                            }
                            else if(moment(startDt).isSameOrBefore(moment(endDt)) != true) {
                                setDatesToToday()
                                DateModal.message("Start date must be same or before end date.", 'error');
                            }
                        }
                    });

                    if (rulesAuthData && rulesAuthData.auth_exists) {
                        showAuthorized();
                        $('#authmessage').append('<div class="slds-p-around_medium">Current Authorization User: ' + rulesAuthData.display_name + '</div>');

                        /*$(document).on('click', '#deauthorizeUser', function (evt) {
                            evt.preventDefault();
                            deauthorizeUser();
                        });*/
                    }
                    /*else if (rulesAuthURL != 'error') {
                        $("#currentAuthInfo").hide();
                        $(document).on('click', '#authorizeTerritoryIO', function (evt) {
                            evt.preventDefault();
                            $("#pleaserefresh").show();
                            window.open('{!rulesAuthURL}');
                        });
                    }*/
                    else {
                        showDeauthorized();
                        $('#authmessage').hide();
                    }

                    (function() {
                    // set up modal sidebars
                        var summarySidebar = new MASidebarNav({
                            sectionRef: 'summary-wrapper',
                            menuItems:[
                                {label: 'Summary',
                                    nested: [
                                        {label: 'Details', isActive: true, div: 'details-div'},
                                        {label: 'Live Layer', isActive: false, div: 'devices-div'},
                                        {label: 'Events', isActive: false, div: 'events-div'}
                                        // {label: 'State Mileage', isActive: false, div: 'statemileage-div'}
                                    ]
                                },
                                {label: 'Errors', isActive: false, div: 'errors-div'}
                            ],
                            onComplete: function() {
                                $("a[div-ref='errors-div']").closest('li.slds-nav-vertical__item').toggle(false);
                            }
                        });
                    })();

                    initializePageEvents();
                });

            </script>
        </apex:define>
    </apex:composition>


    <div class="ma-modals">

        <!-- date modal -->
        <div class="date-modal" style="height: 660px; z-index: 9999; position: absolute;">
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal" id="datemodal">
                <div class="slds-modal__container">
                    <header class="slds-modal__header">
                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">Generate Historical Summaries</h2>
                        <button type="button" class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick="DateModal.close();">
                            <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#close" />
                            </svg>
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </header>
                    <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1" style="height: 400px">

                        <!-- date picker component -->
                        <div class="slds-form slds-form_compound">
                            <fieldset class="slds-form-element">
                                <div class="slds-form-element__group" id="datepicker-group">
                                    <div class="slds-form-element__row">
                                        <div class="slds-form-element slds-size_1-of-2">
                                            <label class="slds-form-element__label" for="input-01">Starting date</label>
                                            <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
                                                <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                                    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#event"></use>
                                                </svg>
                                                <input id="start-date" class="slds-input" readonly="true" type="text" placeholder="Pick a Start Date" label="Start Date Picker"/>
                                            </div>
                                        </div>
                                        <div class="slds-form-element slds-size_1-of-2">
                                            <label class="slds-form-element__label" for="input-02">Ending date</label>
                                            <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
                                                <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                                    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#event"></use>
                                                </svg>
                                                <input id="end-date" class="slds-input" readonly="true" type="text" placeholder="Pick an End Date" label="End Date Picker"/>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                        <!-- end date picker component -->

                    </div>
                    <footer class="slds-modal__footer">
                        <input type="button" value="Cancel" class="slds-button slds-button_neutral" onclick="DateModal.close();"/>
                        <input type="button" value="Generate" class="slds-button slds-button_brand" onclick="DateModal.generate();"/>
                    </footer>
                </div>
            </section>
            <!-- <div class="slds-backdrop"></div> -->
        </div>
        <!-- end date modal -->


       <!-- summary modal -->
        <div class="summary-modal" style="height: 660px;">
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-modal_large" id="summarymodal">
                <div class="slds-modal__container">
                    <header class="slds-modal__header">
                        <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick="SummaryModal.close();">
                            <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#close" />
                            </svg>
                            <span class="slds-assistive-text">Close</span>
                        </button>
                        <h2 id="sum-modal-heading-01" class="slds-text-heading_medium slds-hyphenate">Daily Summary</h2>
                    </header>

                    <!-- Modal content -->
                    <div class="slds-modal__content" id="modal-content-id-1">
                        <apex:form >
                            <div class="slds-form slds-form_compound">
                                <div class="slds-grid" id="summary-wrapper">
                                    <div class="slds-col">
                                        <!-- begin body content -->
                                        <div id="maBodyContent">

                                            <!-- Details Tab Content -->
                                            <div class="ma-body-content summary-wrapper is-active" id="details-div">
                                                <div class="slds-p-around_large">
                                                    <div class="slds-container_small slds-m-bottom_medium" style="width:100%;">
                                                        <div class="slds-grid">
                                                            <fieldset class="slds-form--compound">
                                                                <div class="ma-tab-content-section">
                                                                    <div class="slds-form-element summary-title slds-p-bottom_x-small">
                                                                        <label class="slds-form-element__label" for="summary_name"><abbr class="slds-required">*</abbr>Summary Name</label>
                                                                        <input type="text" id="summary_id" value="" style="display:none"/>
                                                                        <input type="text" id="summary_name" value="" placeholder="Enter Summary Name" class="slds-input summary-name-field"/>
                                                                    </div>
                                                                    <div class="slds-form-element">
                                                                        <label class="slds-form-element__label" for="summary_description">Summary Description</label>
                                                                        <input type="text" id="summary_description" value="" class="slds-input summary-description-field"/>
                                                                    </div>
                                                                </div>
                                                            </fieldset>
                                                        </div>
                                                    </div>

                                                    <!-- Nav buttons -->
                                                    <div class="slds-grid">
                                                        <div class="slds-section slds-is-open">
                                                            <div class="slds-form-element">
                                                                <input type="button" value="Next" class="slds-button slds-button_brand" onclick="triggerNav('devices-div');" />
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>

                                            <!-- Devices Tab Content -->
                                            <div class="ma-body-content summary-wrapper" id="devices-div">
                                                <div class="slds-p-around_large">
                                                    <div>
                                                        <h3 class="slds-text-heading--small slds-m-bottom_small">Select the MapAnything Live Layer you want to apply this summary to.</h3>
                                                        <p class="slds-m-bottom_medium">Don't have a MapAnything Live Layer? Open <a href="javascript:void(0);" onclick="redirectPage('map');">MapAnything and create one.</a>
                                                        </p>
                                                    </div>
                                                    <div class="slds-form-element slds-m-bottom_large">
                                                        <label class="slds-form-element__label slds-grid" for="devices_combobox">
                                                            <abbr class="slds-required">*</abbr>
                                                            <div>MapAnything Live Layer</div>
                                                            <div class="has-tooltip slds-m-left_small">
                                                                <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                                    <div class="slds-popover__body">The MapAnything Live Layer contains the devices your events will apply to. You can set up MapAnything Live Layers in MapAnything.
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </label>
                                                        <c:MALayerSearch SelectedIdVar="" objTypes="Live" layerType="sma__MASavedQry__c" sectionId="devicelayer" callbackFunc=""/>
                                                    </div>

                                                    <!-- Nav buttons -->
                                                    <div class="slds-grid">
                                                        <div class="slds-section slds-is-open">
                                                            <div class="slds-form-element">
                                                                <input type="button" value="Back" class="slds-button slds-button_neutral" onclick="triggerNav('details-div')" />
                                                                <input type="button" value="Next" class="slds-button slds-button_brand" onclick="triggerNav('events-div')" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Events Tab Content -->
                                            <div class="ma-body-content summary-wrapper" id="events-div">

                                                <div class="slds-grid slds-grid_vertical slds-p-around_large" style="width:100%;">
                                                    <h3 class="slds-text-heading--small slds-m-bottom_medium" id="event-text1" style="">Select the events you'd like to include in the summary</h3>
                                                    <!-- <h3 class="slds-text-heading--small slds-m-bottom_medium" id="event-text2" style="display:none;">No event choices are available for this summary</h3> -->

                                                    <!-- Stop section -->
                                                    <div class="slds-card">
                                                        <div class="slds-grid live-summary-event_header slds-p-horizontal_medium slds-p-vertical_small">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-media__figure slds-align_absolute-center slds-m-right_x-small">
                                                                    <span class="slds-icon ma-icon ma-icon-live-stopped"></span>
                                                                </div>
                                                                <div>
                                                                    <h2 class="slds-text-heading_small">Stop</h2>
                                                                </div>
                                                            </div>
                                                            <div class="slds-col_bump-left">
                                                                <div class="slds-form-element">
                                                                    <label class="slds-checkbox_toggle slds-grid page-header-inline-checkbox-toggle">
                                                                        <input type="checkbox" id="stopToggle" checked="checked" class="slds-input" onchange="toggleDefaults(this);" />
                                                                        <span id="toggle-desc" class="slds-checkbox_faux_container">
                                                                            <span class="slds-checkbox_faux"></span>
                                                                            <span class="slds-checkbox_on">Active</span>
                                                                            <span class="slds-checkbox_off">Inactive</span>
                                                                        </span>
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="live-summary-event_body slds-p-around_medium">
                                                            <div class="slds-grid slds-m-bottom_medium slds-grid_vertical-align-end slds-radio_button-group-container">
                                                                <div class="slds-col">
                                                                    <div class="live-summary-event_body-divider"></div>
                                                                </div>
                                                            </div>

                                                            <div class="slds-grid slds-grid_vertical-align-center slds-m-bottom_medium">

                                                                <div class="slds-grid slds-grid_vertical-align-center" id="distance_block">
                                                                    <label class="slds-form-element__label" for="distance_field">Distance moved is less than</label>
                                                                    <div class="slds-form-element__control slds-m-right_xx-small">
                                                                        <input id="distance_field" value="" placeholder="" class="slds-input short-input"/>
                                                                        <div id="distanceAlert" class="alert" style="display:none;"></div>
                                                                    </div>
                                                                    <div class="slds-form-element__control slds-m-right_small">
                                                                        <div class="slds-select_container">
                                                                            <select class="slds-select summary-select" id="measureofdistance_field">
                                                                                <option value="feet" selected="selected">Feet</option>
                                                                                <option value="meters">Meters</option>
                                                                            </select>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="slds-grid slds-grid_vertical-align-center" style="flex-shrink: 0;">
                                                                    <label class="slds-form-element__label" for="duration_field">for more than</label>
                                                                    <div class="slds-form-element__control slds-m-right_xx-small">
                                                                        <input id="duration_field" value="" placeholder="" class="slds-input short-input"/>
                                                                        <div id="durationAlert" class="alert" style="display:none;"></div>
                                                                    </div>
                                                                    <label class="slds-form-element__label slds-m-right_large">minute(s)</label>
                                                                    <div class="slds-form-element">
                                                                        <div class="slds-form-element__control">
                                                                            <span class="slds-checkbox">
                                                                                <input id="stoprecordcheckbox" name="options" type="checkbox" checked="checked"/>
                                                                                <label class="slds-checkbox__label slds-grid" for="stoprecordcheckbox">
                                                                                    <span class="slds-checkbox_faux"></span>
                                                                                    <span class="slds-form-element__label">
                                                                                        Create a record
                                                                                    </span>
                                                                                    <div>
                                                                                        <div class="has-tooltip">
                                                                                            <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                                                            <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-right" role="tooltip" style="bottom: 28px;right: -17px;margin-left: -1rem;width: 20rem;">
                                                                                                <div class="slds-popover__body">Check this box to have a record created each time your stop definition is met.</div>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </label>
                                                                            </span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <!-- Association Config block -->
                                                            <apex:outputPanel >
                                                                <div class="slds-box slds-p-around_medium">

                                                                    <div class="slds-grid slds-grid_vertical-align-center slds-m-bottom_medium">
                                                                        <div class="slds-grid slds-grid_vertical-align-center">
                                                                            <div>Associate the closest record(s) to the stops using the following fields and marker layers</div>
                                                                             <div class="has-tooltip slds-m-left_small">
                                                                                <span class="tooltip-field-help-icon slds-text-color_weak slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-right" role="tooltip" style="bottom: 28px;right: -17px;margin-left: -1rem;width: 20rem;">
                                                                                    <div class="slds-popover__body">For stop associations to work, geo coordinates must be stored in a "geolocation" field type. Only layers with appropriate geolocation fields and no dynamic filters are shown here.
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>

                                                                    <apex:dataTable value="{!lookupFieldsConfiguredMap}" var="lookupFieldName" rowClasses="stopAssociationDiv" style="width:auto;">
                                                                        <apex:column >
                                                                            <label class="slds-form-element__label" for="text-input-id-1">{!lookupFieldsConfiguredApiToLabelMap[lookupFieldName]} field using the</label>
                                                                        </apex:column>
                                                                        <apex:column >
                                                                            <!-- NOTE: the comma in objTypes below is used to search for Marker Layers with null as Type, and with Marker as Type -->
                                                                            <c:MALayerSearch SelectedIdVar="" objTypes=",Marker" layerType="sma__MASavedQry__c" sfObjTypes="{!lookupFieldsConfiguredApiToObjectApiMap[lookupFieldName]}" filterOutVariables="true" sectionId="{!lookupFieldName}" /><!-- requiresGeoLocation="true" -->
                                                                        </apex:column>
                                                                        <apex:column >
                                                                            <label class="slds-form-element__label" for="text-input-id-1" style=""> layer within</label>
                                                                        </apex:column>
                                                                        <apex:column style="">
                                                                            <div class="slds-form-element__control" style="display: inline-block;">
                                                                                <div class="associatedMaxDistance">
                                                                                    <input id="{!lookupFieldName}_distance" value="" placeholder="" class="slds-input short-input"/>
                                                                                </div>
                                                                                <div class="maxDistanceAlert alert" style="display:none;"></div>
                                                                            </div>
                                                                            <div class="slds-form-element__control slds-m-right_small" style="display: inline-block;">
                                                                                <div class="slds-select_container associatedMaxDistanceType">
                                                                                    <select class="slds-select summary-select" id="{!lookupFieldName}_speedlimitunits">
                                                                                        <option value="miles" selected="selected">Miles</option>
                                                                                        <option value="kilometers">Kilometers</option>
                                                                                        <option value="feet">Feet</option>
                                                                                        <option value="meters">Meters</option>
                                                                                    </select>
                                                                                </div>
                                                                            </div>
                                                                        </apex:column>
                                                                    </apex:dataTable>

                                                                </div>
                                                            </apex:outputPanel>

                                                            <!-- <div class="inactive-overlay" style="display:none;" id="stopOverlay"></div> -->
                                                        </div>
                                                    </div>

                                                    <!-- Speeding section -->
                                                    <div class="slds-card slds-m-bottom_medium">
                                                        <div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-media__figure slds-align_absolute-center slds-m-right_x-small">
                                                                    <span class="slds-icon ma-icon ma-icon-live-speeding-begin"></span>
                                                                </div>
                                                                <div>
                                                                    <h2 class="slds-text-heading_small">Speeding</h2>
                                                                </div>
                                                            </div>
                                                            <div class="slds-col_bump-left">
                                                                <div class="slds-form-element">
                                                                    <label class="slds-checkbox_toggle slds-grid page-header-inline-checkbox-toggle">
                                                                        <input id="speedingToggle" type="checkbox" checked="checked" class="slds-input" onchange="toggleDefaults(this);" />
                                                                        <span id="toggle-desc" class="slds-checkbox_faux_container">
                                                                            <span class="slds-checkbox_faux"></span>
                                                                            <span class="slds-checkbox_on">Active</span>
                                                                            <span class="slds-checkbox_off">Inactive</span>
                                                                        </span>
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="live-summary-event_body slds-p-around_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <label class="slds-form-element__label" for="speedover_field">Speed is greater than the posted speed limit by</label>
                                                                <div class="slds-form-element__control slds-m-right_xx-small">
                                                                    <input id="speedover_field" value="" placeholder="" class="slds-input short-input"/>
                                                                    <div id="speedoverAlert" class="alert" style="display:none;"></div>
                                                                </div>
                                                                <div class="slds-form-element__control slds-m-right_small">
                                                                    <div class="slds-select_container">
                                                                        <select class="slds-select summary-select" id="speedlimitunits_field">
                                                                            <option value="mph" selected="selected">Mph</option>
                                                                            <option value="kph">Kph</option>
                                                                        </select>
                                                                    </div>
                                                                </div>
                                                                <div class="slds-form-element__control slds-m-right_small">
                                                                    <div class="slds-select_container">
                                                                        <select class="slds-select summary-select" id="anyduration">
                                                                            <option value="false" selected="selected">for more than</option>
                                                                            <option value="true">for any duration</option>
                                                                        </select>
                                                                    </div>
                                                                </div>
                                                                <div class="slds-grid slds-grid_vertical-align-center" id="speedlimittime_block" style="flex-shrink: 0;">
                                                                    <div class="slds-form-element__control slds-m-right_xx-small">
                                                                        <input id="speedlimittime_field" value="" placeholder="" class="slds-input short-input"/>
                                                                        <div id="speedlimittimeAlert" class="alert" style="display:none;"></div>
                                                                    </div>
                                                                    <label class="slds-form-element__label slds-m-right_large">minute(s)</label>
                                                                </div>

                                                                <div class="slds-form-element">
                                                                    <div class="slds-form-element__control">
                                                                        <span class="slds-checkbox">
                                                                        <input id="speedingrecordcheckbox" name="options" type="checkbox" checked="checked"/>
                                                                        <label class="slds-checkbox__label" for="speedingrecordcheckbox" style="display: flex;">
                                                                            <span class="slds-checkbox_faux"></span>
                                                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                                                <div>Create a record</div>
                                                                                <div class="has-tooltip slds-m-left_small">
                                                                                    <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-right" role="tooltip" style="bottom: 32px;right: -15px;width: 20rem;">
                                                                                        <div class="slds-popover__body">Check this box to have a record created each time your speeding definition is met.
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </span>
                                                                        </label>
                                                                        </span>
                                                                    </div>
                                                                </div>

                                                            </div>
                                                            <!-- <div class="inactive-overlay" style="display:none;" id="speedingOverlay"></div> -->
                                                        </div>
                                                    </div>

                                                    <!-- Speed Threshold section -->
                                                    <div class="slds-card slds-m-bottom_medium">
                                                        <div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div>
                                                                    <h2 class="slds-text-heading_small">Speed Threshold</h2>
                                                                </div>
                                                            </div>
                                                            <div class="slds-col_bump-left">
                                                                <div class="slds-form-element">
                                                                    <label class="slds-checkbox_toggle slds-grid page-header-inline-checkbox-toggle">
                                                                        <input id="speedThreshToggle" type="checkbox" checked="checked" class="slds-input" onchange="toggleDefaults(this);" />
                                                                        <span id="toggle-desc" class="slds-checkbox_faux_container">
                                                                            <span class="slds-checkbox_faux"></span>
                                                                            <span class="slds-checkbox_on">Active</span>
                                                                            <span class="slds-checkbox_off">Inactive</span>
                                                                        </span>
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="live-summary-event_body slds-p-around_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <label class="slds-form-element__label" for="speedthresh_field">Speed meets or exceeds</label>
                                                                <div class="slds-form-element__control slds-m-right_xx-small">
                                                                    <input id="speedthresh_field" value="" placeholder="" class="slds-input short-input"/>
                                                                    <div id="speedthreshAlert" class="alert" style="display:none;"></div>
                                                                </div>
                                                                <div class="slds-form-element__control slds-m-right_small">
                                                                    <div class="slds-select_container">
                                                                        <select class="slds-select summary-select" id="speedthreshunits_field">
                                                                            <option value="mph" selected="selected">Mph</option>
                                                                            <option value="kph">Kph</option>
                                                                        </select>
                                                                    </div>
                                                                </div>
                                                                <label class="slds-form-element__label" for="spthreshduration_field">for more than</label>
                                                                <div class="slds-form-element__control slds-m-right_xx-small">
                                                                    <input id="spthreshduration_field" value="" placeholder="" class="slds-input short-input"/>
                                                                    <div id="spthreshdurationAlert" class="alert" style="display:none;"></div>
                                                                </div>
                                                                <label class="slds-form-element__label slds-m-right_large">minute(s)</label>
                                                                <div class="slds-form-element">
                                                                    <div class="slds-form-element__control">
                                                                        <span class="slds-checkbox">
                                                                        <input id="speedthresrecordcheckbox" name="options" type="checkbox" checked="checked"/>
                                                                        <label class="slds-checkbox__label" for="speedthresrecordcheckbox" style="display: flex;">
                                                                            <span class="slds-checkbox_faux"></span>
                                                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                                                <div>Create a record</div>
                                                                                <div class="has-tooltip slds-m-left_small">
                                                                                    <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-right" role="tooltip" style="bottom: 32px;right: -15px;width: 20rem;">
                                                                                        <div class="slds-popover__body">Check this box to have a record created each time your speed threshold definition is met.
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </span>
                                                                        </label>
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div>This is a global value that is set on each record when saved.</div><!--  User may change the speed threshold on individual asset records if desired. -->
                                                            </div>
                                                            <!-- <div class="inactive-overlay" style="display:none;" id="speedingOverlay"></div> -->
                                                        </div>
                                                    </div>

                                                    <!-- Hard Braking section -->
                                                    <div class="slds-card slds-m-bottom_medium">
                                                        <div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-media__figure slds-align_absolute-center slds-m-right_x-small">
                                                                    <span class="slds-icon ma-icon ma-icon-live-hard-braking"></span>
                                                                </div>
                                                                <div>
                                                                    <h2 class="slds-text-heading_small">Hard Braking</h2>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="live-summary-event_body slds-p-around_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-form-element slds-m-bottom_large">
                                                                    <div class="slds-form-element__control">
                                                                        <span class="slds-checkbox">
                                                                        <input id="hardbrakingcheckbox" name="options" type="checkbox" checked="checked"/>
                                                                        <label class="slds-checkbox__label" for="hardbrakingcheckbox" style="display: flex;">
                                                                            <span class="slds-checkbox_faux"></span>
                                                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                                                <div>Create Records for Hard Braking</div>
                                                                                <div class="has-tooltip slds-m-left_small">
                                                                                    <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                                                        <div class="slds-popover__body">Select this box to have a record created each time a Hard Braking event is captured.</div>
                                                                                    </div>
                                                                                </div>
                                                                            </span>
                                                                        </label>
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <!-- <div class="inactive-overlay" id="hardBrakingOverlay"></div> -->
                                                        </div>
                                                    </div>

                                                    <!-- Hard Accel section -->
                                                    <div class="slds-card slds-m-bottom_medium">
                                                        <div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-media__figure slds-align_absolute-center slds-m-right_x-small">
                                                                    <span class="slds-icon ma-icon ma-icon-live-quick-acceleration"></span>
                                                                </div>
                                                                <div>
                                                                    <h2 class="slds-text-heading_small">Hard Acceleration</h2>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="live-summary-event_body slds-p-around_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-form-element slds-m-bottom_large">
                                                                    <div class="slds-form-element__control">
                                                                        <span class="slds-checkbox">
                                                                        <input id="hardaccelcheckbox" name="options" type="checkbox" checked="checked"/>
                                                                        <label class="slds-checkbox__label" for="hardaccelcheckbox" style="display: flex;">
                                                                            <span class="slds-checkbox_faux"></span>
                                                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                                                <div>Create Records for Hard Acceleration</div>
                                                                                <div class="has-tooltip slds-m-left_small">
                                                                                    <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                                                        <div class="slds-popover__body">Select this box to have a record created each time a Hard Acceleration event is captured.</div>
                                                                                    </div>
                                                                                </div>
                                                                            </span>
                                                                        </label>
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <!-- <div class="inactive-overlay" id="hardAccelOverlay"></div> -->
                                                        </div>
                                                    </div>

                                                    <!-- Device Battery section -->
                                                    <div class="slds-card slds-m-bottom_medium">
                                                        <div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-media__figure slds-align_absolute-center slds-m-right_x-small">
                                                                    <span class="slds-icon ma-icon ma-icon-live-battery-on"></span>
                                                                </div>
                                                                <div>
                                                                    <h2 class="slds-text-heading_small">Device Battery On</h2>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="live-summary-event_body slds-p-around_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-form-element slds-m-bottom_large">
                                                                    <div class="slds-form-element__control">
                                                                        <span class="slds-checkbox">
                                                                        <input id="devicebatterycheckbox" name="options" type="checkbox" checked="checked"/>
                                                                        <label class="slds-checkbox__label" for="devicebatterycheckbox" style="display: flex;">
                                                                            <span class="slds-checkbox_faux"></span>
                                                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                                                <div>Create Records for Device Battery On</div>
                                                                                <div class="has-tooltip slds-m-left_small">
                                                                                    <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                                                        <div class="slds-popover__body">Select this box to have a record created each time a Device Battery event is captured.</div>
                                                                                    </div>
                                                                                </div>
                                                                            </span>
                                                                        </label>
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <!-- <div class="inactive-overlay" id="deviceBatteryOverlay"></div> -->
                                                        </div>
                                                    </div>

                                                    <!-- State Mileage section -->

                                                    <div class="slds-card slds-m-bottom_medium">
                                                        <div class="slds-grid live-summary-event_header slds-p-vertical_small slds-p-horizontal_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-media__figure slds-align_absolute-center slds-m-right_x-small">
                                                                    <span class="slds-icon ma-icon ma-icon-custom31"></span>
                                                                </div>
                                                                <div>
                                                                    <h2 class="slds-text-heading_small">Mileage By State</h2>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="live-summary-event_body slds-p-around_medium">
                                                            <div class="slds-grid slds-grid_vertical-align-center">
                                                                <div class="slds-form-element slds-m-bottom_large">
                                                                    <div class="slds-form-element__control">
                                                                        <span class="slds-checkbox">
                                                                        <input id="mileagerecordcheckbox" name="options" type="checkbox" checked="checked"/>
                                                                        <label class="slds-checkbox__label" for="mileagerecordcheckbox" style="display: flex;">
                                                                            <span class="slds-checkbox_faux"></span>
                                                                            <span class="slds-form-element__label slds-grid" style="display: flex;">
                                                                                <div>Create Records for Mileage by State</div>
                                                                                <div class="has-tooltip slds-m-left_small">
                                                                                    <span class="tooltip-field-help-icon slds-icon slds-icon_x-small ma-icon ma-icon-info"></span>
                                                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left" role="tooltip" style="bottom: 32px;left: -16px;width: 20rem;">
                                                                                        <div class="slds-popover__body">Check this box to create a related record for mileage in each state.</div>
                                                                                    </div>
                                                                                </div>
                                                                            </span>
                                                                        </label>
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <!-- <div class="inactive-overlay" id="stateMileageOverlay"></div> -->
                                                        </div>
                                                    </div>

                                                    <!-- Nav buttons -->
                                                    <div class="slds-grid">
                                                        <div class="slds-section slds-is-open">
                                                            <div class="slds-form-element">
                                                                <input type="button" value="Back" class="slds-button slds-button_neutral" onclick="triggerNav('devices-div')"/>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>

                                            <!-- Errors Tab Content -->
                                            <div class="ma-body-content summary-wrapper" id="errors-div">
                                                <div id="no-err-text" style="display: none">No errors exist for selected Summary</div>
                                                <div class="errors-section" id="ErrorsSection">
                                                    <div class="slds-form-element__group">
                                                        <div class="slds-form-element__row">
                                                            <input type="button" value="Ignore" class="slds-button slds-button--success slds-button--brand" onclick="SummaryModal.markAsComplete();" />
                                                            <input type="button" value="Re-Run Summary" class="slds-button slds-button--neutral" onclick="SummaryModal.rerunSummaries();" />
                                                        </div>
                                                    </div>
                                                    <script src="{!URLFOR($Resource.MapAnythingLiveSummary,'js/ma.datatable.js')}"></script>

                                                    <!-- Errors Table -->
                                                    <div class="Errors-table">
                                                        <table class="slds-table slds-table_resizable-cols slds-table_fixed-layout slds-table_bordered slds-table_striped ma-data-table" role="grid" id="error-table"></table>

                                                    </div>

                                                    <!-- Section Specific Functions -->
                                                    <!-- <apex:actionFunction name="complete" action="{!complete}" oncomplete="checkForMessages();dataTable.RefreshData();hideSpinner();">
                                                        <apex:param value="" name="errStrFromPage" assignTo="{!errStrFromPage}"></apex:param>
                                                    </apex:actionFunction>
                                                    <apex:actionFunction name="rerun" action="{!rerun}" oncomplete="checkForMessages();dataTable.RefreshData();hideSpinner();">
                                                        <apex:param value="" name="errStrFromPage" assignTo="{!errStrFromPage}"></apex:param>
                                                    </apex:actionFunction> -->
                                                </div>
                                            </div>

                                        </div>
                                        <!-- end body content -->
                                    </div>
                                </div>
                            </div>
                        </apex:form>
                    </div>
                    <!-- end Modal content -->

                    <footer class="slds-modal__footer">
                        <input type="button" value="Cancel" class="slds-button slds-button_neutral" onclick="SummaryModal.close();"/>
                        <input type="button" value="Save" class="slds-button slds-button_brand" onclick="SummaryModal.save();"/>
                    </footer>
                </div>
            </section>
        </div>
        <!-- end summary modal -->

        <!-- Start GM Vehicles Modal -->
        <div style="height: 660px;">
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal" id="gmmodal">
                <div id="gm-vehicles-modal" class="slds-modal__container">
                    <header class="slds-modal__header">
                        <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" onclick="GMVehiclesMgmt.closeModal();" title="Close" type="button">
                            <svg aria-hidden="true" class="slds-button__icon slds-button__icon_large"><use xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#close" xmlns:xlink="http://www.w3.org/1999/xlink"></use></svg>
                            <span class="slds-assistive-text">Close</span>
                        </button>
                        <div class="slds-grid">
                            <div class="slds-col slds-has-flexi-truncate">
                                <div class="slds-media">
                                    <div class="slds-media__body">
                                        <h1 class="slds-page-header__title slds-m-right_small slds-align-middle slds-truncate slds-text-heading--large" id="gmheader">
                                            <span id="gm-title-register">Register</span>
                                            <span id="gm-title-deregister">Deregister</span>
                                             Vehicles</h1>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </header>
                    <div class="slds-modal__content slds-p-around_medium slds-scrollable--y" style="overflow: scroll;">
                        <div id="new-vin-modal">
                            <div class="slds-grid">
                                <div class="slds-col slds-size_3-of-4">
                                    <div class="slds-form-element">
                                        <div class="slds-form-element__label slds-grid" for="gmFan">
                                            <abbr class="slds-required">*</abbr>
                                            <div class="slds-text-heading--small">GM OnStar Fleet Account Number (FAN)</div>
                                        </div>
                                        <div class="slds-form-element__control">
                                            <input type="text" class="slds-input" id="gm-fan_id"/>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-col slds-size_1-of-4"></div>
                            </div>

                            <div id="gm-email-div" class="slds-grid slds-p-top--medium">
                                <div class="slds-col slds-size_3-of-4">
                                    <div class="slds-form-element">
                                        <div class="slds-form-element__label slds-grid" for="gmEmail">
                                            <abbr class="slds-required">*</abbr>
                                            <div class="slds-grid slds-grid--vertical">
                                                <div class="slds-text-heading--small">Email recipient for GM Onstar authorization</div>
                                            </div>
                                        </div>
                                        <div class="slds-form-element__control">
                                            <input type="text" class="slds-input" id="gm-email"/>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-col slds-size_1-of-4"></div>
                            </div>


                            <div class="slds-grid slds-p-top--medium">
                                <div class="slds-col slds-size_3-of-4">
                                    <div class="slds-form-element">
                                        <div class="slds-form-element__label slds-grid" for="gmFan">
                                            <abbr class="slds-required">*</abbr>
                                            <div class="slds-grid slds-grid--vertical">
                                                <div class="slds-text-heading--small">VINs</div>
                                                <div class="slds-text-body--small">Separated by line break</div>
                                            </div>
                                        </div>
                                        <div class="slds-form-element__control">
                                            <textarea class="slds-textarea" rows="15" id="gm-vins"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-col slds-size_1-of-4"></div>
                            </div>


                        </div>
                    </div>
                    <footer class="slds-modal__footer">
                        <input class="slds-button slds-button_neutral" onclick="GMVehiclesMgmt.closeModal();" type="button" value="Cancel"/>
                        <input class="slds-button slds-button_brand" id="gm-register-job" onclick="GMVehiclesMgmt.startJob('register');" type="button" value="Register"/>
                        <input class="slds-button slds-button_destructive" id="gm-deregister-job" onclick="GMVehiclesMgmt.startJob('deregister');" type="button" value="Deregister"/>
                    </footer>
                </div>
            </section>
        </div>
        <!-- End GM Vehicles Modal -->

        <div class="slds-backdrop"></div>
    </div>


</apex:page>