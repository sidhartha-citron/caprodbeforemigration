{"version":3,"sources":["Utils/customLabels.js","Misc/ConditionDefenitions.js","Components/ServiceAppointmentFieldSelector/ServiceAppointmentFieldSelector.js","Components/ColorSchemeEditor/ServiceTypeTemplates/ColorSelector.js","Components/ColorSchemeEditor/ServiceTypeTemplates/NumberSelector.js","Components/ColorSchemeEditor/ServiceTypeTemplates/TimeDurationSelector.js","Utils/basicOperations.js","Components/ColorSchemeEditor/ServiceTypeTemplates/ServiceTypeTemplates.js","Components/ColorSchemeEditor/ColorSchemeEditor.js","Utils/callRemoteAction.js","Components/GanttPaletteEditor/PaletteColorLevel.js","Components/GanttPaletteEditor/ActivePalette.js","Components/GanttPaletteEditor/GanttPaletteEditor.js","Utils/fieldAndObjectNames.js","Components/GanttPaletteSelector/GanttPaletteSelector.js","App.js","index.js"],"names":["labels","window","GanttPalette","FieldTypes","lsdIcons","icons","distanceUnit","ServiceAppointmentFieldSelector","props","showHelp","bind","hideHelp","change","options","key","serviceAppointmentFieldsMap","currentFieldDescribe","push","value","Name","Label","state","serviceFieldsOptions","class","for","BasedOn","this","id","role","onClick","PaletteServiceFieldTooltip","href","info","onChange","fieldValue","event","target","setState","Component","inputIdNumber","ColorSelector","handleChangeComplete","handleChange","handleHexChange","handleClick","handleClose","HexToColor","newColor","color","displayColorPicker","showError","inputIdName","styles","reactCSS","width","height","borderRadius","marginRight","pickercolor","background","rgb","r","g","b","a","swatch","padding","boxShadow","display","cursor","float","minWidth","popover","position","zIndex","backgroundColor","border","margin","before","content","borderTop","borderBottom","borderRight","top","left","cover","right","bottom","slider","container","maxWidth","minHeight","marginBottom","label","hexinput","maxHeight","className","translation","type","hex","BadHexValueError","style","down","hsl","length","substr","match","OnChange","nextProps","undefined","hexToRGB","rgbToHSL","h","s","max","Math","min","l","d","String","parseInt","replace","NumberSelector","changedValue","errorMessage","help","placeholder","step","TimeDurationSelector","changedType","required","Minutes","Hours","Days","OnChangeType","OnChangeValue","hasOwnProperty","Object","prototype","isEmpty","obj","call","ServiceBooleanField","setFalseColor","setTrueColor","colorScheme","MinColorValid","MaxColorValid","Selected","Deselected","errorInPalette","isValid","newColorScheme","OnPaletteError","ServiceNumberField","setMaxColor","setMinColor","setEmptyColor","handleMinValueChanged","handleMaxValueChanged","EmptyColorValid","minMaxErrorMsg","MinimumValue","MinimumValueTooltip","MinimumColor","MaximumValue","MaximumValueTooltip","MaximumColor","empty","NoValue","parseFloat","MinMaxPaletteError","ServiceDateField","changedMinValue","changedMaxValue","changedMinType","changedMaxType","timeDurationInMilisecondsMin","timeDurationInMilisecondsMax","ServicePercentField","ServicePicklistField","changeColor","getPicklistValues","parsePicklistColors","picklistColors","picklistMap","picklist","fieldDescribe","translatedValue","PicklistLabels","validColors","colorSchemeValid","validKey","validColorsMap","newPicklistMap","i","PicklistValues","ServiceLocationField","handleMinDistanceChanged","handleMaxDistanceChanged","handleLatitudeChanged","handleLongitudeChanged","minUnitLabel","maxUnitLabel","geolocation","latitude","Latitude","longitude","Longitude","ColorSchemeEditor","initilizeColorScheme","configField","Type","assign","callRemoteAction","remoteActionName","params","promise","Promise","resolve","reject","remoteActionsParamsNew","remoteActions","concat","data","ev","status","buffer","escape","map","v","Visualforce","remoting","Manager","invokeAction","apply","PaletteColorLevel","handlePaletteColorLevelChange","PaletteColorLevelTooltip","colorLevel","ActivePalette","handleCheckboxChange","isMaxNumberOfActivePalettes","title","name","checked","active","Active","MaxActivePalette_Error","PureComponent","GanttPaletteEditor","handlePaletteNameChange","serviceFieldChanged","saveCurrentPalette","deleteCurrentPalette","handleColorSchemeChange","handlePaletteDescriptionChange","updateState","onPaletteError","palette","isSaving","isPaletteNameBlank","descriptionLength","description","nameLength","getServiceAppointmentFieldsMap","PaletteName","PaletteNameEmpty","PaletteDescriptionTooLong","Description","serviceProperty","Delete","disabled","Save","confirmDelete","confirm","areYouSureDeletePalette","paletteToDelete","Id","then","result","OnPaletteDelete","catch","ex","message","alert","paletteToSave","relevantPicklistMap","relevantPicklistMapCopy","JSON","parse","stringify","paletteName","trim","OnPaletteSave","includes","fieldName","updatedPalette","newResult","fieldNames","GanttPaletteSelector","objectNames","selectExistingPalette","parseExistingPalettesList","filterPalettes","existingPalettes","filterQuery","currentKey","getExistingGanttPalettes","palettesList","search","QuickFind","Palettes","key2","toLowerCase","indexOf","PaletteIsActive","check","NoPalettes","lastSavedPalette","lastRemovedPalette","prevState","currentPalette","OnSelect","ColorScheme__c","err","ServiceProperty__c","Active__c","Description__c","ColorLevel__c","App","setCurrentPalette","createNewPalette","addSavedPalette","removeDeletedPalette","paletteToRemove","GanttPalettes","CreateNewPalette","paletteToAdd","DueDate","paletteString","val","paletteClone","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c45fa18.chunk.js","sourcesContent":["let labels = window.GanttPalette.labels;\n\nexport default labels;","\nlet FieldTypes = {\n    BOOLEAN: 'BOOLEAN',\n    DATE: 'DATE',\n    DATETIME: 'DATETIME',\n    DOUBLE: 'DOUBLE',\n    EMAIL: 'EMAIL',\n    ID: 'ID',\n    PERCENT: 'PERCENT',\n    INTEGER: 'INTEGER',\n    PICKLIST: 'PICKLIST',\n    REFERENCE: 'REFERENCE',\n    STRING: 'STRING',\n    TEXTAREA: 'TEXTAREA',\n    LOCATION: 'LOCATION',\n    ADDRESS: 'ADDRESS',\n    PHONE: 'PHONE',\n    CURRENCY: 'CURRENCY'\n};\n\nlet lsdIcons = window.GanttPalette.icons;\nlet distanceUnit = window.GanttPalette.distanceUnit;\n\nexport {FieldTypes,lsdIcons,distanceUnit};","\nimport React, { Component } from 'react';\nimport labels from '../../Utils/customLabels';\nimport {lsdIcons} from \"../../Misc/ConditionDefenitions\";\n\nclass ServiceAppointmentFieldSelector extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.showHelp = this.showHelp.bind(this);\n        this.hideHelp = this.hideHelp.bind(this);\n        this.change = this.change.bind(this);\n        \n        let options = [];\n\n        for(let key in this.props.serviceAppointmentFieldsMap){\n            let currentFieldDescribe = this.props.serviceAppointmentFieldsMap[key];\n            options.push(<option value={currentFieldDescribe.Name}>{currentFieldDescribe.Label}</option>);\n        }\n\n        this.state = {\n            serviceFieldsOptions: options,\n            showHelp: false\n        };\n    }\n\t\n    render() {\n        return (\n            <div class=\"slds-form-element palette-editor-element-wrapper\">\n                <label class=\"slds-form-element__label\" for=\"select-01\">{labels.BasedOn}</label>\n\n                {\n                    this.state.showHelp ?\n\n                        <div class=\"slds-popover slds-popover_tooltip slds-nubbin_bottom-left help-text-value\" id=\"help\" role=\"tooltip\">\n                            <div class=\"cover-helper\" onClick={ this.hideHelp }/>\n                            <div class=\"slds-popover__body slds-text-longform\">\n                                <p>{labels.PaletteServiceFieldTooltip}</p>\n                            </div>\n                        </div>\n\n                        :\n\n                        null\n                }\n\n\n                <div class=\"slds-form-element__icon\">\n                    <button aria-describedby=\"help\" class=\"slds-button slds-button_icon\" onClick={this.showHelp}>\n                        <svg class=\"slds-icon slds-icon_x-small slds-icon-text-default\" aria-hidden=\"true\">\n                            <use href={lsdIcons.info} />\n                        </svg>\n                    </button>\n                </div>\n\n                <div class=\"slds-form-element__control\">\n                    <div class=\"slds-select_container\">\n                        <select class=\"slds-select\" id=\"select-01\" onChange={this.change} value={this.props.fieldValue}>\n                            {this.state.serviceFieldsOptions}\n                        </select>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    change(event){\n        this.props.onChange(event.target.value);\n    }\n\n    showHelp(){\n        this.setState({ showHelp: true});\n    }\n\n    hideHelp(){\n        this.setState({ showHelp: false });\n    }\n}\n\nexport default ServiceAppointmentFieldSelector;\n","\nimport React, { Component } from 'react';\nimport { SliderPicker } from 'react-color';\nimport reactCSS from 'reactcss'\nimport {lsdIcons} from '../../../Misc/ConditionDefenitions';\nimport labels from '../../../Utils/customLabels';\n\n// 3 Props Available: \n// OnChange method provides a way to act on selection of a color the method provided will return the hex value of the color selected.\n// initialColor property for the color box \n// label - text to put on the right side of the color \n\nlet inputIdNumber = 1;\n\nclass ColorSelector extends Component {\n\n    constructor(props) {\n        super(props);\n\n\t\tthis.handleChangeComplete = this.handleChangeComplete.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleHexChange = this.handleHexChange.bind(this);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t\tthis.handleClose = this.handleClose.bind(this);\n\t\tthis.HexToColor = this.HexToColor.bind(this);\n\t\t\n\t\tlet newColor = this.HexToColor(this.props.color);\n\n\t\tthis.state = {\n\t\t\tdisplayColorPicker: false,\n\t\t\tcolor: newColor,\n\t\t\tshowError: false\n\t\t};\n\n\t\tthis.inputIdName = \"input-color-selector-\" + inputIdNumber++;\n    }\n    \n    render() {\n\n\t    const styles = reactCSS({\n\t      'default': {\n\t        color: {\n\t          width: '36px',\n\t          height: '15px',\n\t          borderRadius: '2px',\n\t          marginRight: '2px'\n\t        },\n\t        pickercolor: {\n\t          background: `rgba(${ this.state.color.rgb.r }, ${ this.state.color.rgb.g }, ${ this.state.color.rgb.b }, ${ this.state.color.rgb.a })`,\n\t        },\n\t        swatch: {\n\t          padding: '5px',\n\t          background: '#fff',\n\t          borderRadius: '2px',\n\t          boxShadow: '0 0 0 1px #d8dde7',\n\t          display: 'inline-flex',\n\t          cursor: 'pointer',\n\t          float: 'right',\n\t          minWidth: '93px'\n\t        },\n\t        popover: {\n\t\t\t\tposition: 'absolute',\n\t\t\t\tzIndex: '2',\n\t\t\t\twidth: '60%',\n\t\t\t\tminWidth: '243px',\n\t\t\t\tbackgroundColor: '#ffffff',\n\t\t\t\tborder: '1px solid #d8dde6',\n\t\t\t\tpadding: '10px',\n    \t\t\tmargin: '-32px 0px 0px 161px',\n    \t\t\tboxShadow: '0 2px 3px 0 rgba(0, 0, 0, 0.16)'\n\t        },\n\t        before : { \n\t        \tpopover:  {\n\t        \t\tcontent: '',\n\t\t\t\t    display: 'block',\n\t\t\t\t    width: '0',\n\t\t\t\t    height: '0', \n\t\t\t\t    borderTop: '12px solid transparent',\n\t\t\t\t    borderBottom: '12px solid transparent',\n\t\t\t\t    borderRight: '12px solid #f5f5f5',\n\t\t\t\t    position: 'absolute',\n\t\t\t\t    top: '16px',\n\t\t\t\t    left: '-12px',\n\t\t\t\t}\n\t\t\t},\n\t        cover: {\n\t          position: 'fixed',\n\t          top: '0px',\n\t          right: '0px',\n\t          bottom: '0px',\n\t          left: '0px',\n\t        },\n\t        slider: {\n\t          position: 'relative',\n\t          padding: '5px'\n\t        },\n\t        container: {\n    \t\t\tborderBottom: '1px solid #d8dde7',\n    \t\t\tmaxWidth: '299px',\n    \t\t\tminHeight: '31px',\n    \t\t\tmarginBottom: '20px'\n\t    \t},\n\t    \tlabel:{\n\t\t\t    padding: '6px',\n\t\t\t    display: 'inline-flex',\n\t\t\t},\n\t\t\thexinput :{\n\t\t\t    maxWidth: '50px',\n\t\t\t    maxHeight: '10px',\n\t\t\t}\n\t      },\n\t    });\n\n        return (\n\n\t\t\t<div className={this.state.showError ? 'slds-form-element palette-editor-element-wrapper slds-has-error' : 'slds-form-element palette-editor-element-wrapper'}>\n\n\t\t\t\t<label class=\"slds-form-element__label\" for={this.inputIdName}>{this.props.translation}</label>\n\n\t\t\t    <div class=\"slds-color-picker\">\n\t\t\t\t\t<div class=\"slds-color-picker__summary\">\n\t\t\t\t\t\t<div class=\"slds-form-element slds-color-picker__summary-input color-text-box\">\n\t\t\t\t\t\t\t<div class=\"slds-form-element__control\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id={this.inputIdName} class=\"slds-input input-normal-line-height\" value={this.state.color.hex} onChange={this.handleHexChange}/>\n\t\t\t\t\t\t\t\t{this.state.showError === true ? <div id=\"error-message\" class=\"slds-form-element__help\">{labels.BadHexValueError}</div> : null }\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span class=\"slds-button slds-button_icon slds-button_icon-more color-swatch-button\" onClick={ this.handleClick }>\n\t\t\t\t\t\t\t<span class=\"slds-swatch color-swatch-box\" style={styles.pickercolor}/>\n\t\t\t\t\t\t\t<svg class=\"slds-button__icon slds-button__icon_small slds-m-left_xx-small color-swatch-box\" aria-hidden=\"true\">\n\t\t\t\t\t\t\t\t<use href={lsdIcons.down}/>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t        { \n\t\t        \tthis.state.displayColorPicker ? \n\t\t        \t\n\t\t        \t<div style={ styles.popover } class=\"colorbox\">\n\t\t        \t\t<div style={ styles.cover } onClick={ this.handleClose }/>\n\t\t        \t\t<div style={ styles.slider }>\n\t\t          \t\t\t<SliderPicker color={ this.state.color.hsl } onChange={ this.handleChange } />\n\t\t          \t\t</div>\n\t\t        \t</div> \n\t\t        \t\n\t\t        \t:\n\n\t\t        \tnull \n\t\t    \t}\n\t\t    </div>\n        );\n    }\n\n    componentDidMount(){\n        let newColor = this.state.color;\n\n        if(newColor.hex[0] !== '#' || newColor.hex.length !== 7 || newColor.hex.substr(1,newColor.hex.length).match(\"^[a-zA-Z0-9]+$\") === null){\n            this.props.OnChange(newColor.hex, this.props.label, false);\n        }\n        else{\n            this.props.OnChange(newColor.hex, this.props.label, true);\n        }\n\t}\n\n    componentWillReceiveProps(nextProps){\n    \tvar newColor = this.HexToColor(nextProps.color);\n\n    \tif(newColor.hex[0] !== '#' || newColor.hex.length !== 7 || newColor.hex.substr(1,newColor.hex.length).match(\"^[a-zA-Z0-9]+$\") === null){\n            this.setState({color: newColor, showError: true});\n        }\n        else{\n        \tthis.setState({color: newColor, showError: false});\n\t\t}\n    }\n\n\thandleHexChange(event){\n\t\tvar newColor = this.HexToColor(event.target.value);\n\n\t\tif(newColor.hex[0] !== '#' || newColor.hex.length !== 7 || newColor.hex.substr(1,newColor.hex.length).match(\"^[a-zA-Z0-9]+$\") === null){\n            this.props.OnChange(newColor.hex, this.props.label, false);\n\t\t}\n\t\telse{\n\t\t\tthis.props.OnChange(newColor.hex, this.props.label, true);\n\t\t}\n\t}\n\n\thandleChange(color){\n\t\tthis.setState({ color: color });\n\t}\n\n\thandleChangeComplete(color){\n\t\t\n\t}\n\n\thandleClick() {\n    \tthis.setState({ displayColorPicker: !this.state.displayColorPicker })\n  \t}\n\n  \thandleClose() {\n    \tthis.setState({ displayColorPicker: false}, this.props.OnChange(this.state.color.hex, this.props.label, true));\n  \t}\n\n\tHexToColor(hex){\n\n\t\tif(hex === undefined){\n\t\t\thex = '#1589ee';\n\t\t}\n\t\t\n\t\tvar rgb = this.hexToRGB(hex);\n\t\tvar hsl = this.rgbToHSL(rgb);\n\t\t\t\n\t\tvar color = {\n\t\t    \thex: hex,\n\t\t    \trgb: rgb,\n\t\t    \thsl: hsl \n\t\t    };\n\n\t\treturn color;\n    }\n\n  \trgbToHSL(rgb) {\n\n  \t\tvar r = rgb.r;\n\t    var g = rgb.g;\n\t    var b = rgb.b;\n\t    \n\t    r /= 255;\n\t    g /= 255;\n\t    b /= 255;\n\t    \n\t    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n\t    var h, s, l = (max + min) / 2;\n\t    \n\t    if(max === min){\n\t      h = s = 0; // achromatic\n\t    }else{\n\t      \n\t      var d = max - min;\n\t      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t      \n\t      switch(max){\n\t        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t        case g: h = (b - r) / d + 2; break;\n\t        case b: h = (r - g) / d + 4; break;\n\t      }\n\t      \n\t      h /= 6;\n\t  \t}\n\n\t  \treturn { h: h , s: s , l: l}\n\t};\n\n\thexToRGB(hex) {\n\t\thex = typeof hex === 'string' || hex instanceof String ? parseInt(hex.replace(/^#/, ''), 16) : hex;\n\t\treturn {r:(hex >> 16) & 0xFF, g:(hex >> 8) & 0xFF, b:hex & 0xFF, a: '1'};\n\t}\n}\n\nexport default ColorSelector;","\nimport React, { Component } from 'react';\nimport {lsdIcons} from '../../../Misc/ConditionDefenitions';\n\nclass NumberSelector extends Component {\n\n    constructor(props) {\n        super(props);\n        this.changedValue = this.changedValue.bind(this);\n        this.showHelp = this.showHelp.bind(this);\n        this.hideHelp = this.hideHelp.bind(this);\n\n        this.state = {\n        \tshowError: this.props.showError,\n\t\t\terrorMessage: this.props.errorMessage,\n        \tshowHelp : false\n        }\n    }\n    \n    render() {\n        return (\n \n\t\t\t<div className={this.state.showError ? 'slds-form-element palette-editor-element-wrapper slds-has-error' : 'slds-form-element palette-editor-element-wrapper'}>\n\t\t\t\t<label class=\"slds-form-element__label slds-align-middle\" for=\"form-help\">{this.props.label}</label>\n\n\t\t\t\t{ \n\t\t\t\t\tthis.state.showHelp ? \n\n\t\t\t\t\t<div class=\"slds-popover slds-popover_tooltip slds-nubbin_bottom-left help-text-value\" id=\"help\" role=\"tooltip\">\n\t\t        \t\t<div class=\"cover-helper\" onClick={ this.hideHelp }/>\n\t\t\t\t\t\t<div class=\"slds-popover__body slds-text-longform\">\n\t\t\t\t\t\t\t<p>{this.props.help}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t:\n\n\t\t\t\t\tnull\n\t\t\t\t}\n\n                { this.props.help ?\n                    <div class=\"slds-form-element__icon\">\n                        <button aria-describedby=\"help\" class=\"slds-button slds-button_icon\" onClick={this.showHelp}>\n                            <svg class=\"slds-icon slds-icon_x-small slds-icon-text-default\" aria-hidden=\"true\">\n                                <use href={lsdIcons.info}/>\n                            </svg>\n                            <span class=\"slds-assistive-text\">Help</span>\n                        </button>\n                    </div>\n                    : null\n                }\n\n\t\t\t\t<div class=\"slds-form-element__control\">\n\t\t\t\t\t<input value={this.props.value} class=\"slds-input input-normal-line-height\" id=\"form-help\" type=\"number\" onChange={this.changedValue} min={this.props.min} placeholder={this.props.placeholder} step={this.props.step}/>\n\t\t\t\t\t{this.state.showError ? <div id=\"error-message\" class=\"slds-form-element__help\">{this.state.errorMessage}</div> : null }\n\t\t\t\t</div>\n\t\t\t</div>\n        );\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({value: nextProps.value, showError: nextProps.showError, errorMessage: nextProps.errorMessage});\n    }\n\n\tshowHelp(){\n\t\tthis.setState({ showHelp: true});\n\t}\n\n\thideHelp(){\n\t\tthis.setState({ showHelp: false });\n\t}\n\n    changedValue(event){\n\t\tthis.props.OnChange(event.target.value);\n    }\n}\n\nexport default NumberSelector;","\nimport React, { Component } from 'react';\nimport labels from '../../../Utils/customLabels';\nimport {lsdIcons} from '../../../Misc/ConditionDefenitions';\n\nclass TimeDurationSelector extends Component {\n\n    constructor(props) {\n        super(props);\n        this.changedType = this.changedType.bind(this);\n        this.changedValue = this.changedValue.bind(this);\n        this.showHelp = this.showHelp.bind(this);\n        this.hideHelp = this.hideHelp.bind(this);\n\n        this.state = {\n        \tshowError: this.props.showError,\n\t\t\terrorMessage: this.props.errorMessage,\n        \tshowHelp : false\n        }\n    }\n    \n    render() {\n        return (\n\t\t\t<div className={this.state.showError ? 'slds-form-element palette-editor-element-wrapper slds-has-error' : 'slds-form-element palette-editor-element-wrapper'}>\n\t\t\t\t<label class=\"slds-form-element__label slds-align-middle\" for=\"form-help\">{this.props.label}</label>\n\n\t\t\t\t{ \n\t\t\t\t\tthis.state.showHelp ? \n\n\t\t\t\t\t<div class=\"slds-popover slds-popover_tooltip slds-nubbin_bottom-left help-text-value\" id=\"help\" role=\"tooltip\">\n\t\t        \t\t<div class=\"cover-helper\" onClick={ this.hideHelp }/>\n\t\t\t\t\t\t<div class=\"slds-popover__body slds-text-longform\">\n\t\t\t\t\t\t\t<p>{this.props.help}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t:\n\n\t\t\t\t\tnull\n\t\t\t\t}\n\n\t\t\t\t<div class=\"slds-form-element__icon\">\n\t\t\t\t\t<button aria-describedby=\"help\" class=\"slds-button slds-button_icon\" onClick={this.showHelp}>\n\t\t\t\t\t\t<svg class=\"slds-icon slds-icon_x-small slds-icon-text-default\" aria-hidden=\"true\">\n\t\t\t\t\t\t\t<use href={lsdIcons.info} />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t<span class=\"slds-assistive-text\">Help</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"slds-form-element__control\">\n\t\t\t\t\t<span class=\"duration-left-input\">\n\t\t\t\t\t\t<input value={this.props.value} class=\"slds-input input-normal-line-height\" id=\"form-help\" type=\"number\" onChange={this.changedValue}/>\n\t\t\t\t\t</span>\n\t\t\t\t\t<div class=\"slds-select_container duration-type-selector-right\">\n\t\t\t\t\t\t<select class=\"slds-select\" id=\"select-01\" required=\"\" onChange={this.changedType} value={this.props.type}>\n\t\t\t\t\t\t\t<option value=\"Minutes\">{labels.Minutes}</option>\n\t\t\t\t\t\t\t<option value=\"Hours\">{labels.Hours}</option>\n\t\t\t\t\t\t\t<option value=\"Days\">{labels.Days}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.showError ? <div id=\"error-message\" class=\"slds-form-element__help\">{this.state.errorMessage}</div> : null }\n\t\t\t\t</div>\n\t\t\t</div>\n        );\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({showError: nextProps.showError, errorMessage: nextProps.errorMessage});\n    }\n\n\tshowHelp(){\n\t\tthis.setState({ showHelp: true});\n\t}\n\n\thideHelp(){\n\t\tthis.setState({ showHelp: false });\n\t}\n\n    changedType(event){\n\t\tthis.props.OnChangeType(event.target.value);\n    }\n\n    changedValue(event){\n\t\tthis.props.OnChangeValue(event.target.value);\n    }\n}\n\nexport default TimeDurationSelector;","\n\n// Speed up calls to hasOwnProperty\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport function isEmpty(obj) {\n\n    // null and undefined are \"empty\"\n    if (obj == null) return true;\n\n    // Assume if it has a length property with a non-zero value\n    // that that property is correct.\n    if (obj.length > 0)    return false;\n    if (obj.length === 0)  return true;\n\n    // If it isn't an object at this point\n    // it is empty, but it can't be anything *but* empty\n    // Is it empty?  Depends on your application.\n    if (typeof obj !== \"object\") return true;\n\n    // Otherwise, does it have any properties of its own?\n    // Note that this doesn't handle\n    // toString and valueOf enumeration bugs in IE < 9\n    for (var key in obj) {\n        if (hasOwnProperty.call(obj, key)) return false;\n    }\n\n    return true;\n}","\nimport React, { Component } from 'react';\nimport ColorSelector from './ColorSelector';\nimport NumberSelector from './NumberSelector';\nimport TimeDurationSelector from './TimeDurationSelector';\nimport {isEmpty} from '../../../Utils/basicOperations';\nimport labels from '../../../Utils/customLabels';\nimport {distanceUnit} from '../../../Misc/ConditionDefenitions';\n\nclass ServiceBooleanField extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.setFalseColor = this.setFalseColor.bind(this);\n        this.setTrueColor = this.setTrueColor.bind(this);\n\n        this.state = {\n            colorScheme : this.props.colorScheme,\n            MinColorValid: true,\n            MaxColorValid: true\n        }\n    }\n  \n    render() {\n        return (\n            <div>\n                <div>\n                   <span>\n                        <ColorSelector color={this.state.colorScheme.max.color} OnChange={this.setTrueColor} label={labels.Selected}/>\n                   </span>\n                </div>\n                <div>\n                   <span>\n                        <ColorSelector color={this.state.colorScheme.min.color} OnChange={this.setFalseColor} label={labels.Deselected}/>\n                   </span>\n                </div>\n            </div>\n        );\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(!nextProps.errorInPalette) {\n            this.setState({colorScheme: nextProps.colorScheme, MinColorValid: true, MaxColorValid: true});\n        }\n    }\n\n    setFalseColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.color = hex;\n\n        if(isValid && this.state.MaxColorValid){\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({colorScheme: newColorScheme, MinColorValid: isValid, MaxColorValid: this.state.MaxColorValid}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setTrueColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.color = hex;\n\n        if(isValid && this.state.MinColorValid){\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({colorScheme: newColorScheme, MinColorValid: this.state.MinColorValid, MaxColorValid: isValid}, this.props.OnPaletteError(true));\n        }\n    }\n}\n\nclass ServiceNumberField extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.setMaxColor = this.setMaxColor.bind(this);\n        this.setMinColor = this.setMinColor.bind(this);\n        this.setEmptyColor = this.setEmptyColor.bind(this);\n        this.handleMinValueChanged = this.handleMinValueChanged.bind(this);\n        this.handleMaxValueChanged = this.handleMaxValueChanged.bind(this);\n\n        this.state = {\n            colorScheme : this.props.colorScheme,\n            MinColorValid: true,\n            MaxColorValid: true,\n            EmptyColorValid: true,\n            showError: false, \n            minMaxErrorMsg: ''\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                   <span>\n                        <NumberSelector value={this.state.colorScheme.min.value} label={labels.MinimumValue} OnChange={this.handleMinValueChanged} step={this.props.step} help={labels.MinimumValueTooltip} showError={this.state.showError} errorMessage={this.state.minMaxErrorMsg}/>\n                        <ColorSelector color={this.state.colorScheme.min.color} OnChange={this.setMinColor} label={labels.MinimumColor}/>\n                   </span> \n                </div>\n                <div>\n                   <span>\n                        <NumberSelector value={this.state.colorScheme.max.value} label={labels.MaximumValue} OnChange={this.handleMaxValueChanged} step={this.props.step} help={labels.MaximumValueTooltip} showError={this.state.showError} errorMessage={this.state.minMaxErrorMsg}/>\n                        <ColorSelector color={this.state.colorScheme.max.color} OnChange={this.setMaxColor} label={labels.MaximumColor}/>\n                   </span>\n                </div>\n                <div>\n                   <span>\n                        <ColorSelector color={this.state.colorScheme.empty} OnChange={this.setEmptyColor} label={labels.NoValue}/>\n                   </span> \n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount(){\n        if(parseFloat(this.state.colorScheme.min.value) >= parseFloat(this.state.colorScheme.max.value)){\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError}, this.props.OnPaletteError(true));\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(!nextProps.errorInPalette) {\n            this.setState({colorScheme: nextProps.colorScheme, minMaxErrorMsg: '', showError: false, MinColorValid: true, MaxColorValid: true, EmptyColorValid: true});\n        }\n    }\n\n    handleMinValueChanged(value){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.value = value;\n\n        if(parseFloat(this.state.colorScheme.max.value) > parseFloat(newColorScheme.min.value)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '', colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n \n    handleMaxValueChanged(value){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.value = value;\n\n        if(parseFloat(this.state.colorScheme.min.value) < parseFloat(newColorScheme.max.value)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '', colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setMinColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.color = hex;\n\n        if(isValid) {\n            if(this.state.MaxColorValid && this.state.EmptyColorValid && !this.state.showError){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({MinColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({colorScheme: newColorScheme, MinColorValid: isValid}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setMaxColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.color = hex;\n\n        if(isValid) {\n            if(this.state.MinColorValid && this.state.EmptyColorValid && !this.state.showError){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({MaxColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({colorScheme: newColorScheme, MaxColorValid: isValid}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setEmptyColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.empty = hex;\n\n        if(isValid) {\n            if(this.state.MinColorValid && this.state.MaxColorValid && !this.state.showError){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({EmptyColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({colorScheme: newColorScheme, EmptyColorValid: isValid}, this.props.OnPaletteError(true));\n        }\n    }\n}\n\nclass ServiceDateField extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.setMaxColor = this.setMaxColor.bind(this);\n        this.setMinColor = this.setMinColor.bind(this);\n        this.setEmptyColor = this.setEmptyColor.bind(this);\n        this.changedMinValue = this.changedMinValue.bind(this);\n        this.changedMaxValue = this.changedMaxValue.bind(this);\n        this.changedMinType = this.changedMinType.bind(this);\n        this.changedMaxType = this.changedMaxType.bind(this);\n\n        this.state = { \n            colorScheme: this.props.colorScheme,\n            MinColorValid: true,\n            MaxColorValid: true,\n            EmptyColorValid: true,\n            showError: false,\n            minMaxErrorMsg: ''\n        }\n    }\n  \n    render() {\n        return (\n            <div>\n                <div>\n                   <span>\n                        <TimeDurationSelector help={labels.MinimumValueTooltip} label={labels.MinimumValue} OnChangeType={this.changedMinType} OnChangeValue={this.changedMinValue} value={this.state.colorScheme.min.value} type={this.state.colorScheme.min.type} showError={this.state.showError} errorMessage={this.state.minMaxErrorMsg}/>\n                        <ColorSelector color={this.state.colorScheme.min.color} OnChange={this.setMinColor} label={labels.MinimumColor}/>\n                   </span> \n                </div>\n                <div>\n                   <span>\n                        <TimeDurationSelector help={labels.MaximumValueTooltip} label={labels.MaximumValue} OnChangeType={this.changedMaxType} OnChangeValue={this.changedMaxValue} value={this.state.colorScheme.max.value} type={this.state.colorScheme.max.type} showError={this.state.showError} errorMessage={this.state.minMaxErrorMsg}/>\n                        <ColorSelector color={this.state.colorScheme.max.color} OnChange={this.setMaxColor} label={labels.MaximumColor}/>\n                   </span>\n                </div>\n                <div>\n                   <span>\n                        <ColorSelector color={this.state.colorScheme.empty} OnChange={this.setEmptyColor} label={labels.NoValue}/>\n                   </span> \n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount(){\n\n        var timeDurationInMilisecondsMin;\n        var timeDurationInMilisecondsMax;\n\n        switch(this.state.colorScheme.max.type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*24*60*60*1000;\n                break;\n        }\n\n        switch(this.state.colorScheme.min.type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*24*60*60*1000;\n                break;\n        }\n\n        if(parseFloat(timeDurationInMilisecondsMin) >= parseFloat(timeDurationInMilisecondsMax)){\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError}, this.props.OnPaletteError(true));\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(!nextProps.errorInPalette) {\n            this.setState({\n                colorScheme: nextProps.colorScheme,\n                showError: false,\n                minMaxErrorMsg: '',\n                MinColorValid: true,\n                MaxColorValid: true,\n                EmptyColorValid: true\n            });\n        }\n    }\n\n    changedMinValue(value){\n        \n        var timeDurationInMilisecondsMin;\n        var timeDurationInMilisecondsMax;\n\n        switch(this.state.colorScheme.max.type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*24*60*60*1000;\n                break;\n        }\n\n        switch(this.state.colorScheme.min.type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMin = value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMin = value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMin = value*24*60*60*1000;\n                break;\n        }\n\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.value = value;\n\n        if(parseFloat(timeDurationInMilisecondsMin) < parseFloat(timeDurationInMilisecondsMax)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '', colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n    \n    changedMaxValue(value){\n\n        var timeDurationInMilisecondsMin;\n        var timeDurationInMilisecondsMax;\n\n        switch(this.state.colorScheme.min.type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*24*60*60*1000;\n                break;\n        }\n\n        switch(this.state.colorScheme.max.type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMax = value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMax = value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMax = value*24*60*60*1000;\n                break;\n        }\n\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.value = value;\n\n        if(parseFloat(timeDurationInMilisecondsMin) < parseFloat(timeDurationInMilisecondsMax)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '',colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    changedMinType(type){\n\n        var timeDurationInMilisecondsMin;\n        var timeDurationInMilisecondsMax;\n\n        switch(type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*24*60*60*1000;\n                break;\n        }\n\n        switch(this.state.colorScheme.max.type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*24*60*60*1000;\n                break;\n        }\n\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.type = type;\n\n        if(parseFloat(timeDurationInMilisecondsMin) < parseFloat(timeDurationInMilisecondsMax)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '', colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n    \n    changedMaxType(type){\n\n        var timeDurationInMilisecondsMin;\n        var timeDurationInMilisecondsMax;\n\n        switch(type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMax = this.state.colorScheme.max.value*24*60*60*1000;\n                break;\n        }\n\n        switch(this.state.colorScheme.min.type){\n            case \"Minutes\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*60*1000;\n                break;\n            case \"Hours\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*60*60*1000;\n                break;\n            case \"Days\":\n                timeDurationInMilisecondsMin = this.state.colorScheme.min.value*24*60*60*1000;\n                break;\n        }\n\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.type = type;\n\n        if(parseFloat(timeDurationInMilisecondsMin) < parseFloat(timeDurationInMilisecondsMax)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '', colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setMinColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.color = hex;\n\n        if(isValid && !this.state.showError && this.state.MaxColorValid && this.state.EmptyColorValid){\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({MinColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setMaxColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.color = hex;\n\n        if(isValid && !this.state.showError && this.state.MinColorValid && this.state.EmptyColorValid){\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({MaxColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setEmptyColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.empty = hex;\n\n        if(isValid && !this.state.showError && this.state.MinColorValid && this.state.MaxColorValid){\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({EmptyColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n}\n\nclass ServicePercentField extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.setMinColor = this.setMinColor.bind(this);\n        this.setMaxColor = this.setMaxColor.bind(this);\n        this.setEmptyColor = this.setEmptyColor.bind(this);\n\n        this.state = {\n            colorScheme : this.props.colorScheme,\n            MinColorValid: true,\n            MaxColorValid: true,\n            EmptyColorValid: true,\n            showError : false,\n            minMaxErrorMsg : ''\n        }\n    }\n  \n    render() {\n        return (\n            <div>\n                <div>\n                   <span>\n                        <NumberSelector value={this.state.colorScheme.min.value} label={labels.MinimumValue} OnChange={this.handleMinValueChanged} step={this.props.step} help={labels.MinimumValueTooltip} showError={this.state.showError}  errorMessage={this.state.minMaxErrorMsg}/>\n                        <ColorSelector color={this.state.colorScheme.min.color} OnChange={this.setMinColor} label={labels.MinimumColor}/>\n                   </span> \n                </div>\n                <div>\n                   <span>\n                        <NumberSelector value={this.state.colorScheme.max.value} label={labels.MaximumValue} OnChange={this.handleMaxValueChanged} step={this.props.step} help={labels.MaximumValueTooltip} showError={this.state.showError}  errorMessage={this.state.minMaxErrorMsg}/>\n                        <ColorSelector color={this.state.colorScheme.max.color} OnChange={this.setMaxColor} label={labels.MaximumColor}/>\n                   </span> \n                </div>\n                <div>\n                   <span>\n                        <ColorSelector color={this.state.colorScheme.empty} OnChange={this.setEmptyColor} label={labels.NoValue}/>\n                   </span> \n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount(){\n        if(parseFloat(this.state.colorScheme.min.value) >= parseFloat(this.state.colorScheme.max.value)){\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError}, this.props.OnPaletteError(true));\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(!nextProps.errorInPalette) {\n            this.setState({colorScheme: nextProps.colorScheme, showError: false, minMaxErrorMsg: '', MinColorValid: true, MaxColorValid: true, EmptyColorValid: true});\n        }\n    }\n\n    handleMinValueChanged(value){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.value = value;\n\n        if(parseFloat(this.state.colorScheme.max.value) > parseFloat(newColorScheme.min.value)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '', colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError , colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    handleMaxValueChanged(value){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.value = value;\n\n        if(parseFloat(this.state.colorScheme.min.value) < parseFloat(newColorScheme.max.value)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '', colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setMinColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.color = hex;\n\n        if(isValid && !this.state.showError && this.state.MaxColorValid && this.state.EmptyColorValid){\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({MinColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setMaxColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.color = hex;\n\n        if(isValid && !this.state.showError && this.state.MinColorValid && this.state.EmptyColorValid){\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({MaxColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setEmptyColor(hex, label, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.empty = hex;\n\n        if(isValid && !this.state.showError && this.state.MinColorValid && this.state.MaxColorValid){\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({EmptyColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n}\n\nclass ServicePicklistField extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.changeColor = this.changeColor.bind(this);\n        this.getPicklistValues = this.getPicklistValues.bind(this);\n        this.parsePicklistColors = this.parsePicklistColors.bind(this);\n\n        this.state = this.getPicklistValues(this.props.colorScheme);\n    }\n  \n    render() {\n\n        let picklistColors = this.parsePicklistColors();\n\n        return (\n            <div>\n                {picklistColors}\n                <div>\n                   <span>\n                        <ColorSelector color={this.state.colorScheme.empty} OnChange={this.changeColor} label={labels.NoValue} translation={labels.NoValue}/>\n                   </span> \n                </div>\n            </div>\n        );\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(!nextProps.errorInPalette) {\n            this.setState({colorScheme: nextProps.colorScheme});\n        }\n    }\n\n    parsePicklistColors(){\n        let picklistColors = [];\n        let picklistMap = this.state.colorScheme.picklist[this.props.fieldDescribe.Name];\n\n        for(let key in picklistMap) {\n\n            let translatedValue = this.props.fieldDescribe.PicklistLabels[key] || key;\n\n            picklistColors.push(<div>\n                                    <span>\n                                        <ColorSelector \n                                            color={this.state.colorScheme.picklist[this.props.fieldDescribe.Name][key]}\n                                            OnChange={this.changeColor} \n                                            label={key}\n                                            translation={translatedValue} />\n                                    </span>\n                                </div>);\n        }\n\n        return picklistColors;\n    }\n\n    changeColor(hex, key, isValid){\n        let newColorScheme = this.state.colorScheme;\n\n        if(key !== labels.NoValue){\n            newColorScheme.picklist[this.props.fieldDescribe.Name][key] = hex;\n        }\n        else{\n            newColorScheme.empty = hex;\n        }\n\n        if(isValid) {\n\n            this.state.validColors[key] = true;\n\n            let colorSchemeValid = true;\n\n            for(let validKey in this.state.validColors){\n                if(!this.state.validColors[validKey] && validKey !== key){\n                    colorSchemeValid = false;\n                    break;\n                }\n            }\n\n            if(colorSchemeValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({colorScheme: newColorScheme, validColors: this.state.validColors}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            let validColorsMap = this.state.validColors;\n            validColorsMap[key] = false;\n            this.setState({colorScheme: newColorScheme, validColors: validColorsMap}, this.props.OnPaletteError(true));\n        }\n    }\n\n    getPicklistValues(colorScheme){\n         \n        if(isEmpty(colorScheme.picklist[this.props.fieldDescribe.Name]) === true){\n            let newPicklistMap = {};\n\n            for(let i = 0 ; i < this.props.fieldDescribe.PicklistValues.length ; i++){\n                newPicklistMap[this.props.fieldDescribe.PicklistValues[i]] = \"#79c879\";\n            }\n\n            colorScheme.picklist[this.props.fieldDescribe.Name] = newPicklistMap;\n        }\n\n        var picklistMap = colorScheme.picklist[this.props.fieldDescribe.Name];\n        var validColorsMap = {};\n\n        validColorsMap[labels.NoValue] = true;\n\n        for(let key in picklistMap){\n            validColorsMap[key] = true;\n        }\n\n        return {colorScheme: colorScheme, validColors: validColorsMap};\n    }\n}\n\nclass ServiceLocationField extends Component {\n\n    constructor(props) { \n        super(props);\n\n        this.setMaxColor = this.setMaxColor.bind(this);\n        this.setMinColor = this.setMinColor.bind(this);\n        this.setEmptyColor = this.setEmptyColor.bind(this);\n        this.handleMinDistanceChanged = this.handleMinDistanceChanged.bind(this);\n        this.handleMaxDistanceChanged = this.handleMaxDistanceChanged.bind(this);\n        this.handleLatitudeChanged = this.handleLatitudeChanged.bind(this);\n        this.handleLongitudeChanged = this.handleLongitudeChanged.bind(this);\n\n        this.state = {\n            colorScheme : this.props.colorScheme,\n            MinColorValid: true,\n            MaxColorValid: true,\n            EmptyColorValid: true,\n            showError : false,\n            minMaxErrorMsg : ''\n        }\n    }\n  \n    render() {\n\n        var minUnitLabel = labels.MinimumValue + \" (\" + distanceUnit + \")\";\n        var maxUnitLabel = labels.MaximumValue + \" (\" + distanceUnit + \")\";\n\n        return (\n            <div>\n                <div>\n                    <span>\n                       <NumberSelector value={this.state.colorScheme.geolocation.latitude} label={labels.Latitude} OnChange={this.handleLatitudeChanged} step=\"0.000001\" showError={false} errorMessage=\"\"/>\n                       <NumberSelector value={this.state.colorScheme.geolocation.longitude} label={labels.Longitude} OnChange={this.handleLongitudeChanged} step=\"0.000001\" showError={false} errorMessage=\"\"/>\n                   </span>\n                </div>\n                <div>\n                   <span>\n                        <NumberSelector value={this.state.colorScheme.min.value} label={minUnitLabel} OnChange={this.handleMinDistanceChanged} step=\"0.5\" help={labels.MinimumValueTooltip} showError={this.state.showError} errorMessage={this.state.minMaxErrorMsg}/>\n                        <ColorSelector color={this.state.colorScheme.min.color} OnChange={this.setMinColor} label={labels.MinimumColor}/>\n                   </span>\n                </div>\n                <div>\n                   <span>\n                        <NumberSelector value={this.state.colorScheme.max.value} label={maxUnitLabel} OnChange={this.handleMaxDistanceChanged} step=\"0.5\" help={labels.MaximumValueTooltip} showError={this.state.showError} errorMessage={this.state.minMaxErrorMsg}/>\n                        <ColorSelector color={this.state.colorScheme.max.color} OnChange={this.setMaxColor} label={labels.MaximumColor}/>\n                   </span> \n                </div>\n                <div>\n                   <span>\n                        <ColorSelector color={this.state.colorScheme.empty} OnChange={this.setEmptyColor} label={labels.NoValue}/>\n                   </span> \n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount(){\n        if(parseFloat(this.state.colorScheme.min.value) >= parseFloat(this.state.colorScheme.max.value)){\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError}, this.props.OnPaletteError(true));\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(!nextProps.errorInPalette) {\n            this.setState({colorScheme: nextProps.colorScheme, showError: false, minMaxErrorMsg: ''});\n        }\n    }\n\n    handleLatitudeChanged(value){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.geolocation.latitude = value;\n\n        if(!this.state.showError && this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid) {\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    handleLongitudeChanged(value){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.geolocation.longitude = value;\n\n        if(!this.state.showError && this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid) {\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    handleMinDistanceChanged(value){\n\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.value = value;\n\n        if(parseFloat(this.state.colorScheme.max.value) > parseFloat(newColorScheme.min.value)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '', colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    handleMaxDistanceChanged(value){\n\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.value = value;\n\n        if(parseFloat(this.state.colorScheme.min.value) < parseFloat(newColorScheme.max.value)){\n            if(this.state.MinColorValid && this.state.MaxColorValid && this.state.EmptyColorValid){\n                this.props.OnChange(newColorScheme);\n            }\n            else{\n                this.setState({showError: false, minMaxErrorMsg: '', colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n            }\n        }\n        else{\n            this.setState({showError: true, minMaxErrorMsg: labels.MinMaxPaletteError, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setMinColor(hex, key, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.min.color = hex;\n\n        if(!this.state.showError && this.state.MaxColorValid && this.state.EmptyColorValid) {\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({MinColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setMaxColor(hex, key, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.max.color = hex;\n\n        if(!this.state.showError && this.state.MinColorValid && this.state.EmptyColorValid) {\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({MaxColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n\n    setEmptyColor(hex, key, isValid){\n        var newColorScheme = this.state.colorScheme;\n        newColorScheme.empty = hex;\n\n        if(!this.state.showError && this.state.MinColorValid && this.state.MaxColorValid) {\n            this.props.OnChange(newColorScheme);\n        }\n        else{\n            this.setState({EmptyColorValid: isValid, colorScheme: newColorScheme}, this.props.OnPaletteError(true));\n        }\n    }\n}\n\n\nexport {ServiceDateField,ServiceBooleanField,ServicePicklistField,ServiceLocationField,ServiceNumberField,ServicePercentField};\n","\nimport React, { Component } from 'react';\nimport {ServiceDateField,ServiceBooleanField,ServicePicklistField,ServiceLocationField,ServiceNumberField,ServicePercentField} from './ServiceTypeTemplates/ServiceTypeTemplates';\nimport {FieldTypes} from './../../Misc/ConditionDefenitions';\n\n// PROPS\n// colorScheme - color scheme to edit.\n// type - the type of the field to edit the colot scheme by.\n// OnChange - activate the parent function on color scheme change pass the new color scheme as argument.\n\nclass ColorSchemeEditor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.OnChange = this.OnChange.bind(this);\n        this.initilizeColorScheme = this.initilizeColorScheme.bind(this);\n\n        var colorScheme = this.initilizeColorScheme(this.props);\n\n        this.state = {\n            colorScheme : colorScheme,\n            fieldDescribe: this.props.fieldDescribe\n        }\n    }\n\t\n    render() {\n        \n        let configField;\n        let desc = this.state.fieldDescribe ? this.state.fieldDescribe.Type : undefined;\n\n        switch (desc) {\n            case FieldTypes.BOOLEAN:\n                configField = <ServiceBooleanField colorScheme={this.state.colorScheme} OnChange={this.OnChange} OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;\n            case FieldTypes.DATE:\n                configField = <ServiceDateField colorScheme={this.state.colorScheme} OnChange={this.OnChange} OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;\n            case FieldTypes.DATETIME:\n                configField = <ServiceDateField colorScheme={this.state.colorScheme} OnChange={this.OnChange} OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;\n            case FieldTypes.DOUBLE:\n                configField = <ServiceNumberField colorScheme={this.state.colorScheme} OnChange={this.OnChange} step=\"0.1\" OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;\n            case FieldTypes.INTEGER:\n                configField = <ServiceNumberField colorScheme={this.state.colorScheme} OnChange={this.OnChange} step=\"1\" OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;\n            case FieldTypes.PICKLIST:\n                configField = <ServicePicklistField colorScheme={this.state.colorScheme} OnChange={this.OnChange} fieldDescribe={this.state.fieldDescribe} OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;\n            case FieldTypes.LOCATION:\n                configField = <ServiceLocationField colorScheme={this.state.colorScheme} OnChange={this.OnChange} OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;            \n            case FieldTypes.ADDRESS:\n                configField = <ServiceLocationField colorScheme={this.state.colorScheme} OnChange={this.OnChange} OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;\n            case FieldTypes.PERCENT:\n                configField = <ServicePercentField colorScheme={this.state.colorScheme} OnChange={this.OnChange} step=\"1\" OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;\n            case FieldTypes.CURRENCY:\n                configField = <ServiceNumberField colorScheme={this.state.colorScheme} OnChange={this.OnChange} step=\"0.5\" OnPaletteError={this.props.OnPaletteError} errorInPalette={this.props.errorInPalette}/>;\n                break;\n            default: \n                configField = <span></span>;\n       }\n\n        return (\n            <div>\n                {configField}\n            </div>\n        );\n    }\n\n    componentDidMount(){\n        this.props.OnChange(this.state.colorScheme);\n    }\n\n    componentWillReceiveProps(nextProps){\n        var colorScheme = this.initilizeColorScheme(nextProps);\n        this.setState({colorScheme : colorScheme, fieldDescribe: nextProps.fieldDescribe});\n    }\n\n    initilizeColorScheme(props){\n        var colorScheme = props.colorScheme;\n\n        if(colorScheme === undefined){\n            colorScheme = {\n                min: {\n                    color: \"#79c879\",\n                    value: 0,\n                    type: \"Minutes\"\n                },\n                max: {\n                    color: \"#ff4646\",\n                    value: 1,\n                    type: \"Minutes\"\n                },\n                empty: \"#d4504c\",\n                picklist: {},\n                geolocation: {\n                    latitude: 0,\n                    longitude: 0\n                }\n            };\n        }\n        else{\n            colorScheme = Object.assign({},{...props.colorScheme});\n        }\n\n        return colorScheme;\n    }\n\n    OnChange(colorScheme){\n        this.props.OnChange(colorScheme);\n    }\n}\n\nexport default ColorSchemeEditor;\n","// remote actions, defined in OnboardingRemoteActions.component\n\nfunction callRemoteAction(remoteActionName, ...params) {\n\n    let promise = new Promise( (resolve, reject) => {\n\n        let remoteActionsParams = [window.GanttPalette.remoteActions[remoteActionName]]\n            .concat(params)\n            .concat(function(data, ev) {\n                ev.status ? resolve(data) : reject(ev);\n            })\n            .concat({ buffer: false, escape: false });\n\n        var remoteActionsParamsNew = remoteActionsParams.map(function(v) { \n            if(v === undefined){\n                return null;\n            }\n            else{\n                return v;\n            }\n        });\n\n        window.Visualforce.remoting.Manager.invokeAction.apply(window.Visualforce.remoting.Manager, remoteActionsParamsNew);\n\n    });\n\n    return promise;\n\n}\n\nexport default callRemoteAction;","\nimport React, { Component } from 'react';\nimport labels from '../../Utils/customLabels';\nimport { lsdIcons } from '../../Misc/ConditionDefenitions';\n\nclass PaletteColorLevel extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.showHelp = this.showHelp.bind(this);\n        this.hideHelp = this.hideHelp.bind(this);\n        this.handlePaletteColorLevelChange = this.handlePaletteColorLevelChange.bind(this);\n\n        this.state = {\n            showHelp: false\n        };\n    }\n\n    render() {\n        return (\n            <div class=\"slds-form-element palette-editor-element-wrapper\">\n\n                <label class=\"slds-form-element__label slds-align-middle\" for=\"form-help\">{labels.PaletteColorLevel}</label>\n\n                {\n                    this.state.showHelp ?\n\n                        <div class=\"slds-popover slds-popover_tooltip slds-nubbin_bottom-left help-text-color-level\" id=\"help\" role=\"tooltip\">\n                            <div class=\"cover-helper\" onClick={ this.hideHelp }/>\n                            <div class=\"slds-popover__body slds-text-longform\">\n                                <p>{labels.PaletteColorLevelTooltip}</p>\n                            </div>\n                        </div>\n\n                        :\n\n                        null\n                }\n\n                <div class=\"slds-form-element__icon\">\n                    <button aria-describedby=\"help\" class=\"slds-button slds-button_icon\" onClick={this.showHelp}>\n                        <svg class=\"slds-icon slds-icon_x-small slds-icon-text-default\" aria-hidden=\"true\">\n                            <use href={lsdIcons.info} />\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"slds-form-element__control\">\n                    <div class=\"slds-slider\">\n                        <input type=\"range\" id=\"slider-id-01\" class=\"slds-slider__range\" value={this.props.colorLevel} onChange={this.handlePaletteColorLevelChange} min=\"4\" max=\"15\"/>\n                        <span class=\"slds-slider__value\" aria-hidden=\"true\">{this.props.colorLevel}</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    handlePaletteColorLevelChange(event){\n        this.props.onChange(event.target.value);\n    }\n\n    showHelp(){\n        this.setState({ showHelp: true});\n    }\n\n    hideHelp(){\n        this.setState({ showHelp: false });\n    }\n}\n\nexport default PaletteColorLevel;\n","\nimport labels from \"../../Utils/customLabels\";\nimport React, { PureComponent } from 'react';\n\nclass ActivePalette extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n    }\n\n    render() {\n\n        return (\n            <div class=\"palette-editor-element-wrapper\">\n\n                {\n                    this.props.isMaxNumberOfActivePalettes\n\n                        ?\n\n                        <div class=\"slds-form-element slds-has-error\">\n                            <div class=\"slds-form-element__control\">\n                                        <span class=\"slds-checkbox\">\n                                            <abbr class=\"slds-required\" title=\"required\">*</abbr>\n                                            <input type=\"checkbox\" name=\"options\" id=\"checkbox-6\" onChange={this.handleCheckboxChange} checked={this.props.active} aria-describedby=\"error_01\"/>\n                                            <label class=\"slds-checkbox__label\" for=\"checkbox-6\">\n                                                <span class=\"slds-checkbox_faux\"></span>\n                                                <span class=\"slds-form-element__label\">{labels.Active}</span>\n                                            </label>\n                                            <div id=\"error_01\" class=\"slds-form-element__help\">{labels.MaxActivePalette_Error}</div>\n                                        </span>\n                            </div>\n                        </div>\n\n                        :\n\n                        <div class=\"slds-form-element\">\n                            <div class=\"slds-form-element__control\">\n                                        <span class=\"slds-checkbox\">\n                                            <input type=\"checkbox\" name=\"options\" id=\"checkbox-7\" onChange={this.handleCheckboxChange} checked={this.props.active}/>\n                                            <label class=\"slds-checkbox__label\" for=\"checkbox-7\">\n                                                <span class=\"slds-checkbox_faux\"></span>\n                                                <span class=\"slds-form-element__label\">{labels.Active}</span>\n                                            </label>\n                                        </span>\n                            </div>\n                        </div>\n\n                }\n            </div>\n        );\n    }\n\n    handleCheckboxChange(event){\n        this.props.onChange(event.target.checked);\n    }\n}\n\n\nexport default ActivePalette;","\nimport React, { Component } from 'react';\nimport ServiceAppointmentFieldSelector from '../ServiceAppointmentFieldSelector/ServiceAppointmentFieldSelector';\nimport ColorSchemeEditor from '../ColorSchemeEditor/ColorSchemeEditor';\nimport labels from '../../Utils/customLabels';\nimport {FieldTypes} from '../../Misc/ConditionDefenitions';\nimport callRemoteAction from '../../Utils/callRemoteAction';\nimport {isEmpty} from '../../Utils/basicOperations';\nimport PaletteColorLevel from \"./PaletteColorLevel\";\nimport ActivePalette from \"./ActivePalette\";\n\nclass GanttPaletteEditor extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handlePaletteNameChange = this.handlePaletteNameChange.bind(this);\n        this.serviceFieldChanged = this.serviceFieldChanged.bind(this);        \n        this.saveCurrentPalette = this.saveCurrentPalette.bind(this);\n        this.deleteCurrentPalette = this.deleteCurrentPalette.bind(this);\n        this.handleColorSchemeChange = this.handleColorSchemeChange.bind(this);\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n        this.handlePaletteDescriptionChange = this.handlePaletteDescriptionChange.bind(this);\n        this.handlePaletteColorLevelChange = this.handlePaletteColorLevelChange.bind(this);\n        this.updateState = this.updateState.bind(this);\n        this.onPaletteError = this.onPaletteError.bind(this);\n\n        this.state = {\n            palette: this.props.palette,\n            serviceAppointmentFieldsMap: undefined,\n            fieldDescribe: undefined,\n            isSaving: false,\n            isPaletteNameBlank: false,\n            isMaxNumberOfActivePalettes: false,\n            errorInPalette: false,\n            descriptionLength: 255 - this.props.palette.description.length,\n            nameLength: 80 - this.props.palette.name.length\n        };        \n        \n        this.getServiceAppointmentFieldsMap();\n    }\n\t\n    render() {\n        return (\n            <div class=\"palette-editor-wrapper\">\n                { \n                    this.state.serviceAppointmentFieldsMap !== undefined && this.state.palette !== undefined ?\n                    \n                    <div class=\"editor-box\">\n                        <div className={this.state.isPaletteNameBlank ? 'slds-form-element palette-editor-element-wrapper slds-has-error' : 'slds-form-element palette-editor-element-wrapper'}>\n                            <label class=\"slds-form-element__label\" for=\"text-input-id-1\">{labels.PaletteName}</label>\n                            <div class=\"slds-form-element__control\">\n                                <input type=\"text\" id=\"text-input-id-1\" class=\"slds-input\" value={this.state.palette.name} onChange={this.handlePaletteNameChange}/>\n                                { this.state.isPaletteNameBlank ? <div id=\"error-message\" class=\"slds-form-element__help\">{labels.PaletteNameEmpty}</div> : null }\n                                { this.state.nameLength < 20 ? <div class=\"slds-form-element__help remaining-text-length\" id=\"error-01\">{labels.PaletteDescriptionTooLong.replace('{0}',this.state.nameLength)}</div> : null}\n                            </div>\n                        </div>\n\n                        <div class=\"slds-form-element palette-editor-element-wrapper\">\n                            <label class=\"slds-form-element__label\" for=\"textarea-id-01\">{labels.Description}</label>\n                            <div class=\"slds-form-element__control\">\n                                <textarea id=\"textarea-id-01\" class=\"slds-textarea\" onChange={this.handlePaletteDescriptionChange} value={this.state.palette.description}/>\n                                { this.state.descriptionLength < 50 ?\n                                    <div class=\"slds-form-element__help remaining-text-length\" id=\"error-01\">{labels.PaletteDescriptionTooLong.replace('{0}',this.state.descriptionLength)}</div>\n                                    : null\n                                }\n                            </div>\n                        </div>\n\n                        <ServiceAppointmentFieldSelector serviceAppointmentFieldsMap={this.state.serviceAppointmentFieldsMap} fieldValue={this.state.palette.serviceProperty} onChange={this.serviceFieldChanged}/>\n\n                        <ColorSchemeEditor colorScheme={this.state.palette.colorScheme} fieldDescribe={this.state.fieldDescribe} OnChange={this.handleColorSchemeChange} OnPaletteError={this.onPaletteError} errorInPalette={this.state.errorInPalette}/>\n                        \n                        { \n                                this.state.fieldDescribe && this.state.fieldDescribe.Type !== FieldTypes.BOOLEAN && this.state.fieldDescribe.Type !== FieldTypes.PICKLIST  ?\n                                <PaletteColorLevel colorLevel={this.state.palette.colorLevel} onChange={this.handlePaletteColorLevelChange}/>   :   null\n                        }\n\n                        <ActivePalette isMaxNumberOfActivePalettes={this.state.isMaxNumberOfActivePalettes} active={this.state.palette.active} onChange={this.handleCheckboxChange}/>\n\n                        <div class=\"slds-form-element palette-editor-element-wrapper flex-box\">\n                            <div class=\"align-button-left\">\n                                <button className={this.state.isSaving ? 'slds-button slds-button slds-button_destructive saving' : 'slds-button slds-button_destructive' } onClick={this.deleteCurrentPalette}>{labels.Delete}</button>\n                            </div>\n                            <div>\n                                {this.state.errorInPalette ?\n                                    <button\n                                        className={this.state.isSaving ? 'slds-button slds-button_brand saving' : 'slds-button slds-button_brand'}\n                                        onClick={this.saveCurrentPalette} disabled>{labels.Save}</button>\n                                    :\n                                    <button\n                                        className={this.state.isSaving ? 'slds-button slds-button_brand saving' : 'slds-button slds-button_brand'}\n                                        onClick={this.saveCurrentPalette}>{labels.Save}</button>\n                                }\n                            </div>\n                        </div>\n                    </div>\n\n                    :\n\n                    <div>\n                        <div role=\"status\" class=\"slds-spinner slds-spinner_large\">\n                            <div class=\"slds-spinner_dot-a\"></div>\n                            <div class=\"slds-spinner_dot-b\"></div>\n                        </div>\n                    </div>\n                }\n            </div>\n        );\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.palette.type !== 'div'){\n            this.updateState(nextProps);\n        }\n    }\n\n    onPaletteError(errorInPalette){\n        this.setState({errorInPalette: errorInPalette});\n    }\n\n    updateState(props){\n        if(props.palette && this.state.serviceAppointmentFieldsMap){\n            var fieldDescribe = this.state.serviceAppointmentFieldsMap[props.palette.serviceProperty];\n            this.setState({palette: props.palette, fieldDescribe: fieldDescribe, isMaxNumberOfActivePalettes: false, errorInPalette: false});\n        }\n    }\n\n    deleteCurrentPalette(){\n        let confirmDelete = window.confirm(labels.areYouSureDeletePalette);\n\n        if(this.state.isSaving === false && confirmDelete){\n            this.setState({isSaving: true}, () => {\n\n                let paletteToDelete = this.state.palette;\n\n                callRemoteAction('deleteGanttPalette', paletteToDelete.Id).then(result => {\n                    this.setState({isSaving: false, isPaletteNameBlank: false, isMaxNumberOfActivePalettes: false, palette: undefined});\n                    this.props.OnPaletteDelete(paletteToDelete.Id);\n                }).catch(ex => {\n                    this.setState({isSaving: false, isPaletteNameBlank: false, isMaxNumberOfActivePalettes: false, palette: undefined});\n                    ex.message && window.alert(ex.message);\n                });\n            });\n        }\n    }\n\n    saveCurrentPalette(){\n        if(this.state.isSaving === false){\n            this.setState({isSaving: true}, () => {\n                \n                let paletteToSave = this.state.palette;\n                \n                if(isEmpty(paletteToSave.colorScheme) === false){\n                    if(this.state.fieldDescribe.Type === FieldTypes.PICKLIST){\n                        var relevantPicklistMap = paletteToSave.colorScheme.picklist[this.state.fieldDescribe.Name];\n                        var relevantPicklistMapCopy = JSON.parse(JSON.stringify(relevantPicklistMap));\n                        paletteToSave.colorScheme.picklist = {};\n                        paletteToSave.colorScheme.picklist[this.state.fieldDescribe.Name] = relevantPicklistMapCopy\n                    }\n                    else{\n                        paletteToSave.colorScheme.picklist = {};\n                    }\n\n                    var paletteName = paletteToSave.name.trim();\n\n                    if(!paletteName || paletteName.length === 0){\n                        this.setState({ isSaving: false, isPaletteNameBlank: true, isMaxNumberOfActivePalettes: false});\n                    }\n                    else{\n\n                        callRemoteAction('saveGanttPalette', paletteToSave.Id, paletteToSave.name, paletteToSave.description, paletteToSave.serviceProperty, JSON.stringify(paletteToSave.colorScheme), paletteToSave.colorLevel, paletteToSave.active).then(result => {\n\n                            if(paletteToSave.Id === undefined){\n                                paletteToSave.Id = result;\n                            }\n                            \n                            this.setState({isSaving: false, isPaletteNameBlank: false, isMaxNumberOfActivePalettes: false, palette: paletteToSave});\n                            this.props.OnPaletteSave(paletteToSave);\n\n                        }).catch(ex => {\n                            \n                            if(ex.message.includes(labels.MaxActivePalette_Error)){\n                                this.setState({ isSaving: false, isMaxNumberOfActivePalettes: true});\n                            }\n                            else{\n                                this.setState({ isSaving: false, isMaxNumberOfActivePalettes: false});\n                                ex.message && window.alert(ex.message);\n                            }\n                        });\n\n                    }\n                }\n                else{\n                    this.setState({ isSaving: false});\n                }\n            });\n        }\n    }\n\n    serviceFieldChanged(fieldName){\n        var updatedPalette = this.state.palette;\n        updatedPalette.serviceProperty = fieldName;\n        var fieldDescribe = this.state.serviceAppointmentFieldsMap[updatedPalette.serviceProperty];\n        this.setState({palette : updatedPalette, fieldDescribe: fieldDescribe});\n    }\n\n    handleColorSchemeChange(colorScheme){\n        var updatedPalette = this.state.palette;\n        updatedPalette.colorScheme = colorScheme;\n        this.setState({palette : updatedPalette, errorInPalette: false});\n    }\n\n    handlePaletteNameChange(event){\n        if(event.target.value.length <= 80) {\n            var updatedPalette = this.state.palette;\n            updatedPalette.name = event.target.value;\n            this.setState({palette: updatedPalette, nameLength: 80 - event.target.value.length});\n        }\n    }\n\n    handlePaletteDescriptionChange(event){\n        if(event.target.value.length <= 255) {\n            var updatedPalette = this.state.palette;\n            updatedPalette.description = event.target.value;\n            this.setState({palette: updatedPalette, descriptionLength: 255 - event.target.value.length});\n        }\n    }\n\n    handlePaletteColorLevelChange(value){\n        var updatedPalette = this.state.palette;\n        updatedPalette.colorLevel = value;\n        this.setState({palette : updatedPalette});\n    }\n\n    handleCheckboxChange(value){\n        var updatedPalette = this.state.palette;\n        updatedPalette.active = value;\n        this.setState({palette : updatedPalette});        \n    }\n\n    getServiceAppointmentFieldsMap(){\n        callRemoteAction('getServiceAppointmentFieldsMap').then(result => {\n\n            var newResult = {};\n\n            for(let key in result){\n                newResult[key] = JSON.parse(result[key].replace(/&quot;/g,'\"'));\n            }\n\n            var currentFieldDescribe = newResult[this.state.palette.serviceProperty];\n\n            this.setState({serviceAppointmentFieldsMap: newResult, fieldDescribe: currentFieldDescribe});\n\n        }).catch(ex => {\n            // TODO: add exception handling.\n        });\n    }\n}\n\nexport default GanttPaletteEditor;","let fieldNames = window.GanttPalette.fieldNames;\nlet objectNames = window.GanttPalette.objectNames;\n\nexport {fieldNames,objectNames};","\nimport React, { PureComponent } from 'react';\nimport callRemoteAction from '../../Utils/callRemoteAction';\nimport {isEmpty} from '../../Utils/basicOperations';\nimport {fieldNames} from '../../Utils/fieldAndObjectNames';\nimport {lsdIcons} from '../../Misc/ConditionDefenitions';\nimport labels from '../../Utils/customLabels';\n\n\nclass GanttPaletteSelector extends PureComponent {\n\n    constructor(props) {\n        super(props);\n\n        this.selectExistingPalette = this.selectExistingPalette.bind(this);\n        this.parseExistingPalettesList = this.parseExistingPalettesList.bind(this);\n        this.filterPalettes = this.filterPalettes.bind(this);\n        \n        this.state = {\n            existingPalettes : undefined,\n            filterQuery: undefined,\n            currentKey: undefined\n        };\n\n        this.getExistingGanttPalettes();\n    }\n\t\n    render() {\n\n        var palettesList = this.parseExistingPalettesList();\n\n        return (\n            <div>\n                <nav class=\"slds-nav-vertical\" aria-label=\"Sub page\">\n\n                    <div class=\"slds-form-element slds-col slds-p-horizontal_medium\">\n                        <div class=\"slds-form-element__control slds-input-has-icon slds-input-has-icon_left\">\n                            <svg class=\"slds-icon slds-input__icon slds-input__icon_right slds-icon-text-default\" aria-hidden=\"true\">\n                                <use href={lsdIcons.search}/>\n                            </svg>\n                            <input type=\"search\" id=\"input-id-01\" placeholder={labels.QuickFind} class=\"slds-input\" onChange={this.filterPalettes}/>\n                        </div>\n                    </div>\n\n                    <div class=\"slds-form-element slds-col slds-p-horizontal_medium navigation-bar-section\">\n                        <h2 id=\"entity-header\" class=\"slds-text-title_caps\">{labels.Palettes}</h2>\n                    </div>\n\n                    <div class=\"slds-form-element slds-col slds-p-horizontal_medium\">\n                        <ul>\n                            {palettesList}\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        );\n    }\n\n    parseExistingPalettesList(){\n        \n        var palettesList = [];\n\n        if(isEmpty(this.state.existingPalettes) === false){\n            for(let key in this.state.existingPalettes) {\n                let key2 = key;\n                \n                if(isEmpty(this.state.filterQuery) || this.state.existingPalettes[key].name.toLowerCase().indexOf(this.state.filterQuery.toLowerCase()) > -1){\n                    palettesList.push(<li title={this.state.existingPalettes[key2].name} className={key2 === this.state.currentKey ? 'slds-nav-vertical__item cancel-margin slds-is-active' : 'slds-nav-vertical__item cancel-margin' }>\n                                        <span class=\"slds-nav-vertical__action palette-picker-text-overflow\" onClick={this.selectExistingPalette.bind(this, key2)}>\n                                            <span class=\"li-palette-name-span\">{this.state.existingPalettes[key2].name}</span>\n                                            { this.state.existingPalettes[key2].active === true ?\n                                                \n                                                    <span title={labels.PaletteIsActive} class=\"active-mark-span\">\n                                                        <svg class=\"slds-icon slds-icon-text-default slds-icon_x-small active-mark-svg\" aria-hidden=\"true\">\n                                                            <use class=\"active-mark-svg\" href={lsdIcons.check}/>\n                                                        </svg>\n                                                    </span>\n\n                                                    :\n                                                    \n                                                    null\n                                            }\n                                        </span>\n                                      </li>);\n                }\n            }\n        }\n\n        if(isEmpty(palettesList) === true){\n            palettesList.push(<li class='slds-nav-vertical__item cancel-margin'><a class=\"slds-nav-vertical__action palette-picker-text-overflow\" aria-describedby=\"entity-header\" aria-current=\"page\">{labels.NoPalettes}</a></li>);\n        }\n\n        return palettesList;\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.lastSavedPalette !== undefined && nextProps.lastRemovedPalette === undefined){\n\n            this.setState((prevState) => {\n                \n                if(nextProps.lastRemovedPalette !== undefined && prevState.existingPalettes[nextProps.lastRemovedPalette] !== undefined){\n                    delete prevState.existingPalettes[nextProps.lastRemovedPalette];\n                }\n\n                prevState.existingPalettes[nextProps.lastSavedPalette.Id] = nextProps.lastSavedPalette;\n\n                return { currentKey: nextProps.lastSavedPalette.Id, existingPalettes : prevState.existingPalettes}\n            });\n        }\n        else if(nextProps.lastRemovedPalette !== undefined && nextProps.lastSavedPalette === undefined){\n            this.setState((prevState) => {\n\n                if(nextProps.lastRemovedPalette !== undefined && prevState.existingPalettes[nextProps.lastRemovedPalette] !== undefined){\n                    delete prevState.existingPalettes[nextProps.lastRemovedPalette];\n                }\n\n                return { currentKey: undefined, existingPalettes : prevState.existingPalettes}\n            });\n        }\n        else{\n            if(nextProps.currentPalette !== undefined){\n                this.setState({ currentKey: nextProps.currentPalette.Id});\n            }\n        }\n    }\n\n    selectExistingPalette(key){\n        this.props.OnSelect(this.state.existingPalettes[key]);\n    }\n\n    filterPalettes(event){\n        this.setState({filterQuery: event.target.value});\n    }\n\n    getExistingGanttPalettes(){\n        callRemoteAction('getExistingGanttPalettes').then(result => {\n\n            var existingPalettes = {};\n\n            for(let key in result){\n                \n                var colorScheme = result[key][fieldNames.ColorScheme__c];\n\n                if(colorScheme !== undefined){\n                    try{\n                        colorScheme = JSON.parse(colorScheme);\n                    }catch(err){\n                        colorScheme = undefined;\n                    }\n                }\n\n                var currentPalette = {\n                    Id: key,\n                    name: result[key][fieldNames.Name],\n                    serviceProperty: result[key][fieldNames.ServiceProperty__c],\n                    colorScheme: colorScheme,\n                    active: result[key][fieldNames.Active__c],\n                    description: result[key][fieldNames.Description__c],\n                    colorLevel: result[key][fieldNames.ColorLevel__c]\n                };\n\n                existingPalettes[key] = currentPalette;\n            }\n            \n            this.setState({existingPalettes: existingPalettes});\n\n        }).catch(ex => {\n            // TODO: add exception handling.\n        });\n    }\n}\n\nexport default GanttPaletteSelector;\n","\nimport React, { Component } from 'react';\nimport GanttPaletteEditor from './Components/GanttPaletteEditor/GanttPaletteEditor';\nimport GanttPaletteSelector from './Components/GanttPaletteSelector/GanttPaletteSelector';\nimport {lsdIcons} from './Misc/ConditionDefenitions';\nimport labels from './Utils/customLabels';\nimport {fieldNames} from './Utils/fieldAndObjectNames';\nimport './index.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.setCurrentPalette = this.setCurrentPalette.bind(this);\n        this.createNewPalette = this.createNewPalette.bind(this);\n        this.addSavedPalette = this.addSavedPalette.bind(this);\n        this.removeDeletedPalette = this.removeDeletedPalette.bind(this);\n\n        this.state = {  \n            currentPalette: undefined,\n            paletteToSave: undefined,\n            paletteToRemove: undefined\n        };\n    }\n\n    render() {\n        return (\n          <div class=\"app-box\">\n            <div class=\"section-title\">\n                <div class=\"top-page-item-left\">\n                    <span class=\"slds-icon_container slds-icon-custom-custom5 icon-margin\">\n                        <svg class=\"slds-icon slds-icon-text-default slds-icon_large icon-on-header\" aria-hidden=\"true\">\n                             <use xlinkHref={lsdIcons.palette}></use>\n                        </svg>\n                    </span>\n                    {labels.GanttPalettes}\n                </div>\n                <div class=\"top-page-item-right\">\n                    <a class=\"slds-button slds-button_brand create-palette-button\" onClick={this.createNewPalette}>{labels.CreateNewPalette}</a>\n                </div>\n            </div>\n            <div class=\"main-container\">\n                <div class=\"left-pane\">\n                    <GanttPaletteSelector currentPalette={this.state.currentPalette} OnSelect={this.setCurrentPalette} lastSavedPalette={this.state.paletteToSave} lastRemovedPalette={this.state.paletteToRemove}/>\n                </div>\n                <div class=\"right-pane\">\n                    {   \n                        this.state.currentPalette !== undefined ?  \n                        \n                            <GanttPaletteEditor palette={this.state.currentPalette} OnPaletteSave={this.addSavedPalette} OnPaletteDelete={this.removeDeletedPalette} />\n                        \n                            : \n\n                            null\n                    }\n                </div>\n            </div>\n          </div>\n        );\n    }\n\n    addSavedPalette(paletteToAdd){\n        this.setState({ paletteToSave: paletteToAdd, paletteToRemove: undefined });\n    }\n\n    removeDeletedPalette(paletteToRemove){\n        this.setState({ paletteToRemove: paletteToRemove ,paletteToSave: undefined, currentPalette: undefined});\n    }\n\n    createNewPalette(){ \n\n        this.setState((prevState) => {\n\n            var newPaletteTemplate = {\n                Id: undefined,\n                name: \"\",\n                serviceProperty: fieldNames.DueDate,\n                colorScheme: {\n                    min: {\n                        color: \"#79c879\",\n                        value: 0,\n                        type: \"Minutes\"\n                    },\n                    max: {\n                        color: \"#ff4646\",\n                        value: 1,\n                        type: \"Minutes\"\n                    },\n                    empty: \"#d4504c\",\n                    picklist: {},\n                    geolocation: {\n                        latitude: 0,\n                        longitude: 0\n                    }\n                },\n                active: false,\n                description: \"\",\n                colorLevel: 6\n            };\n\n            return { currentPalette: newPaletteTemplate, paletteToSave: undefined, paletteToRemove: undefined};\n        });\n    }\n\n    setCurrentPalette(currentPalette){\n\n        var paletteString = JSON.stringify(\n            currentPalette,\n            function(key, val) { if (val === undefined && key !== 'Id') { return \"\"; } return val; }\n        );\n\n        var paletteClone = JSON.parse(paletteString);\n\n        this.setState({currentPalette: paletteClone, paletteToSave: undefined, paletteToRemove: undefined});\n    }    \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('GanttPaletteAppRoot'));"],"sourceRoot":""}