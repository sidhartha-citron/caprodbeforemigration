"use strict";(globalThis.webpackChunkmaps_desktop=globalThis.webpackChunkmaps_desktop||[]).push([[3929],{4525:(t,e,a)=>{a.r(e),a.d(e,{default:()=>c});var i=a(2423),s=a(675),o=a(5908);const{$:r,google:l,MA:n,moment:d}=window,p={components:{MASpinner:s.Z},props:{layerData:{type:Object,required:!0}},data:()=>({proximityType:"Circle",address:"",radius:50,unit:"MILES",colorOptions:{},hours:"",minutes:"",opacity:"0.6",latitude:"",longitude:"",kmlOptions:[],kmlLayer:"",loading:!1}),computed:{...(0,o.mapGetters)("layers",{layers__getPlottedLayerByQID:"getPlottedLayerByQID"}),qid(){return this.layerData.qid},layerInfo(){return this.layers__getPlottedLayerByQID(this.qid)},plottedLayer(){return r(`.layer.proximity[qid="${this.qid}"]`)}},async created(){const{shapeType:t="Circle"}=this.layerInfo;this.proximityType=t,await this.getKMLOptions(),await this.setShapeSettings()},methods:{...(0,o.mapMutations)("layers",{layers__updateLayerInfo:"updateLayerInfo"}),setShapeSettings(){const{defaultProximitySettings:t={}}=window.userSettings,{colorOptions:e}=this.layerInfo;this.colorOptions=e||{fillOpacity:"0.6",fillColor:"#3083d3",borderColor:"#16325C"},this.radius=this.layerInfo.radius||t.radius||50,this.latitude=this.layerInfo.latitude||"",this.longitude=this.layerInfo.longitude||"",this.minutes=this.layerInfo.minutes||t.travelTimeRadiusMinutes||"",this.hours=this.layerInfo.hours||t.travelTimeRadiusHours||"1",this.unit=this.layerInfo.unit||t.unit||"MILES",this.address=this.layerInfo.address||`Lat: ${this.layerInfo.latitude}\nLong: ${this.layerInfo.longitude}`,this.loading=!1},submitChanges(){this.removeProxLayer(),this.loading=!0,this.getAddressString().then((()=>{switch(this.updateLayerSettings(),this.proximityType){case"Circle":this.renderCircle();break;case"Polygon":this.renderPolygon();break;case"KML":this.renderKML();break;case"travelTime":case"travelDistance":this.renderTravelData();break;default:console.warn("unknown type")}})).catch((t=>{this.showBoundaryErrorMsg(t),this.loading=!1}))},updateLayerSettings(){const t={...this.layerInfo,colorOptions:this.colorOptions,latitude:this.latitude,longitude:this.longitude,proximityType:this.proximityType,radius:this.radius,minutes:this.minutes,hours:this.hours,address:this.address,unit:this.unit};this.layers__updateLayerInfo(t)},renderCircle(){let t;const e=this.radius*window.unitFactors[this.unit].METERS;if(this.plottedLayer.find(".js-radiusDistance").removeClass("error"),0===e)return this.plottedLayer.find(".js-radiusDistance").addClass("error"),void(this.loading=!1);this.plottedLayer.data("proxObject",t=new l.maps.Circle({map:n.map,center:new l.maps.LatLng(this.latitude,this.longitude),radius:e,layerType:"prox",strokeColor:this.layerInfo.borderColor,strokeWeight:3,strokeOpacity:1,fillColor:this.layerInfo.fillColor,fillOpacity:this.colorOptions.fillOpacity,qid:this.qid}));const a=new l.maps.Marker({map:n.map,position:new l.maps.LatLng(this.latitude,this.longitude),title:this.address,icon:{path:l.maps.SymbolPath.CIRCLE,fillColor:"#ffffff",fillOpacity:1,strokeColor:"#000000",strokeWeight:1,scale:4}});t.centerPoint=a,l.maps.event.addListener(this.plottedLayer.data("proxObject"),"click",(t=>{window.proximityLayer_Click({position:t.latLng,type:"circle",shape:this.plottedLayer.data("proxObject")})})),l.maps.event.addListener(this.plottedLayer.data("proxObject"),"rightclick",(t=>{window.Shape_Context.call(this,t)})),this.loading=!1,window.ChangeVisibilityWhenCircleIsAdded()},getKMLOptions(){(new i.Z).setAction(this.$Remoting.processAJAXRequest).setErrorHandler(((t,e)=>{console.warn(t),this.kmlOptions=[],n.isUserLoggedIn(t,e,!0)})).invoke([{action:"getKMLOptions",ajaxResource:"QueryBuilderAPI"}],(t=>{if(t.success){const{data:e}=t;this.kmlOptions=e}}),{escape:!1,buffer:!1})},handleTravelData(t,e){const a=[],i=new l.maps.LatLngBounds,s=60*this.hours+this.minutes,o=new l.maps.Marker({position:new l.maps.LatLng({lat:this.latitude,lng:this.longitude}),title:this.address||"",icon:{path:l.maps.SymbolPath.CIRCLE,fillColor:"#ffffff",fillOpacity:1,strokeColor:"#000000",strokeWeight:1,scale:4}});i.extend(o.getPosition()),e.shapes.forEach((e=>{const r=e.coordinates,d=new l.maps.Polygon({path:r,geodesic:!0,isTravelGeom:!0,shapeType:"travelTime",fillColor:this.layerInfo.fillColor,fillOpacity:this.colorOptions.fillOpacity,layer:this.plottedLayer,strokeColor:this.layerInfo.borderColor,saveData:{isCustom:!0,proximityType:"travelTime",travelTime:s,travelLatitude:this.latitude,travelLongitude:this.longitude,travelDistance:"",travelMode:"car",travelPreference:"fastest",trafficEnabled:"disabled",departure:t}});l.maps.event.addListener(d,"click",(t=>{window.proximityLayer_Click({position:t.latLng,type:"Polygon",shape:d})})),l.maps.event.addListener(d,"rightclick",(t=>{window.Shape_Context.call(this,t)})),d.centerPoint=o,a.push(d),i.union(e.bounds),d.setMap(n.map)})),o.setMap(n.map),n.map.fitBounds(i),this.plottedLayer.data("proxObjects",a)},validateTravelDistance(){let t=!0,e="";const a=Number(this.radius*window.unitFactors[this.unit].METERS*window.unitFactors.METERS.MILES),i=Math.round(1609.34*a);if(Number.isNaN(i)||""===this.address)t=!1,e="All fields must be completed with valid input to continue.";else if(i<=0)t=!1,e="Please enter a distance greater than 0.";else if(i>5e5){let t=Math.round(5e5*window.unitFactors.METERS[this.unit]);t=t>1?t-1:t,e=`Please reduce travel distance. Max travel distance is ${t} ${this.unit}`}return t||this.showBoundaryErrorMsg(e),t},validateTravelTime(){let t=!0,e="";const a=Number(this.hours),i=Number(this.minutes),s=3600*a+60*i;return Number.isNaN(a)&&Number.isNaN(i)||""===this.address?(t=!1,e="All fields must be completed with valid input to continue."):s<=0?(t=!1,e="Please enter a time greater than 0."):s>19800&&(t=!1,e="Please reduce travel time. Max travel time equals 5 hours and 30 minutes."),t||this.showBoundaryErrorMsg(e),t},renderTravelData(){this.hasError=!1;let t=!0;if(t="travelTime"===this.proximityType?this.validateTravelTime():this.validateTravelDistance(),!t)return;const e=d().get("day"),a=d().day(e).add(-1,"weeks"),i=`${this.latitude},${this.longitude}`;let s=a;const o={mode:"fastest;car;traffic:disabled",start:`geo!${i}`};if("travelTime"===this.proximityType){const t=60*(60*this.hours+this.minutes);a.hour(this.hours).minutes(this.minutes),o.range=t,o.rangetype="time",s=a.format("YYYY-MM-DDTHH:mm:ss"),o.departure=s}else{const t=Number(this.radius*window.unitFactors[this.unit].METERS*window.unitFactors.METERS.MILES),e=Math.round(1609.34*t);o.range=e,o.rangetype="distance",s=a.format("YYYY-MM-DDTHH:mm:ss")}window.Plotting.getServiceArea({subType:"core",action:"isoline",version:"1",method:"get"},o).then((t=>{this.handleTravelData(s,t),this.loading=!1})).fail((t=>{let e=t.message||"Unknown Error";e.indexOf("endpoint")>-1&&(e=`Unautorized endpoint: ${window.MASystem.Organization.MAIO_URL}`),e=`Unable to get the service area. ${e}`,this.showBoundaryErrorMsg(e),this.loading=!1}))},showBoundaryErrorMsg(t){window.MAToastMessages.showError({message:"Boundary Error",subMessage:t,timeOut:0,closeButton:!0})},renderKML(){const t=`${n.resources.XMLDoc}?docId=${this.kmlLayer}`;new window.ZipFile(t,(e=>{const a=e.status.length>0?"KML":"KMZ",i=new window.geoXML3.parser({map:n.map,forceType:a,processStyles:!0,singleInfoWindow:!0,afterParse:()=>{window.ChangeVisibilityWhenCircleIsAdded(),this.loading=!1,this.plottedLayer.data("kmlLayer",i)},failedParse:()=>{console.warn(`Unable to parse: ${n.resources.XMLDoc}?docId=${this.kmlLayer}`),window.MAToastMessages.showError({message:"Unable to retreive or parse the KML document.",timeOut:6e3}),this.loading=!1}});i.parse(t)}))},renderPolygon(){this.plottedLayer.data("proxObject")?this.proxLayer.data("proxObject").setOptions({fillOpacity:this.colorOptions.fillOpacity}):this.plottedLayer.find(".options-polygon").text("There is no polygon associated with this layer. In order to create a polygon layer, please use the drawing toolbar on the map."),this.loading=!1},getAddressString(){return new Promise(((t,e)=>{let a=this.address;if("string"==typeof a){a=a.trim(),a=a.replace(/\n\s*\n/g,"\n");const i=a.toLowerCase(),s=/^lat: ([^\n]*)\nlong: ([^\n]*)$/;if(s.test(i)){const a=s.exec(i);if(Array.isArray(a)){const e=n.Util.parseNumberString(a[1]),i=n.Util.parseNumberString(a[2]);this.latitude=Number(e),this.longitude=Number(i),t({latitude:this.latitude,longitude:this.longitude})}else e(new Error("Unknown error while parsing the Lat/Lng input."))}else""===a?e(new Error("Address input cannot be blank.")):n.Geocoding.geocode({address:a},(a=>{const{success:i=!1,result:s={}}=a;if(i){const{Latitude:a,Longitude:i}=s;this.latitude=Number(a),this.longitude=Number(i),Number.isNaN(this.latitude)||Number.isNaN(this.longitude)?e(new Error("No valid geocode received.")):t({latitude:this.latitude,longitude:this.longitude})}else e(new Error("Geocode error."))}))}else e(new Error("Invalid address input."))}))},removeProxLayer(){try{this.plottedLayer.data("proxObject").centerPoint.setMap(null)}catch(t){}try{r.each(this.plottedLayer.data("proxObjects"),((t,e)=>{try{e.centerPoint.setMap(null)}catch(t){}e.setMap(null)}))}catch(t){}if(this.plottedLayer.data("proxObject")&&"Polygon"!==this.plottedLayer.find(".proximitytype").val()){if(this.plottedLayer.data("proxObject").popupHandle)try{this.plottedLayer.data("proxObject").popupHandle.setMap(null)}catch(t){}try{this.plottedLayer.data("proxObject").setMap(null)}catch(t){n.log(t)}this.plottedLayer.removeData("proxObject")}this.plottedLayer.data("dataLayer")&&this.plottedLayer.data("dataLayer").setMap(null),this.plottedLayer.data("kmlLayer")&&this.plottedLayer.data("kmlLayer").hideDocument()}}},c=(0,a(1900).Z)(p,(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"proximity layer"},[a("div",{staticClass:"slds-scope"},[a("MASpinner",{directives:[{name:"show",rawName:"v-show",value:t.loading,expression:"loading"}]})],1),t._v(" "),a("div",{staticClass:"singleViewInfo pad-16"},[a("div",{staticClass:"options-wrapper"},[a("div",{staticClass:"select-info"},[a("label",{staticClass:"ma-input-label"},[t._v("Type")]),t._v(" "),a("div",{staticClass:"ma-form-control has-inset-icon--right"},[a("i",{staticClass:"ma-icon ma-icon-down inset-icon--right"}),t._v(" "),a("select",{directives:[{name:"model",rawName:"v-model",value:t.proximityType,expression:"proximityType"}],staticClass:"ma-input proximitytype",attrs:{disabled:"Polygon"===t.proximityType},on:{change:function(e){var a=Array.prototype.filter.call(e.target.options,(function(t){return t.selected})).map((function(t){return"_value"in t?t._value:t.value}));t.proximityType=e.target.multiple?a:a[0]}}},[a("option",{attrs:{value:"Circle"}},[t._v(t._s(t.$Labels.MA_Circle))]),t._v(" "),a("option",{staticStyle:{display:"none"},attrs:{value:"Polygon"}},[t._v("\n                            "+t._s(t.$Labels.MA_Polygon)+"\n                        ")]),t._v(" "),a("option",{attrs:{value:"KML"}},[t._v(t._s(t.$Labels.MA_KML))]),t._v(" "),a("option",{attrs:{value:"travelTime"}},[t._v(t._s(t.$Labels.MA_Travel_Time))]),t._v(" "),a("option",{attrs:{value:"travelDistance"}},[t._v(t._s(t.$Labels.MA_Travel_Distance))])])])]),t._v(" "),a("div",{staticClass:"prox-option-select"},[a("div",{staticClass:"prox-option"},[a("div",{directives:[{name:"show",rawName:"v-show",value:"KML"!==t.proximityType&&"Polygon"!==t.proximityType,expression:"proximityType !== 'KML' && proximityType !== 'Polygon'"}],staticClass:"ma-form-control-wrap js-toggleKML",attrs:{id:"boundary-address"}},[a("label",{staticClass:"ma-input-label"},[t._v(t._s(t._f("decode")(t.$Labels.MA_Address)))]),t._v(" "),a("textarea",{directives:[{name:"model",rawName:"v-model",value:t.address,expression:"address"}],staticClass:"ma-input",attrs:{placeholder:t.$Labels.MA_Address_Ellipsis,type:"text"},domProps:{value:t.address},on:{input:function(e){e.target.composing||(t.address=e.target.value)}}})]),t._v(" "),"Circle"===t.proximityType||"travelDistance"===t.proximityType?a("div",[a("div",{staticClass:"ma-form-control-wrap js-rowToggle",attrs:{"data-id":"travelDistance::Circle"}},[a("label",{staticClass:"ma-input-label"},[t._v(t._s(t._f("decode")(t.$Labels.MA_Radius)))]),t._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.radius,expression:"radius"}],staticClass:"numberVal ma-input js-radiusDistance prox-style",attrs:{placeholder:"0",type:"text"},domProps:{value:t.radius},on:{input:function(e){e.target.composing||(t.radius=e.target.value)}}})]),t._v(" "),a("div",{staticClass:"ma-form-control-wrap js-rowToggle",attrs:{"data-id":"travelDistance::Circle"}},[a("label",{staticClass:"ma-input-label"},[t._v(t._s(t._f("decode")(t.$Labels.MA_UNITS)))]),t._v(" "),a("div",{staticClass:"ma-form-control has-inset-icon--right"},[a("i",{staticClass:"ma-icon ma-icon-down inset-icon--right"}),t._v(" "),a("select",{directives:[{name:"model",rawName:"v-model",value:t.unit,expression:"unit"}],staticClass:"ma-input js-radiusUnit",attrs:{disabled:!t.$store.state.defaultSettings.defaultProximityType.overridable},on:{change:function(e){var a=Array.prototype.filter.call(e.target.options,(function(t){return t.selected})).map((function(t){return"_value"in t?t._value:t.value}));t.unit=e.target.multiple?a:a[0]}}},[a("option",{attrs:{value:"MILES"}},[t._v(t._s(t._f("decode")(t.$Labels.Routes_Miles)))]),t._v(" "),a("option",{attrs:{value:"KM"}},[t._v(t._s(t._f("decode")(t.$Labels.Routes_Kilometers)))]),t._v(" "),a("option",{attrs:{value:"METERS"}},[t._v(t._s(t._f("decode")(t.$Labels.MA_Meters)))]),t._v(" "),a("option",{attrs:{value:"YARDS"}},[t._v(t._s(t._f("decode")(t.$Labels.MA_Yards)))]),t._v(" "),a("option",{attrs:{value:"FEET"}},[t._v(t._s(t._f("decode")(t.$Labels.MA_Feet)))])])])])]):t._e(),t._v(" "),"travelTime"===t.proximityType?a("div",[a("div",{staticClass:"ma-form-control-wrap js-rowToggle",attrs:{"data-id":"travelTime"}},[a("label",{staticClass:"ma-input-label"},[t._v(t._s(t._f("decode")(t.$Labels.MA_hours)))]),t._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.hours,expression:"hours"}],staticClass:"numberVal ma-input radius-hours prox-style",attrs:{placeholder:"0",type:"text"},domProps:{value:t.hours},on:{input:function(e){e.target.composing||(t.hours=e.target.value)}}})]),t._v(" "),a("div",{staticClass:"ma-form-control-wrap js-rowToggle",attrs:{"data-id":"travelTime"}},[a("label",{staticClass:"ma-input-label"},[t._v(t._s(t._f("decode")(t.$Labels.MA_minutes)))]),t._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.minutes,expression:"minutes"}],staticClass:"numberVal ma-input radius-minutes prox-style",attrs:{placeholder:"0",type:"text"},domProps:{value:t.minutes},on:{input:function(e){e.target.composing||(t.minutes=e.target.value)}}})])]):t._e(),t._v(" "),"KML"===t.proximityType?a("div",[a("div",{staticClass:"ma-form-control-wrap js-rowToggle",attrs:{"data-id":"KML"}},[a("div",{staticClass:"ma-form-control has-inset-icon--right"},[a("i",{staticClass:"ma-icon ma-icon-down inset-icon--right"}),t._v(" "),a("select",{directives:[{name:"model",rawName:"v-model",value:t.kmlLayer,expression:"kmlLayer"}],staticClass:"ma-input options-kml-document",on:{change:function(e){var a=Array.prototype.filter.call(e.target.options,(function(t){return t.selected})).map((function(t){return"_value"in t?t._value:t.value}));t.kmlLayer=e.target.multiple?a:a[0]}}},t._l(t.kmlOptions,(function(e,i){return a("option",{key:i,domProps:{value:e.Id}},[t._v("\n                                        "+t._s(t._f("decode")(e.Name))+"\n                                    ")])})),0)])])]):t._e()])])]),t._v(" "),a("div",{staticClass:"color-wrapper js-colorOptions"},[a("div",{staticClass:"ma-form-control-wrap color-select hidden"},[a("label",{staticClass:"ma-input-label"},[t._v(t._s(t.$Labels.MA_FILL))]),t._v(" "),a("input",{staticClass:"color fillcolor prox-style ma-input",staticStyle:{"background-image":"none","background-color":"rgb(48, 131, 211)",color:"rgb(255, 255, 255)"},attrs:{type:"text",autocomplete:"off",value:"#3083d3"}})]),t._v(" "),a("div",{staticClass:"ma-form-control-wrap color-select hidden"},[a("label",{staticClass:"ma-input-label"},[t._v(t._s(t.$Labels.MA_BORDER))]),t._v(" "),a("input",{staticClass:"color bordercolor prox-style ma-input",staticStyle:{"background-image":"none","background-color":"rgb(22, 50, 92)",color:"rgb(255, 255, 255)"},attrs:{type:"text",autocomplete:"off",value:"#16325C"}})]),t._v(" "),"KML"!==t.proximityType&&"Polygon"!==t.proximityType?a("div",{staticClass:"ma-form-control-wrap opac-wrapper"},[a("label",{staticClass:"ma-input-label"},[t._v(t._s(t.$Labels.MA_OPACITY))]),t._v(" "),a("div",{staticClass:"ma-form-control has-inset-icon--right"},[a("i",{staticClass:"ma-icon ma-icon-down inset-icon--right"}),t._v(" "),a("select",{directives:[{name:"model",rawName:"v-model",value:t.colorOptions.fillOpacity,expression:"colorOptions.fillOpacity"}],staticClass:"ma-input js-proxOpacity",on:{change:function(e){var a=Array.prototype.filter.call(e.target.options,(function(t){return t.selected})).map((function(t){return"_value"in t?t._value:t.value}));t.$set(t.colorOptions,"fillOpacity",e.target.multiple?a:a[0])}}},[a("option",{attrs:{value:"0.1"}},[t._v("10%")]),t._v(" "),a("option",{attrs:{value:"0.2"}},[t._v("20%")]),t._v(" "),a("option",{attrs:{value:"0.3"}},[t._v("30%")]),t._v(" "),a("option",{attrs:{value:"0.4"}},[t._v("40%")]),t._v(" "),a("option",{attrs:{value:"0.5"}},[t._v("50%")]),t._v(" "),a("option",{attrs:{value:"0.6"}},[t._v("60%")]),t._v(" "),a("option",{attrs:{value:"0.7"}},[t._v("70%")]),t._v(" "),a("option",{attrs:{value:"0.8"}},[t._v("80%")]),t._v(" "),a("option",{attrs:{value:"0.9"}},[t._v("90%")]),t._v(" "),a("option",{attrs:{value:"1"}},[t._v("100%")])])])]):t._e()]),t._v(" "),a("div",{staticClass:"ma-form-control-wrap",staticStyle:{"margin-top":"28px"}},[a("div",[a("button",{staticClass:"full-width button-update ma-button ma-button--blue",staticStyle:{"line-height":"30px"},on:{click:t.submitChanges}},[t._v("\n                    "+t._s(t.$Labels.MA_Submit)+"\n                ")])])])])])}),[],!1,null,null,null).exports}}]);